
> @deve1993/ui-library@1.0.0 npx
> eslint . --format json

[{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\AuroraWaves\\AuroraWaves.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\AuroraWaves\\AuroraWaves.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'r' is never reassigned. Use 'const' instead.","line":68,"column":12,"nodeType":"Identifier","messageId":"useConst","endLine":68,"endColumn":13,"fix":{"range":[2122,2149],"text":"const [, r, g, b, a] = match;"}},{"ruleId":"prefer-const","severity":2,"message":"'g' is never reassigned. Use 'const' instead.","line":68,"column":15,"nodeType":"Identifier","messageId":"useConst","endLine":68,"endColumn":16,"fix":{"range":[2122,2149],"text":"const [, r, g, b, a] = match;"}},{"ruleId":"prefer-const","severity":2,"message":"'b' is never reassigned. Use 'const' instead.","line":68,"column":18,"nodeType":"Identifier","messageId":"useConst","endLine":68,"endColumn":19,"fix":{"range":[2122,2149],"text":"const [, r, g, b, a] = match;"}},{"ruleId":"prefer-const","severity":2,"message":"'a' is never reassigned. Use 'const' instead.","line":68,"column":21,"nodeType":"Identifier","messageId":"useConst","endLine":68,"endColumn":22,"fix":{"range":[2122,2149],"text":"const [, r, g, b, a] = match;"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":276,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":276,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7919,7944],"text":"animationFrameRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7919,7944],"text":"animationFrameRef.current ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7919,7944],"text":"Boolean(animationFrameRef.current)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'animate', 'initStars', and 'initWaves'. Either include them or remove the dependency array.","line":280,"column":6,"nodeType":"ArrayExpression","endLine":280,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [dimensions, waveCount, speed, showStars, starCount, initWaves, animate, initStars]","fix":{"range":[8025,8077],"text":"[dimensions, waveCount, speed, showStars, starCount, initWaves, animate, initStars]"}}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":4,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport type { AuroraWavesProps, Wave, Star } from './AuroraWaves.types';\n\nexport const AuroraWaves: React.FC<AuroraWavesProps> = ({\n  colors = ['rgba(0, 255, 255, 0.3)', 'rgba(138, 43, 226, 0.3)', 'rgba(255, 105, 180, 0.3)'],\n  speed = 5,\n  amplitude = 100,\n  waveCount = 3,\n  blur = 30,\n  parallax = true,\n  parallaxIntensity = 0.3,\n  backgroundColor = 'rgba(10, 10, 35, 1)',\n  shimmer = true,\n  showStars = true,\n  starCount = 100,\n  colorShift = false,\n  className = '',\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const wavesRef = useRef<Wave[]>([]);\n  const starsRef = useRef<Star[]>([]);\n  const mouseRef = useRef({ x: 0.5, y: 0.5 });\n  const animationFrameRef = useRef<number>();\n  const timeRef = useRef(0);\n  const colorShiftRef = useRef(0);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  // Initialize waves\n  const initWaves = () => {\n    const waves: Wave[] = [];\n    for (let i = 0; i < waveCount; i++) {\n      waves.push({\n        offset: Math.random() * Math.PI * 2,\n        frequency: 0.01 + Math.random() * 0.02,\n        amplitude: amplitude * (0.5 + Math.random() * 0.5),\n        speed: (speed / 100) * (0.5 + Math.random() * 0.5),\n        color: colors[i % colors.length],\n        opacity: 0.3 + Math.random() * 0.4,\n      });\n    }\n    wavesRef.current = waves;\n  };\n\n  // Initialize stars\n  const initStars = () => {\n    const stars: Star[] = [];\n    for (let i = 0; i < starCount; i++) {\n      stars.push({\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        size: 0.5 + Math.random() * 2,\n        opacity: 0.3 + Math.random() * 0.7,\n        twinkleSpeed: 0.5 + Math.random() * 2,\n        twinkleOffset: Math.random() * Math.PI * 2,\n      });\n    }\n    starsRef.current = stars;\n  };\n\n  // Helper function to shift color hue\n  const shiftColor = (colorStr: string, shift: number): string => {\n    // Extract RGB values from rgba string\n    const match = colorStr.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+),?\\s*([\\d.]*)\\)/);\n    if (!match) return colorStr;\n\n    let [, r, g, b, a] = match;\n    const rVal = parseInt(r) / 255;\n    const gVal = parseInt(g) / 255;\n    const bVal = parseInt(b) / 255;\n    const alpha = a || '1';\n\n    // Convert RGB to HSL\n    const max = Math.max(rVal, gVal, bVal);\n    const min = Math.min(rVal, gVal, bVal);\n    let h = 0;\n    const l = (max + min) / 2;\n    const s = max === min ? 0 : l > 0.5 ? (max - min) / (2 - max - min) : (max - min) / (max + min);\n\n    if (max !== min) {\n      if (max === rVal) h = ((gVal - bVal) / (max - min) + (gVal < bVal ? 6 : 0)) / 6;\n      else if (max === gVal) h = ((bVal - rVal) / (max - min) + 2) / 6;\n      else h = ((rVal - gVal) / (max - min) + 4) / 6;\n    }\n\n    // Shift hue\n    h = (h + shift) % 1;\n\n    // Convert back to RGB\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1/6) return p + (q - p) * 6 * t;\n      if (t < 1/2) return q;\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n      return p;\n    };\n\n    let rNew, gNew, bNew;\n    if (s === 0) {\n      rNew = gNew = bNew = l;\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      rNew = hue2rgb(p, q, h + 1/3);\n      gNew = hue2rgb(p, q, h);\n      bNew = hue2rgb(p, q, h - 1/3);\n    }\n\n    return `rgba(${Math.round(rNew * 255)}, ${Math.round(gNew * 255)}, ${Math.round(bNew * 255)}, ${alpha})`;\n  };\n\n  // Draw aurora waves\n  const draw = (ctx: CanvasRenderingContext2D, width: number, height: number) => {\n    // Clear and draw background\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw stars background\n    if (showStars) {\n      ctx.filter = 'none';\n      starsRef.current.forEach((star) => {\n        const twinkle = Math.sin(timeRef.current * star.twinkleSpeed + star.twinkleOffset) * 0.5 + 0.5;\n        ctx.globalAlpha = star.opacity * twinkle;\n        ctx.fillStyle = 'rgba(255, 255, 255, 1)';\n        ctx.beginPath();\n        ctx.arc(\n          (star.x / 100) * width,\n          (star.y / 100) * height,\n          star.size,\n          0,\n          Math.PI * 2\n        );\n        ctx.fill();\n      });\n      ctx.globalAlpha = 1;\n    }\n\n    // Apply blur for waves\n    ctx.filter = `blur(${blur}px)`;\n\n    // Update color shift\n    if (colorShift) {\n      colorShiftRef.current = (colorShiftRef.current + 0.001) % 1;\n    }\n\n    // Draw each wave\n    wavesRef.current.forEach((wave, index) => {\n      const currentColor = colorShift ? shiftColor(wave.color, colorShiftRef.current) : wave.color;\n\n      ctx.globalAlpha = wave.opacity;\n      ctx.fillStyle = currentColor;\n\n      ctx.beginPath();\n      ctx.moveTo(0, height);\n\n      // Generate wave path\n      for (let x = 0; x <= width; x += 5) {\n        const baseY = height / 2;\n\n        // Primary wave\n        const y1 = Math.sin(x * wave.frequency + wave.offset + timeRef.current * wave.speed) * wave.amplitude;\n\n        // Secondary wave for complexity\n        const y2 = Math.sin(x * wave.frequency * 1.5 + wave.offset * 1.3 + timeRef.current * wave.speed * 0.7) * wave.amplitude * 0.5;\n\n        // Parallax offset based on mouse position\n        let parallaxOffset = 0;\n        if (parallax) {\n          parallaxOffset = (mouseRef.current.x - 0.5) * width * parallaxIntensity * (index + 1) / waveCount;\n        }\n\n        const y = baseY + y1 + y2 + (mouseRef.current.y - 0.5) * amplitude * parallaxIntensity;\n\n        ctx.lineTo(x + parallaxOffset, y);\n      }\n\n      ctx.lineTo(width, height);\n      ctx.lineTo(0, height);\n      ctx.closePath();\n      ctx.fill();\n\n      // Add glow effect\n      ctx.globalCompositeOperation = 'lighter';\n      ctx.globalAlpha = wave.opacity * 0.3;\n      ctx.fill();\n      ctx.globalCompositeOperation = 'source-over';\n\n      // Add shimmer effect\n      if (shimmer) {\n        ctx.globalCompositeOperation = 'lighter';\n        const shimmerOpacity = (Math.sin(timeRef.current * 2 + index) * 0.5 + 0.5) * 0.2;\n        ctx.globalAlpha = shimmerOpacity;\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\n        ctx.fill();\n        ctx.globalCompositeOperation = 'source-over';\n      }\n    });\n\n    ctx.filter = 'none';\n    ctx.globalAlpha = 1;\n\n    // Increment time\n    timeRef.current += 0.05;\n  };\n\n  // Animation loop\n  const animate = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    draw(ctx, canvas.width, canvas.height);\n\n    animationFrameRef.current = requestAnimationFrame(animate);\n  };\n\n  // Handle resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (canvasRef.current) {\n        const rect = canvasRef.current.getBoundingClientRect();\n        setDimensions({\n          width: rect.width,\n          height: rect.height,\n        });\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n    };\n  }, []);\n\n  // Handle mouse move for parallax\n  useEffect(() => {\n    if (!parallax) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      mouseRef.current = {\n        x: e.clientX / window.innerWidth,\n        y: e.clientY / window.innerHeight,\n      };\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [parallax]);\n\n  // Initialize and start animation\n  useEffect(() => {\n    if (dimensions.width === 0 || dimensions.height === 0) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n\n    initWaves();\n    if (showStars) {\n      initStars();\n    }\n    animate();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [dimensions, waveCount, speed, showStars, starCount]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={`fixed inset-0 -z-10 h-full w-full ${className}`}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\AuroraWaves\\AuroraWaves.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\AuroraWaves\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundBeams\\BackgroundBeams.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundBeams\\BackgroundBeams.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundBeams\\BackgroundBeams.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundBeams\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundDots\\BackgroundDots.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundDots\\BackgroundDots.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundDots\\BackgroundDots.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundDots\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundGrid\\BackgroundGrid.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundGrid\\BackgroundGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundGrid\\BackgroundGrid.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\BackgroundGrid\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\FluidGradient\\FluidGradient.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\FluidGradient\\FluidGradient.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":68,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":68,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2280,2298],"text":"(blob.morphProgress != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2280,2298],"text":"(blob.morphProgress ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2280,2298],"text":"(Boolean(blob.morphProgress))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":76,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":76,"endColumn":56,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2651,2668],"text":"(blob.targetRadius != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2651,2668],"text":"(blob.targetRadius ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2651,2668],"text":"(Boolean(blob.targetRadius))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":140,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":140,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4294,4319],"text":"animationFrameRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4294,4319],"text":"animationFrameRef.current ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4294,4319],"text":"Boolean(animationFrameRef.current)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'animate' and 'initBlobs'. Either include them or remove the dependency array.","line":144,"column":6,"nodeType":"ArrayExpression","endLine":144,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [animate, blobCount, initBlobs, speed]","fix":{"range":[4400,4418],"text":"[animate, blobCount, initBlobs, speed]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport type { FluidGradientProps, Blob } from './FluidGradient.types';\n\nexport const FluidGradient: React.FC<FluidGradientProps> = ({\n  colors = ['#667eea', '#764ba2', '#f093fb', '#4facfe'],\n  speed = 5,\n  blur = 40,\n  interactive = true,\n  mouseRadius = 200,\n  blobCount = 5,\n  glow = true,\n  glowIntensity = 0.5,\n  morphing = true,\n  morphSpeed = 0.02,\n  className = '',\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const blobsRef = useRef<Blob[]>([]);\n  const mouseRef = useRef({ x: 0, y: 0 });\n  const animationFrameRef = useRef<number>();\n  const [, forceUpdate] = useState({});\n\n  // Initialize blobs with morphing properties\n  const initBlobs = () => {\n    const blobs: Blob[] = [];\n    for (let i = 0; i < blobCount; i++) {\n      const radius = 20 + Math.random() * 30;\n      blobs.push({\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        radius,\n        vx: (Math.random() - 0.5) * speed * 0.2,\n        vy: (Math.random() - 0.5) * speed * 0.2,\n        color: colors[i % colors.length],\n        targetRadius: radius + (Math.random() - 0.5) * 15,\n        morphProgress: 0,\n      });\n    }\n    blobsRef.current = blobs;\n  };\n\n  // Update blob positions with improved physics\n  const updateBlobs = () => {\n    blobsRef.current.forEach((blob) => {\n      // Mouse interaction with ripple effect\n      if (interactive && containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        const mouseXPercent = ((mouseRef.current.x - rect.left) / rect.width) * 100;\n        const mouseYPercent = ((mouseRef.current.y - rect.top) / rect.height) * 100;\n\n        const dx = mouseXPercent - blob.x;\n        const dy = mouseYPercent - blob.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < mouseRadius / 10) {\n          // Stronger attraction with easing\n          const force = (mouseRadius / 10 - distance) / (mouseRadius / 10);\n          const easing = 1 - Math.pow(1 - force, 3); // Cubic easing\n          blob.vx += (dx / distance) * easing * 0.8;\n          blob.vy += (dy / distance) * easing * 0.8;\n        }\n      }\n\n      // Morphing animation\n      if (morphing) {\n        blob.morphProgress = (blob.morphProgress || 0) + morphSpeed;\n        if (blob.morphProgress >= 1) {\n          blob.morphProgress = 0;\n          blob.targetRadius = 20 + Math.random() * 30;\n        }\n        // Smooth interpolation\n        const t = blob.morphProgress;\n        const eased = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; // Ease in-out quad\n        blob.radius = blob.radius + ((blob.targetRadius || blob.radius) - blob.radius) * eased * 0.1;\n      }\n\n      // Update position\n      blob.x += blob.vx;\n      blob.y += blob.vy;\n\n      // Bounce off edges with damping\n      if (blob.x < -10 || blob.x > 110) {\n        blob.vx *= -0.9; // Damping\n        blob.x = Math.max(-10, Math.min(110, blob.x));\n      }\n      if (blob.y < -10 || blob.y > 110) {\n        blob.vy *= -0.9; // Damping\n        blob.y = Math.max(-10, Math.min(110, blob.y));\n      }\n\n      // Apply friction for smoother movement\n      blob.vx *= 0.985;\n      blob.vy *= 0.985;\n\n      // Maintain minimum speed with smooth acceleration\n      const currentSpeed = Math.sqrt(blob.vx * blob.vx + blob.vy * blob.vy);\n      if (currentSpeed < speed * 0.05) {\n        const targetVx = (Math.random() - 0.5) * speed * 0.15;\n        const targetVy = (Math.random() - 0.5) * speed * 0.15;\n        blob.vx += (targetVx - blob.vx) * 0.05;\n        blob.vy += (targetVy - blob.vy) * 0.05;\n      }\n    });\n\n    forceUpdate({});\n  };\n\n  // Animation loop\n  const animate = () => {\n    updateBlobs();\n    animationFrameRef.current = requestAnimationFrame(animate);\n  };\n\n  // Handle mouse move\n  useEffect(() => {\n    if (!interactive) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      mouseRef.current = {\n        x: e.clientX,\n        y: e.clientY,\n      };\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [interactive]);\n\n  // Initialize and start animation\n  useEffect(() => {\n    initBlobs();\n    animate();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [blobCount, speed]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`fixed inset-0 -z-10 overflow-hidden ${className}`}\n    >\n      {/* Main blobs layer with blur */}\n      <div\n        className=\"absolute inset-0\"\n        style={{\n          filter: `blur(${blur}px)`,\n          transform: 'scale(1.1)',\n        }}\n      >\n        {blobsRef.current.map((blob, index) => (\n          <div\n            key={index}\n            className=\"absolute rounded-full opacity-70 transition-all duration-700 ease-out\"\n            style={{\n              left: `${blob.x}%`,\n              top: `${blob.y}%`,\n              width: `${blob.radius}%`,\n              height: `${blob.radius}%`,\n              background: `radial-gradient(circle, ${blob.color} 0%, transparent 70%)`,\n              transform: 'translate(-50%, -50%)',\n              mixBlendMode: 'screen',\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Glow layer for enhanced effect */}\n      {glow && (\n        <div\n          className=\"absolute inset-0\"\n          style={{\n            filter: `blur(${blur * 1.5}px)`,\n            transform: 'scale(1.15)',\n            opacity: glowIntensity,\n          }}\n        >\n          {blobsRef.current.map((blob, index) => (\n            <div\n              key={`glow-${index}`}\n              className=\"absolute rounded-full transition-all duration-700 ease-out\"\n              style={{\n                left: `${blob.x}%`,\n                top: `${blob.y}%`,\n                width: `${blob.radius * 0.8}%`,\n                height: `${blob.radius * 0.8}%`,\n                background: `radial-gradient(circle, ${blob.color}cc 0%, transparent 60%)`,\n                transform: 'translate(-50%, -50%)',\n                mixBlendMode: 'overlay',\n              }}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Overlay gradient for depth */}\n      <div\n        className=\"absolute inset-0 opacity-20\"\n        style={{\n          background: `linear-gradient(135deg, ${colors[0]}15 0%, ${colors[colors.length - 1]}15 100%)`,\n          mixBlendMode: 'multiply',\n        }}\n      />\n\n      {/* Subtle noise texture for organic feel */}\n      <div\n        className=\"absolute inset-0 opacity-5\"\n        style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' /%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' /%3E%3C/svg%3E\")`,\n          backgroundSize: '100px 100px',\n        }}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\FluidGradient\\FluidGradient.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\FluidGradient\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\MovingBorder\\MovingBorder.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\MovingBorder\\MovingBorder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\MovingBorder\\MovingBorder.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\MovingBorder\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\ParticleConnect\\ParticleConnect.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\ParticleConnect\\ParticleConnect.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":192,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":192,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5524,5549],"text":"animationFrameRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5524,5549],"text":"animationFrameRef.current ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5524,5549],"text":"Boolean(animationFrameRef.current)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'animate' and 'initParticles'. Either include them or remove the dependency array.","line":196,"column":6,"nodeType":"ArrayExpression","endLine":196,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [animate, dimensions, initParticles, particleCount]","fix":{"range":[5630,5657],"text":"[animate, dimensions, initParticles, particleCount]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport type { ParticleConnectProps, Particle } from './ParticleConnect.types';\n\nexport const ParticleConnect: React.FC<ParticleConnectProps> = ({\n  particleCount = 100,\n  particleColor = 'rgba(99, 102, 241, 0.8)',\n  lineColor = 'rgba(99, 102, 241, 0.2)',\n  connectionDistance = 150,\n  speed = 0.5,\n  particleSize = 2,\n  mouseRadius = 150,\n  mouseAttract = true,\n  backgroundColor = 'transparent',\n  className = '',\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const particlesRef = useRef<Particle[]>([]);\n  const mouseRef = useRef({ x: 0, y: 0 });\n  const animationFrameRef = useRef<number>();\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  // Initialize particles\n  const initParticles = (width: number, height: number) => {\n    const particles: Particle[] = [];\n    for (let i = 0; i < particleCount; i++) {\n      particles.push({\n        x: Math.random() * width,\n        y: Math.random() * height,\n        vx: (Math.random() - 0.5) * speed,\n        vy: (Math.random() - 0.5) * speed,\n        radius: particleSize,\n      });\n    }\n    particlesRef.current = particles;\n  };\n\n  // Update particle positions\n  const updateParticles = (width: number, height: number) => {\n    particlesRef.current.forEach((particle) => {\n      // Mouse interaction\n      if (mouseAttract) {\n        const dx = mouseRef.current.x - particle.x;\n        const dy = mouseRef.current.y - particle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < mouseRadius) {\n          const force = (mouseRadius - distance) / mouseRadius;\n          particle.vx += (dx / distance) * force * 0.2;\n          particle.vy += (dy / distance) * force * 0.2;\n        }\n      }\n\n      // Update position\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n\n      // Bounce off edges\n      if (particle.x < 0 || particle.x > width) {\n        particle.vx *= -1;\n        particle.x = Math.max(0, Math.min(width, particle.x));\n      }\n      if (particle.y < 0 || particle.y > height) {\n        particle.vy *= -1;\n        particle.y = Math.max(0, Math.min(height, particle.y));\n      }\n\n      // Apply friction\n      particle.vx *= 0.99;\n      particle.vy *= 0.99;\n\n      // Keep minimum speed\n      const currentSpeed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\n      if (currentSpeed < speed * 0.5) {\n        particle.vx += (Math.random() - 0.5) * speed * 0.1;\n        particle.vy += (Math.random() - 0.5) * speed * 0.1;\n      }\n    });\n  };\n\n  // Draw particles and connections\n  const draw = (ctx: CanvasRenderingContext2D, width: number, height: number) => {\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw background\n    if (backgroundColor !== 'transparent') {\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(0, 0, width, height);\n    }\n\n    const particles = particlesRef.current;\n\n    // Draw connections\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = 1;\n    for (let i = 0; i < particles.length; i++) {\n      for (let j = i + 1; j < particles.length; j++) {\n        const dx = particles[i].x - particles[j].x;\n        const dy = particles[i].y - particles[j].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < connectionDistance) {\n          const opacity = 1 - distance / connectionDistance;\n          ctx.globalAlpha = opacity * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(particles[i].x, particles[i].y);\n          ctx.lineTo(particles[j].x, particles[j].y);\n          ctx.stroke();\n        }\n      }\n    }\n\n    // Draw particles\n    ctx.globalAlpha = 1;\n    ctx.fillStyle = particleColor;\n    particles.forEach((particle) => {\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\n      ctx.fill();\n    });\n  };\n\n  // Animation loop\n  const animate = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    updateParticles(canvas.width, canvas.height);\n    draw(ctx, canvas.width, canvas.height);\n\n    animationFrameRef.current = requestAnimationFrame(animate);\n  };\n\n  // Handle resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (canvasRef.current) {\n        const rect = canvasRef.current.getBoundingClientRect();\n        setDimensions({\n          width: rect.width,\n          height: rect.height,\n        });\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n    };\n  }, []);\n\n  // Handle mouse move\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      mouseRef.current = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      };\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  // Initialize and start animation\n  useEffect(() => {\n    if (dimensions.width === 0 || dimensions.height === 0) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n\n    initParticles(dimensions.width, dimensions.height);\n    animate();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [dimensions, particleCount]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={`fixed inset-0 -z-10 h-full w-full ${className}`}\n      style={{ backgroundColor }}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\ParticleConnect\\ParticleConnect.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\ParticleConnect\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\Spotlight\\Spotlight.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\Spotlight\\Spotlight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\Spotlight\\Spotlight.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\Spotlight\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextGenerateEffect\\TextGenerateEffect.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextGenerateEffect\\TextGenerateEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextGenerateEffect\\TextGenerateEffect.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextGenerateEffect\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextReveal\\TextReveal.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextReveal\\TextReveal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1721,1724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1721,1724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `MotionValue<number>`.","line":79,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":79,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef } from 'react';\nimport { motion, useScroll, useTransform } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { TextRevealProps } from './TextReveal.types';\n\n/**\n * TextReveal Component\n *\n * Text that reveals on scroll with smooth animation.\n * Perfect for storytelling and long-form content.\n *\n * @example\n * ```tsx\n * <TextReveal text=\"Scroll to reveal this amazing text\" />\n * ```\n */\nexport const TextReveal: React.FC<TextRevealProps> = ({\n  text,\n  revealedTextColor = 'text-white',\n  hiddenTextColor = 'text-slate-700',\n  className,\n}) => {\n  const targetRef = useRef<HTMLDivElement | null>(null);\n\n  const { scrollYProgress } = useScroll({\n    target: targetRef,\n  });\n\n  const words = text.split(' ');\n\n  return (\n    <div ref={targetRef} className={cn('relative z-0 h-[200vh]', className)}>\n      <div\n        className={\n          'sticky top-0 mx-auto flex h-[50vh] max-w-4xl items-center bg-transparent px-[1rem] py-[5rem]'\n        }\n      >\n        <p\n          className={\n            'flex flex-wrap p-5 text-2xl font-bold md:p-8 md:text-3xl lg:p-10 lg:text-4xl xl:text-5xl'\n          }\n        >\n          {words.map((word, i) => {\n            const start = i / words.length;\n            const end = start + 1 / words.length;\n            return (\n              <Word\n                key={i}\n                progress={scrollYProgress}\n                range={[start, end]}\n                revealedColor={revealedTextColor}\n                hiddenColor={hiddenTextColor}\n              >\n                {word}\n              </Word>\n            );\n          })}\n        </p>\n      </div>\n    </div>\n  );\n};\n\ninterface WordProps {\n  children: string;\n  progress: any;\n  range: [number, number];\n  revealedColor: string;\n  hiddenColor: string;\n}\n\nconst Word: React.FC<WordProps> = ({\n  children,\n  progress,\n  range,\n  revealedColor,\n  hiddenColor,\n}) => {\n  const opacity = useTransform(progress, range, [0, 1]);\n\n  return (\n    <span className=\"relative mr-3 mt-3\">\n      <span className={cn('absolute opacity-20', hiddenColor)}>\n        {children}\n      </span>\n      <motion.span style={{ opacity }} className={cn(revealedColor)}>\n        {children}\n      </motion.span>\n    </span>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextReveal\\TextReveal.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\TextReveal\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\effects\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTAGradient\\CTAGradient.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTAGradient\\CTAGradient.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":27,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":27,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1073,1081],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1073,1081],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1073,1081],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { CTAGradientProps } from './CTAGradient.types';\n\nexport const CTAGradient: React.FC<CTAGradientProps> = ({\n  title,\n  subtitle,\n  ctaText,\n  onCtaClick,\n  className,\n}) => {\n  return (\n    <section className={cn('py-20', className)}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          className=\"relative overflow-hidden rounded-3xl bg-gradient-to-br from-blue-600 to-purple-600 p-12 md:p-20 text-center\"\n        >\n          <div className=\"absolute top-0 left-1/4 w-96 h-96 bg-white/10 rounded-full blur-3xl animate-first\" />\n          <div className=\"absolute bottom-0 right-1/4 w-96 h-96 bg-white/10 rounded-full blur-3xl animate-second\" />\n\n          <div className=\"relative z-10\">\n            <h2 className=\"text-3xl md:text-5xl font-bold text-white mb-4\">{title}</h2>\n            {subtitle && <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">{subtitle}</p>}\n            <button\n              onClick={onCtaClick}\n              className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg hover:bg-slate-100 transition-colors shadow-xl\"\n            >\n              {ctaText}\n            </button>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTAGradient\\CTAGradient.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTAGradient\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTANewsletter\\CTANewsletter.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTANewsletter\\CTANewsletter.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":31,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[956,964],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[956,964],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[956,964],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { CTANewsletterProps } from './CTANewsletter.types';\n\nexport const CTANewsletter: React.FC<CTANewsletterProps> = ({\n  title,\n  subtitle,\n  placeholder = 'Inserisci la tua email',\n  buttonText = 'Iscriviti',\n  onSubmit,\n  className,\n}) => {\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit?.(email);\n    setEmail('');\n  };\n\n  return (\n    <section className={cn('py-20 bg-slate-50 dark:bg-slate-900', className)}>\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n        >\n          <h2 className=\"text-3xl md:text-4xl font-bold dark:text-white mb-4\">{title}</h2>\n          {subtitle && <p className=\"text-lg text-slate-600 dark:text-slate-400 mb-8\">{subtitle}</p>}\n\n          <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder={placeholder}\n              required\n              className=\"flex-1 px-6 py-4 rounded-lg border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-600\"\n            />\n            <button\n              type=\"submit\"\n              className=\"px-8 py-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              {buttonText}\n            </button>\n          </form>\n        </motion.div>\n      </div>\n    </section>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTANewsletter\\CTANewsletter.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTANewsletter\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTASectionAdvanced\\CTASectionAdvanced.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTASectionAdvanced\\CTASectionAdvanced.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":54,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":59,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":59,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":65,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":71,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":72,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":72,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":73,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":73,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":85,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":86,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":92,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":92,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":93,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":93,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":110,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":110,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":111,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":111,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":112,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":128,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":128,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":129,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":129,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":130,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":130,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":135,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":135,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":142,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":147,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":153,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":173,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":174,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":174,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":175,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":175,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":202,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":202,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":208,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":208,"endColumn":34}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { CTASectionAdvanced } from './CTASectionAdvanced';\n\nconst mockProps = {\n  badge: '🚀 Launch Offer',\n  title: 'Ready to transform your business?',\n  description: 'Join hundreds of companies that have already digitalized their processes with our platform.',\n  benefits: [\n    {\n      text: 'Complete setup in less than 5 minutes',\n      checked: true,\n    },\n    {\n      text: 'Dedicated 24/7 support in Italian',\n      checked: true,\n    },\n    {\n      text: 'No credit card required for trial',\n      checked: true,\n    },\n    {\n      text: 'Cancel anytime',\n      checked: true,\n    },\n  ],\n  cta: {\n    text: 'Start Free for 14 Days',\n    href: '/signup',\n  },\n  mockupImage: {\n    src: '/dashboard-preview.png',\n    alt: 'Dashboard Preview',\n  },\n};\n\ndescribe('CTASectionAdvanced', () => {\n  it('renders without crashing', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    expect(screen.getByText('Ready to transform your business?')).toBeInTheDocument();\n  });\n\n  it('renders title', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    expect(screen.getByText('Ready to transform your business?')).toBeInTheDocument();\n  });\n\n  it('renders description', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    expect(\n      screen.getByText(\n        'Join hundreds of companies that have already digitalized their processes with our platform.'\n      )\n    ).toBeInTheDocument();\n  });\n\n  it('renders badge when provided', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    expect(screen.getByText('🚀 Launch Offer')).toBeInTheDocument();\n  });\n\n  it('does not render badge when not provided', () => {\n    const propsWithoutBadge = { ...mockProps, badge: undefined };\n    render(<CTASectionAdvanced {...propsWithoutBadge} />);\n    expect(screen.queryByText('🚀 Launch Offer')).not.toBeInTheDocument();\n  });\n\n  it('renders all benefits', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    expect(screen.getByText('Complete setup in less than 5 minutes')).toBeInTheDocument();\n    expect(screen.getByText('Dedicated 24/7 support in Italian')).toBeInTheDocument();\n    expect(screen.getByText('No credit card required for trial')).toBeInTheDocument();\n    expect(screen.getByText('Cancel anytime')).toBeInTheDocument();\n  });\n\n  it('renders checkmarks for checked benefits', () => {\n    const { container } = render(<CTASectionAdvanced {...mockProps} />);\n    const checkmarks = container.querySelectorAll('.bg-gradient-to-br');\n    expect(checkmarks.length).toBeGreaterThan(0);\n  });\n\n  it('renders CTA button', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    const ctaButton = screen.getByRole('link', { name: 'Start Free for 14 Days' });\n    expect(ctaButton).toBeInTheDocument();\n    expect(ctaButton).toHaveAttribute('href', '/signup');\n  });\n\n  it('renders mockup image', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    const mockupImg = screen.getByAltText('Dashboard Preview');\n    expect(mockupImg).toBeInTheDocument();\n    expect(mockupImg).toHaveAttribute('src', '/dashboard-preview.png');\n  });\n\n  it('renders trust indicators when provided', () => {\n    const propsWithTrust = {\n      ...mockProps,\n      trustIndicators: {\n        avatars: [\n          { src: '/avatar1.jpg', alt: 'Client 1' },\n          { src: '/avatar2.jpg', alt: 'Client 2' },\n        ],\n        text: '500+ companies already active',\n        rating: 4.9,\n        ratingLabel: 'on Trustpilot',\n      },\n    };\n    render(<CTASectionAdvanced {...propsWithTrust} />);\n    expect(screen.getByText('500+ companies already active')).toBeInTheDocument();\n    expect(screen.getByText('4.9')).toBeInTheDocument();\n    expect(screen.getByText('on Trustpilot')).toBeInTheDocument();\n  });\n\n  it('renders trust indicator avatars', () => {\n    const propsWithTrust = {\n      ...mockProps,\n      trustIndicators: {\n        avatars: [\n          { src: '/avatar1.jpg', alt: 'Client 1' },\n          { src: '/avatar2.jpg', alt: 'Client 2' },\n          { src: '/avatar3.jpg', alt: 'Client 3' },\n        ],\n        text: 'Trusted users',\n      },\n    };\n    render(<CTASectionAdvanced {...propsWithTrust} />);\n    expect(screen.getByAltText('Client 1')).toBeInTheDocument();\n    expect(screen.getByAltText('Client 2')).toBeInTheDocument();\n    expect(screen.getByAltText('Client 3')).toBeInTheDocument();\n  });\n\n  it('does not render trust indicators when not provided', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    expect(screen.queryByText('500+ companies')).not.toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <CTASectionAdvanced {...mockProps} className=\"custom-class\" />\n    );\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n\n  it('has correct semantic structure', () => {\n    const { container } = render(<CTASectionAdvanced {...mockProps} />);\n    expect(container.querySelector('section')).toBeInTheDocument();\n  });\n\n  it('renders benefits as an unordered list', () => {\n    const { container } = render(<CTASectionAdvanced {...mockProps} />);\n    const list = container.querySelector('ul');\n    expect(list).toBeInTheDocument();\n  });\n\n  it('renders correct number of benefits', () => {\n    const { container } = render(<CTASectionAdvanced {...mockProps} />);\n    const listItems = container.querySelectorAll('li');\n    expect(listItems).toHaveLength(mockProps.benefits.length);\n  });\n\n  it('handles many benefits', () => {\n    const manyBenefitsProps = {\n      ...mockProps,\n      benefits: [\n        ...mockProps.benefits,\n        { text: 'Extra benefit 1', checked: true },\n        { text: 'Extra benefit 2', checked: true },\n        { text: 'Extra benefit 3', checked: true },\n      ],\n    };\n    render(<CTASectionAdvanced {...manyBenefitsProps} />);\n    expect(screen.getByText('Extra benefit 1')).toBeInTheDocument();\n    expect(screen.getByText('Extra benefit 2')).toBeInTheDocument();\n    expect(screen.getByText('Extra benefit 3')).toBeInTheDocument();\n  });\n\n  it('renders rating stars when rating is provided', () => {\n    const propsWithRating = {\n      ...mockProps,\n      trustIndicators: {\n        avatars: [],\n        text: 'Rated',\n        rating: 5.0,\n        ratingLabel: 'stars',\n      },\n    };\n    const { container } = render(<CTASectionAdvanced {...propsWithRating} />);\n    const stars = container.querySelectorAll('svg[fill=\"currentColor\"]');\n    expect(stars.length).toBeGreaterThan(0);\n  });\n\n  it('checkmarks have proper aria labels', () => {\n    const { container } = render(<CTASectionAdvanced {...mockProps} />);\n    const checkmarks = container.querySelectorAll('[aria-label=\"Incluso\"]');\n    expect(checkmarks.length).toBe(mockProps.benefits.length);\n  });\n\n  it('uses section tag for semantic HTML', () => {\n    const { container } = render(<CTASectionAdvanced {...mockProps} />);\n    const section = container.querySelector('section');\n    expect(section).toBeInTheDocument();\n  });\n\n  it('CTA button has correct styling classes', () => {\n    render(<CTASectionAdvanced {...mockProps} />);\n    const ctaButton = screen.getByRole('link', { name: 'Start Free for 14 Days' });\n    expect(ctaButton).toHaveClass('bg-gradient-to-r');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTASectionAdvanced\\CTASectionAdvanced.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":31,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[945,950],"text":"(badge != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[945,950],"text":"(badge ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[945,950],"text":"(Boolean(badge))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":97,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":97,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3992,4014],"text":"(trustIndicators.rating != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3992,4014],"text":"(trustIndicators.rating ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3992,4014],"text":"(Boolean(trustIndicators.rating))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":100,"column":29,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":100,"endColumn":40},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":115,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":115,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5263,5290],"text":"(trustIndicators.ratingLabel != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5263,5290],"text":"(trustIndicators.ratingLabel ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5263,5290],"text":"(Boolean(trustIndicators.ratingLabel))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { CTASectionAdvancedProps } from './CTASectionAdvanced.types';\n\n/**\n * CTASectionAdvanced - Premium CTA Section\n *\n * Features:\n * - Split layout (content + mockup)\n * - Benefits checklist with gradient checkmarks\n * - Trust indicators with avatars and star ratings\n * - Optional badge\n * - Glassmorphism effects\n */\nexport const CTASectionAdvanced: React.FC<CTASectionAdvancedProps> = ({\n  badge,\n  title,\n  description,\n  benefits,\n  cta,\n  trustIndicators,\n  mockupImage,\n  className = '',\n}) => {\n  return (\n    <section className={`py-20 lg:py-32 relative overflow-hidden bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 ${className}`}>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16 items-center\">\n          {/* Left Column - CTA Content */}\n          <div className=\"space-y-6 lg:space-y-8\">\n            {/* Badge */}\n            {badge && (\n              <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-white/80 backdrop-blur-md rounded-full border border-purple-200 shadow-lg\">\n                <span className=\"text-sm font-semibold text-purple-900\">{badge}</span>\n              </div>\n            )}\n\n            {/* Title */}\n            <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold leading-tight text-gray-900\">\n              {title}\n            </h2>\n\n            {/* Description */}\n            <p className=\"text-base sm:text-lg text-gray-600 leading-relaxed\">\n              {description}\n            </p>\n\n            {/* Benefits Checklist */}\n            <ul className=\"space-y-4\">\n              {benefits.map((benefit, index) => (\n                <li key={index} className=\"flex items-start gap-3\">\n                  <div\n                    className=\"flex-shrink-0 w-6 h-6 rounded-full bg-gradient-to-br from-emerald-500 to-teal-500 flex items-center justify-center mt-0.5\"\n                    aria-label=\"Incluso\"\n                  >\n                    <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth={3}>\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <span className=\"text-sm sm:text-base text-gray-900 leading-relaxed\">\n                    {benefit.text}\n                  </span>\n                </li>\n              ))}\n            </ul>\n\n            {/* CTA Button */}\n            <div className=\"pt-4\">\n              <a\n                href={cta.href}\n                className=\"group inline-flex items-center gap-2 px-8 py-4 bg-gradient-to-r from-blue-600 to-cyan-600 text-white rounded-xl font-semibold hover:shadow-2xl hover:shadow-blue-500/40 transition-all hover:scale-105\"\n              >\n                {cta.text}\n                <svg className=\"w-5 h-5 group-hover:translate-x-1 transition-transform\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n                </svg>\n              </a>\n            </div>\n\n            {/* Trust Indicators */}\n            {trustIndicators && (\n              <div className=\"pt-6 border-t border-gray-200\">\n                <div className=\"flex items-center gap-4\">\n                  {/* Avatar Stack */}\n                  <div className=\"flex -space-x-2\">\n                    {trustIndicators.avatars.map((avatar, index) => (\n                      <img\n                        key={index}\n                        src={avatar.src}\n                        alt={avatar.alt}\n                        className=\"w-10 h-10 rounded-full border-2 border-white\"\n                      />\n                    ))}\n                  </div>\n\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-semibold text-gray-900\">{trustIndicators.text}</p>\n                    {trustIndicators.rating && (\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <div className=\"flex items-center\">\n                          {[...Array(5)].map((_, i) => (\n                            <svg\n                              key={i}\n                              className={`w-4 h-4 ${\n                                i < Math.floor(trustIndicators.rating!)\n                                  ? 'text-yellow-400 fill-current'\n                                  : 'text-gray-300 fill-current'\n                              }`}\n                              viewBox=\"0 0 20 20\"\n                            >\n                              <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                            </svg>\n                          ))}\n                        </div>\n                        <span className=\"text-sm font-bold text-gray-900\">{trustIndicators.rating}</span>\n                        {trustIndicators.ratingLabel && (\n                          <span className=\"text-sm text-gray-600\">{trustIndicators.ratingLabel}</span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Column - Mockup */}\n          <div className=\"relative hidden lg:block\">\n            <div className=\"relative\">\n              {/* Mockup Image */}\n              <img\n                src={mockupImage.src}\n                alt={mockupImage.alt}\n                className=\"w-full h-auto rounded-2xl shadow-2xl\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CTASectionAdvanced;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTASectionAdvanced\\CTASectionAdvanced.types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * CTA Benefit\n */\nexport interface CTABenefit {\n  text: string;\n  checked: boolean;\n}\n\n/**\n * CTA Button\n */\nexport interface CTAButton {\n  text: string;\n  href: string;\n}\n\n/**\n * CTA Trust Indicator\n */\nexport interface CTATrustIndicator {\n  avatars: Array<{ src: string; alt: string }>;\n  text: string;\n  rating?: number;\n  ratingLabel?: string;\n}\n\n/**\n * Mockup Image\n */\nexport interface MockupImage {\n  src: string;\n  alt: string;\n}\n\n/**\n * CTASectionAdvanced Props\n */\nexport interface CTASectionAdvancedProps {\n  badge?: string;\n  title: string;\n  description: string;\n  benefits: CTABenefit[];\n  cta: CTAButton;\n  trustIndicators?: CTATrustIndicator;\n  mockupImage: MockupImage;\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTASectionAdvanced\\examples\\advanced.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":16,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CTASectionAdvanced } from '../CTASectionAdvanced';\n\n/**\n * Esempio avanzato di CTASectionAdvanced\n *\n * Questo esempio mostra tutte le funzionalità:\n * - Badge distintivo con emoji\n * - Titolo persuasivo\n * - Descrizione dettagliata\n * - 8 benefici completi\n * - CTA con urgency\n * - Trust indicators con avatars e rating\n * - Mockup professionale\n * - Background gradient custom\n */\nexport default function AdvancedExample() {\n  return (\n    <CTASectionAdvanced\n      badge=\"🎉 Offerta Speciale - Solo per i Primi 100 Iscritti\"\n      title=\"Trasforma il Tuo Business con la Piattaforma All-in-One N°1 in Italia\"\n      description=\"Oltre 1,500 aziende italiane hanno già digitalizzato completamente i loro processi con la nostra piattaforma. Risultati misurabili dal primo mese, supporto dedicato in italiano, e tecnologia enterprise che scala con te. Non perdere questa opportunità esclusiva.\"\n      benefits={[\n        {\n          text: 'Setup guidato completo in meno di 5 minuti, zero competenze tecniche richieste',\n          checked: true,\n        },\n        {\n          text: 'Integrazione nativa con Stripe, PayPal, Shopify, WooCommerce e altre 200+ piattaforme',\n          checked: true,\n        },\n        {\n          text: 'Dashboard analytics avanzata con AI-powered insights e report personalizzabili',\n          checked: true,\n        },\n        {\n          text: 'API RESTful completa, Webhooks real-time e SDK per tutti i linguaggi principali',\n          checked: true,\n        },\n        {\n          text: 'Backup automatici ogni 6 ore con retention di 90 giorni e restore in 1-click',\n          checked: true,\n        },\n        {\n          text: 'Conformità GDPR certificata, hosting in EU, ISO 27001 e SOC2 Type II verified',\n          checked: true,\n        },\n        {\n          text: 'Migrazione dati completamente gratuita con team dedicato dal tuo sistema attuale',\n          checked: true,\n        },\n        {\n          text: 'Supporto prioritario 24/7 in italiano via chat, email, telefono con SLA <1h',\n          checked: true,\n        },\n      ]}\n      cta={{\n        text: 'Inizia Prova Gratuita 30 Giorni - Senza Carta',\n        href: '/trial',\n      }}\n      trustIndicators={{\n        avatars: [\n          { src: 'https://i.pravatar.cc/150?img=10', alt: 'CEO TechCorp' },\n          { src: 'https://i.pravatar.cc/150?img=11', alt: 'Founder StartupXYZ' },\n          { src: 'https://i.pravatar.cc/150?img=12', alt: 'CTO Innovation Labs' },\n          { src: 'https://i.pravatar.cc/150?img=13', alt: 'Director E-commerce Plus' },\n          { src: 'https://i.pravatar.cc/150?img=14', alt: 'Manager Digital Solutions' },\n        ],\n        text: '1,500+ aziende italiane già attive',\n        rating: 4.9,\n        ratingLabel: 'su Trustpilot (2,300+ recensioni)',\n      }}\n      mockupImage={{\n        src: 'https://via.placeholder.com/600x800/8b5cf6/ffffff?text=Premium+Dashboard',\n        alt: 'Premium Dashboard Interface',\n      }}\n      className=\"bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50\"\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTASectionAdvanced\\examples\\basic.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CTASectionAdvanced } from '../CTASectionAdvanced';\n\n/**\n * Esempio base di CTASectionAdvanced\n *\n * Questo esempio mostra l'utilizzo minimo con:\n * - Titolo e descrizione\n * - 4 benefici con checkmark\n * - CTA button\n * - Mockup immagine\n */\nexport default function BasicExample() {\n  return (\n    <CTASectionAdvanced\n      title=\"Pronto a iniziare?\"\n      description=\"Unisciti a centinaia di aziende che stanno già crescendo con la nostra piattaforma.\"\n      benefits={[\n        {\n          text: 'Setup in 5 minuti',\n          checked: true,\n        },\n        {\n          text: 'Nessuna carta richiesta',\n          checked: true,\n        },\n        {\n          text: 'Supporto 24/7',\n          checked: true,\n        },\n        {\n          text: 'Cancellazione facile',\n          checked: true,\n        },\n      ]}\n      cta={{\n        text: 'Inizia Gratis',\n        href: '/signup',\n      }}\n      mockupImage={{\n        src: 'https://via.placeholder.com/600x800/3b82f6/ffffff?text=Dashboard',\n        alt: 'Dashboard Preview',\n      }}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\CTASectionAdvanced\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\CTA\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\ContactSection\\ContactSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\ContactSection\\ContactSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContactSection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { ContactSection } from './ContactSection';\n\ndescribe('ContactSection', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\ContactSection\\ContactSection.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Import \"FormEvent\" is only used as types.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":5,"endColumn":52,"fix":{"range":[50,85],"text":"import type { FormEvent } from 'react';\nimport React, { useState"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":101,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":101,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2769,2806],"text":"errors[name as keyof ContactFormData] != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2769,2806],"text":"errors[name as keyof ContactFormData] ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2769,2806],"text":"Boolean(errors[name as keyof ContactFormData])"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":123,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":123,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3485,3493],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3485,3493],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3485,3493],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":148,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":148,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":167,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":167,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5081,5092],"text":"(errors.name != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5081,5092],"text":"(errors.name ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5081,5092],"text":"(Boolean(errors.name))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":171,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":171,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5353,5364],"text":"(errors.name != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5353,5364],"text":"(errors.name ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5353,5364],"text":"(Boolean(errors.name))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":191,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":191,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6012,6024],"text":"(errors.email != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6012,6024],"text":"(errors.email ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6012,6024],"text":"(Boolean(errors.email))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":195,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":195,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6296,6308],"text":"(errors.email != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6296,6308],"text":"(errors.email ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6296,6308],"text":"(Boolean(errors.email))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":253,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":253,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8578,8592],"text":"(errors.message != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8578,8592],"text":"(errors.message ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8578,8592],"text":"(Boolean(errors.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":257,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":257,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8877,8891],"text":"(errors.message != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8877,8891],"text":"(errors.message ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8877,8891],"text":"(Boolean(errors.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":274,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":274,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9611,9627],"text":"(privacyPolicyUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9611,9627],"text":"(privacyPolicyUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9611,9627],"text":"(Boolean(privacyPolicyUrl))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":289,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":289,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10171,10193],"text":"(errors.privacyAccepted != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10171,10193],"text":"(errors.privacyAccepted ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10171,10193],"text":"(Boolean(errors.privacyAccepted))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * ContactSection Component\n * @component\n */\nimport React, { useState, FormEvent } from 'react';\nimport type { ContactSectionProps, ContactFormData } from './ContactSection.types';\n\n/**\n * ContactSection - Form di contatto con validazione e progress bar\n *\n * @component\n */\n\nexport const ContactSection: React.FC<ContactSectionProps> = ({\n  title,\n  subtitle,\n  onSubmit,\n  socialProof,\n  privacyPolicyUrl,\n  className = '',\n}) => {\n  const [formData, setFormData] = useState<ContactFormData>({\n    name: '',\n    email: '',\n    company: '',\n    phone: '',\n    message: '',\n    privacyAccepted: false,\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const [errors, setErrors] = useState<Partial<Record<keyof ContactFormData, string>>>({});\n\n  // Calculate form completion progress\n  const calculateProgress = () => {\n    const fields = ['name', 'email', 'message', 'privacyAccepted'];\n    const completed = fields.filter((field) => {\n      if (field === 'privacyAccepted') return formData.privacyAccepted;\n      return formData[field as keyof ContactFormData]?.toString().trim() !== '';\n    }).length;\n    return (completed / fields.length) * 100;\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof ContactFormData, string>> = {};\n\n    if (!formData.name.trim()) newErrors.name = 'Nome richiesto';\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email richiesta';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email non valida';\n    }\n    if (!formData.message.trim()) newErrors.message = 'Messaggio richiesto';\n    if (!formData.privacyAccepted) {\n      newErrors.privacyAccepted = 'Devi accettare la privacy policy';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) return;\n\n    setIsSubmitting(true);\n    setSubmitStatus('idle');\n\n    try {\n      await onSubmit(formData);\n      setSubmitStatus('success');\n      setFormData({\n        name: '',\n        email: '',\n        company: '',\n        phone: '',\n        message: '',\n        privacyAccepted: false,\n      });\n    } catch (error) {\n      setSubmitStatus('error');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value, type } = e.target;\n    const checked = (e.target as HTMLInputElement).checked;\n\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n\n    // Clear error for this field\n    if (errors[name as keyof ContactFormData]) {\n      setErrors((prev) => ({ ...prev, [name]: undefined }));\n    }\n  };\n\n  const progress = calculateProgress();\n\n  return (\n    <section\n      className={`py-20 bg-gradient-to-br from-blue-50 via-white to-purple-50 ${className}`}\n      aria-labelledby=\"contact-title\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"mx-auto max-w-3xl\">\n          {/* Section Header */}\n          <div className=\"text-center mb-12\">\n            <h2\n              id=\"contact-title\"\n              className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl md:text-5xl\"\n            >\n              {title}\n            </h2>\n            {subtitle && (\n              <p className=\"mt-4 text-lg text-gray-600\">{subtitle}</p>\n            )}\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                Completamento del modulo\n              </span>\n              <span className=\"text-sm font-medium text-blue-600\">\n                {Math.round(progress)}%\n              </span>\n            </div>\n            <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n              <div\n                className=\"h-full bg-gradient-to-r from-blue-600 to-purple-600 transition-all duration-300 ease-out\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n          </div>\n\n          {/* Contact Form */}\n          <form\n            onSubmit={handleSubmit}\n            className=\"rounded-3xl bg-white p-8 md:p-12 shadow-2xl border border-gray-100\"\n          >\n            <div className=\"space-y-6\">\n              {/* Name */}\n              <div>\n                <label\n                  htmlFor=\"name\"\n                  className=\"block text-sm font-medium text-gray-700 mb-2\"\n                >\n                  Nome completo *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  className={`w-full rounded-lg border ${\n                    errors.name ? 'border-red-500' : 'border-gray-300'\n                  } px-4 py-3 text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors`}\n                  placeholder=\"Mario Rossi\"\n                />\n                {errors.name && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n                )}\n              </div>\n\n              {/* Email */}\n              <div>\n                <label\n                  htmlFor=\"email\"\n                  className=\"block text-sm font-medium text-gray-700 mb-2\"\n                >\n                  Email *\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  className={`w-full rounded-lg border ${\n                    errors.email ? 'border-red-500' : 'border-gray-300'\n                  } px-4 py-3 text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors`}\n                  placeholder=\"mario.rossi@esempio.it\"\n                />\n                {errors.email && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>\n                )}\n              </div>\n\n              {/* Company & Phone (2 columns) */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label\n                    htmlFor=\"company\"\n                    className=\"block text-sm font-medium text-gray-700 mb-2\"\n                  >\n                    Azienda\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"company\"\n                    name=\"company\"\n                    value={formData.company}\n                    onChange={handleChange}\n                    className=\"w-full rounded-lg border border-gray-300 px-4 py-3 text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors\"\n                    placeholder=\"La tua azienda\"\n                  />\n                </div>\n                <div>\n                  <label\n                    htmlFor=\"phone\"\n                    className=\"block text-sm font-medium text-gray-700 mb-2\"\n                  >\n                    Telefono\n                  </label>\n                  <input\n                    type=\"tel\"\n                    id=\"phone\"\n                    name=\"phone\"\n                    value={formData.phone}\n                    onChange={handleChange}\n                    className=\"w-full rounded-lg border border-gray-300 px-4 py-3 text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors\"\n                    placeholder=\"+39 123 456 7890\"\n                  />\n                </div>\n              </div>\n\n              {/* Message */}\n              <div>\n                <label\n                  htmlFor=\"message\"\n                  className=\"block text-sm font-medium text-gray-700 mb-2\"\n                >\n                  Messaggio *\n                </label>\n                <textarea\n                  id=\"message\"\n                  name=\"message\"\n                  value={formData.message}\n                  onChange={handleChange}\n                  rows={5}\n                  className={`w-full rounded-lg border ${\n                    errors.message ? 'border-red-500' : 'border-gray-300'\n                  } px-4 py-3 text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors resize-none`}\n                  placeholder=\"Come possiamo aiutarti?\"\n                />\n                {errors.message && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.message}</p>\n                )}\n              </div>\n\n              {/* Privacy Checkbox */}\n              <div>\n                <label className=\"flex items-start space-x-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"privacyAccepted\"\n                    checked={formData.privacyAccepted}\n                    onChange={handleChange}\n                    className=\"mt-1 h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700\">\n                    Accetto la{' '}\n                    {privacyPolicyUrl ? (\n                      <a\n                        href={privacyPolicyUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:underline\"\n                      >\n                        privacy policy\n                      </a>\n                    ) : (\n                      <span className=\"text-blue-600\">privacy policy</span>\n                    )}{' '}\n                    *\n                  </span>\n                </label>\n                {errors.privacyAccepted && (\n                  <p className=\"mt-1 text-sm text-red-600\">\n                    {errors.privacyAccepted}\n                  </p>\n                )}\n              </div>\n\n              {/* Submit Button */}\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full rounded-lg bg-blue-600 px-8 py-4 text-base font-semibold text-white shadow-lg hover:bg-blue-700 hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? 'Invio in corso...' : 'Invia messaggio'}\n              </button>\n\n              {/* Status Messages */}\n              {submitStatus === 'success' && (\n                <div className=\"rounded-lg bg-green-50 p-4 border border-green-200\">\n                  <p className=\"text-green-800 text-center font-medium\">\n                    ✓ Messaggio inviato con successo! Ti risponderemo presto.\n                  </p>\n                </div>\n              )}\n              {submitStatus === 'error' && (\n                <div className=\"rounded-lg bg-red-50 p-4 border border-red-200\">\n                  <p className=\"text-red-800 text-center font-medium\">\n                    ✗ Si è verificato un errore. Riprova più tardi.\n                  </p>\n                </div>\n              )}\n            </div>\n          </form>\n\n          {/* Social Proof */}\n          {socialProof && socialProof.length > 0 && (\n            <div className=\"mt-12 grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {socialProof.map((metric, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-center space-x-3 p-4 rounded-lg bg-white shadow-md border border-gray-100\"\n                >\n                  <div className=\"text-blue-600\">{metric.icon}</div>\n                  <div>\n                    <p className=\"text-sm font-semibold text-gray-900\">\n                      {metric.value}\n                    </p>\n                    <p className=\"text-xs text-gray-600\">{metric.label}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ContactSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\ContactSection\\ContactSection.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * ContactFormData\n * @interface ContactFormData\n */\nexport interface ContactFormData {\n  name: string;\n  email: string;\n  company?: string;\n  phone?: string;\n  message: string;\n  privacyAccepted: boolean;\n}\n\n/**\n * SocialProofMetric\n * @interface SocialProofMetric\n */\nexport interface SocialProofMetric {\n  icon: React.ReactNode;\n  label: string;\n  value: string;\n}\n\n/**\n * ContactSectionProps\n * @interface ContactSectionProps\n */\nexport interface ContactSectionProps {\n  title: string;\n  subtitle?: string;\n  onSubmit: (data: ContactFormData) => Promise<void>;\n  socialProof?: SocialProofMetric[];\n  privacyPolicyUrl?: string;\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\ContactSection\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\ContactSection\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\ContactSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Contact\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\IsometricCardsSection\\IsometricCardsSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\IsometricCardsSection\\IsometricCardsSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":35,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":51,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":56,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":57,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":57,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":68,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":76,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":76,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":89,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":89,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":100,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":131,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":147,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":148,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":148,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":165,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":165,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":171,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":171,"endColumn":38}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { IsometricCardsSection } from './IsometricCardsSection';\nimport { Zap, Shield, Sparkles } from 'lucide-react';\n\nconst mockProps = {\n  title: 'Our Features',\n  subtitle: 'Everything you need',\n  cards: [\n    {\n      icon: Zap,\n      title: 'Fast Performance',\n      description: 'Lightning fast loading times for the best user experience.',\n      gradient: 'from-blue-500 to-cyan-500',\n    },\n    {\n      icon: Shield,\n      title: 'Advanced Security',\n      description: 'Enterprise-grade protection with end-to-end encryption.',\n      gradient: 'from-purple-500 to-pink-500',\n      badge: 'Popular',\n    },\n    {\n      icon: Sparkles,\n      title: 'AI Powered',\n      description: 'Intelligent automation that learns from your behavior.',\n      gradient: 'from-orange-500 to-red-500',\n    },\n  ],\n};\n\ndescribe('IsometricCardsSection', () => {\n  it('renders without crashing', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    expect(screen.getByText('Our Features')).toBeInTheDocument();\n  });\n\n  it('renders title', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    expect(screen.getByText('Our Features')).toBeInTheDocument();\n  });\n\n  it('renders subtitle when provided', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    expect(screen.getByText('Everything you need')).toBeInTheDocument();\n  });\n\n  it('does not render subtitle when not provided', () => {\n    const propsWithoutSubtitle = { ...mockProps, subtitle: undefined };\n    render(<IsometricCardsSection {...propsWithoutSubtitle} />);\n    expect(screen.queryByText('Everything you need')).not.toBeInTheDocument();\n  });\n\n  it('renders all cards', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    expect(screen.getByText('Fast Performance')).toBeInTheDocument();\n    expect(screen.getByText('Advanced Security')).toBeInTheDocument();\n    expect(screen.getByText('AI Powered')).toBeInTheDocument();\n  });\n\n  it('renders card descriptions', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    expect(\n      screen.getByText('Lightning fast loading times for the best user experience.')\n    ).toBeInTheDocument();\n    expect(\n      screen.getByText('Enterprise-grade protection with end-to-end encryption.')\n    ).toBeInTheDocument();\n    expect(\n      screen.getByText('Intelligent automation that learns from your behavior.')\n    ).toBeInTheDocument();\n  });\n\n  it('renders badge when provided', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    expect(screen.getByText('Popular')).toBeInTheDocument();\n  });\n\n  it('does not render badge for cards without it', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    const badges = screen.getAllByText(/Popular/i);\n    expect(badges).toHaveLength(1);\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <IsometricCardsSection {...mockProps} className=\"custom-class\" />\n    );\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n\n  it('renders card icons with aria-hidden', () => {\n    const { container } = render(<IsometricCardsSection {...mockProps} />);\n    const icons = container.querySelectorAll('[aria-hidden=\"true\"]');\n    expect(icons.length).toBeGreaterThan(0);\n  });\n\n  it('has correct semantic structure', () => {\n    const { container } = render(<IsometricCardsSection {...mockProps} />);\n    expect(container.querySelector('section')).toBeInTheDocument();\n    const articles = container.querySelectorAll('article');\n    expect(articles).toHaveLength(3);\n  });\n\n  it('renders correct number of cards', () => {\n    render(<IsometricCardsSection {...mockProps} />);\n    const { container } = render(<IsometricCardsSection {...mockProps} />);\n    const articles = container.querySelectorAll('article');\n    expect(articles).toHaveLength(mockProps.cards.length);\n  });\n\n  it('applies gradient classes to cards', () => {\n    const { container } = render(<IsometricCardsSection {...mockProps} />);\n    const gradientElements = container.querySelectorAll('.from-blue-500');\n    expect(gradientElements.length).toBeGreaterThan(0);\n  });\n\n  it('handles single card', () => {\n    const singleCardProps = {\n      title: 'Single Feature',\n      cards: [\n        {\n          icon: Zap,\n          title: 'Only Feature',\n          description: 'The one and only',\n          gradient: 'from-blue-500 to-cyan-500',\n        },\n      ],\n    };\n    render(<IsometricCardsSection {...singleCardProps} />);\n    expect(screen.getByText('Only Feature')).toBeInTheDocument();\n  });\n\n  it('handles many cards', () => {\n    const manyCardsProps = {\n      title: 'Many Features',\n      cards: Array(6)\n        .fill(null)\n        .map((_, i) => ({\n          icon: Zap,\n          title: `Feature ${i + 1}`,\n          description: `Description ${i + 1}`,\n          gradient: 'from-blue-500 to-cyan-500',\n        })),\n    };\n    render(<IsometricCardsSection {...manyCardsProps} />);\n    expect(screen.getByText('Feature 1')).toBeInTheDocument();\n    expect(screen.getByText('Feature 6')).toBeInTheDocument();\n  });\n\n  it('renders with hover gradient when provided', () => {\n    const propsWithHover = {\n      title: 'Features',\n      cards: [\n        {\n          icon: Zap,\n          title: 'Feature',\n          description: 'Description',\n          gradient: 'from-blue-500 to-cyan-500',\n          hoverGradient: 'from-blue-600 to-cyan-600',\n        },\n      ],\n    };\n    render(<IsometricCardsSection {...propsWithHover} />);\n    expect(screen.getByText('Feature')).toBeInTheDocument();\n  });\n\n  it('uses section tag for semantic HTML', () => {\n    const { container } = render(<IsometricCardsSection {...mockProps} />);\n    const section = container.querySelector('section');\n    expect(section).toBeInTheDocument();\n  });\n\n  it('uses article tag for each card', () => {\n    const { container } = render(<IsometricCardsSection {...mockProps} />);\n    const articles = container.querySelectorAll('article');\n    expect(articles.length).toBe(3);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\IsometricCardsSection\\IsometricCardsSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":28,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[855,863],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[855,863],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[855,863],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":46,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1412,1421],"text":"(card.href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1412,1421],"text":"(card.href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1412,1421],"text":"(Boolean(card.href))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":108,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":108,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3966,3976],"text":"(card.badge != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3966,3976],"text":"(card.badge ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3966,3976],"text":"(Boolean(card.badge))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { IsometricCardsSectionProps, IsometricCard } from './IsometricCardsSection.types';\n\n/**\n * IsometricCardsSection - Cards 3D con effetto isometrico\n *\n * Sezione con cards che hanno:\n * - Trasformazioni 3D isometriche\n * - Gradient borders animate\n * - Hover effects avanzati\n * - Dot pattern overlays\n * - Shine effects\n */\nexport const IsometricCardsSection: React.FC<IsometricCardsSectionProps> = ({\n  title,\n  subtitle,\n  cards,\n  className = '',\n}) => {\n  return (\n    <section className={`py-20 lg:py-32 relative ${className}`}>\n      <div className=\"container mx-auto px-4 relative z-10\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16 lg:mb-20\">\n          <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-4 text-gray-900\">\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"text-xl md:text-2xl text-gray-600 max-w-2xl mx-auto\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n\n        {/* Cards Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8 max-w-7xl mx-auto\">\n          {cards.map((card, index) => {\n            const IconComponent = card.icon;\n\n            return (\n              <div\n                key={index}\n                className=\"group\"\n                style={{ perspective: '1000px' }}\n              >\n                {card.href ? (\n                  <a href={card.href} className=\"block relative h-full\">\n                    <CardContent card={card} IconComponent={IconComponent} />\n                  </a>\n                ) : (\n                  <div className=\"block relative h-full\">\n                    <CardContent card={card} IconComponent={IconComponent} />\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\n// Card Content Component\nconst CardContent: React.FC<{\n  card: IsometricCard;\n  IconComponent: React.ComponentType<{ className?: string }>;\n}> = ({ card, IconComponent }) => (\n  <>\n    {/* Animated gradient border */}\n    <div\n      className={`absolute -inset-[2px] bg-gradient-to-r ${card.gradient} rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 blur-sm`}\n      style={{\n        animation: 'gradient-shift 3s ease infinite',\n        backgroundSize: '200% 200%'\n      }}\n    />\n\n    {/* Main card with isometric effect */}\n    <div\n      className=\"relative bg-white/80 backdrop-blur-md rounded-2xl overflow-hidden h-full min-h-[320px] border border-gray-200 transition-all duration-500 group-hover:border-transparent\"\n      style={{\n        transform: 'perspective(1000px) rotateX(2deg) rotateY(-2deg)',\n        transition: 'transform 0.5s cubic-bezier(0.21, 0.45, 0.27, 0.9)',\n      }}\n    >\n      {/* Card content */}\n      <div className=\"pt-8 px-6 pb-6 relative h-full flex flex-col\">\n        {/* Floating icon badge */}\n        <div className=\"absolute top-8 left-1/2 -translate-x-1/2 z-20\">\n          <div className={`relative w-12 h-12 bg-gradient-to-br ${card.gradient} rounded-xl shadow-2xl flex items-center justify-center transform group-hover:scale-110 group-hover:rotate-6 transition-all duration-500`}>\n            {/* Icon glow */}\n            <div className={`absolute inset-0 bg-gradient-to-br ${card.gradient} rounded-xl blur-xl opacity-50 group-hover:opacity-70 transition-opacity`} />\n            <IconComponent className=\"w-6 h-6 text-white relative z-10\" />\n          </div>\n        </div>\n\n        {/* Text content */}\n        <div className=\"mt-20 flex-1 flex flex-col text-center\">\n          <h3 className={`text-xl lg:text-2xl font-bold mb-3 bg-gradient-to-br ${card.gradient} bg-clip-text text-transparent`}>\n            {card.title}\n          </h3>\n          <p className=\"text-sm text-gray-600 leading-relaxed mb-4\">\n            {card.description}\n          </p>\n\n          {/* Badge */}\n          {card.badge && (\n            <div className=\"mt-auto pt-4 border-t border-gray-200\">\n              <div className=\"inline-flex items-center gap-1.5 px-3 py-1.5 bg-white/95 backdrop-blur-md rounded-full border border-blue-300 shadow-lg\">\n                <span className=\"w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse\" />\n                <span className=\"text-xs font-bold text-blue-600\">\n                  {card.badge}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Shine effect overlay */}\n        <div className=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-700 pointer-events-none\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000 skew-x-12\" />\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nexport default IsometricCardsSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\IsometricCardsSection\\IsometricCardsSection.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Isometric Card\n */\nexport interface IsometricCard {\n  icon: React.ComponentType<{ className?: string }>;\n  title: string;\n  description: string;\n  gradient: string;\n  hoverGradient?: string;\n  badge?: string;\n  href?: string;\n}\n\n/**\n * IsometricCardsSection Props\n */\nexport interface IsometricCardsSectionProps {\n  title: string;\n  subtitle?: string;\n  cards: IsometricCard[];\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\IsometricCardsSection\\examples\\advanced.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":14,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsometricCardsSection } from '../IsometricCardsSection';\nimport { Zap, Shield, Sparkles, TrendingUp, Award, Users } from 'lucide-react';\n\n/**\n * Esempio avanzato di IsometricCardsSection\n *\n * Questo esempio mostra tutte le funzionalità:\n * - 6 carte per layout completo\n * - Hover gradients personalizzati\n * - Badge su carte selezionate\n * - Background gradient custom\n * - Varietà di colori e icone\n */\nexport default function AdvancedExample() {\n  return (\n    <IsometricCardsSection\n      title=\"Piattaforma Completa per il Tuo Business\"\n      subtitle=\"Tutti gli strumenti di cui hai bisogno, integrati perfettamente\"\n      cards={[\n        {\n          icon: Zap,\n          title: 'Performance Estreme',\n          description: 'Tempi di risposta sotto i 50ms garantiti globalmente con CDN edge computing.',\n          gradient: 'from-blue-500 to-cyan-500',\n          hoverGradient: 'from-blue-600 to-cyan-600',\n        },\n        {\n          icon: Shield,\n          title: 'Sicurezza Enterprise',\n          description: 'SOC2 Type II, ISO 27001, GDPR compliance con audit annuali verificati.',\n          gradient: 'from-purple-500 to-pink-500',\n          hoverGradient: 'from-purple-600 to-pink-600',\n          badge: '⭐ Più Sicuro',\n        },\n        {\n          icon: TrendingUp,\n          title: 'Analytics Avanzati',\n          description: 'Dashboard in tempo reale con ML-powered insights e previsioni automatiche.',\n          gradient: 'from-green-500 to-emerald-500',\n          hoverGradient: 'from-green-600 to-emerald-600',\n        },\n        {\n          icon: Users,\n          title: 'Team Collaboration',\n          description: 'Workspace condivisi, chat integrata, video calls e project management.',\n          gradient: 'from-orange-500 to-red-500',\n          hoverGradient: 'from-orange-600 to-red-600',\n        },\n        {\n          icon: Award,\n          title: 'Premiato e Certificato',\n          description: 'Leader riconosciuto per 3 anni consecutivi da Gartner e G2 Crowd.',\n          gradient: 'from-yellow-400 to-orange-500',\n          hoverGradient: 'from-yellow-500 to-orange-600',\n          badge: '🏆 Best of 2024',\n        },\n        {\n          icon: Sparkles,\n          title: 'AI & Automazione',\n          description: 'Machine learning integrato per automazioni intelligenti e workflow optimization.',\n          gradient: 'from-indigo-500 to-purple-500',\n          hoverGradient: 'from-indigo-600 to-purple-600',\n        },\n      ]}\n      className=\"bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\"\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\IsometricCardsSection\\examples\\basic.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsometricCardsSection } from '../IsometricCardsSection';\nimport { Zap, Shield, Sparkles } from 'lucide-react';\n\n/**\n * Esempio base di IsometricCardsSection\n *\n * Questo esempio mostra l'utilizzo minimo del componente con:\n * - Titolo e sottotitolo\n * - 3 carte con icone, titoli, descrizioni\n * - Gradienti base\n */\nexport default function BasicExample() {\n  return (\n    <IsometricCardsSection\n      title=\"Funzionalità Principali\"\n      subtitle=\"Tutto ciò che ti serve per iniziare\"\n      cards={[\n        {\n          icon: Zap,\n          title: 'Velocità',\n          description: 'Caricamento istantaneo e prestazioni ottimali su ogni dispositivo.',\n          gradient: 'from-blue-500 to-cyan-500',\n        },\n        {\n          icon: Shield,\n          title: 'Sicurezza',\n          description: 'Protezione avanzata con crittografia end-to-end certificata.',\n          gradient: 'from-purple-500 to-pink-500',\n        },\n        {\n          icon: Sparkles,\n          title: 'Semplicità',\n          description: 'Interfaccia intuitiva che non richiede formazione specifica.',\n          gradient: 'from-orange-500 to-red-500',\n        },\n      ]}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\IsometricCardsSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\RoadmapSection\\RoadmapSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\RoadmapSection\\RoadmapSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RoadmapSection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { RoadmapSection } from './RoadmapSection';\n\ndescribe('RoadmapSection', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\RoadmapSection\\RoadmapSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":116,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":116,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3004,3012],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3004,3012],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3004,3012],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * RoadmapSection Component\n * @component\n */\nimport React from 'react';\nimport type { RoadmapSectionProps, RoadmapMilestone } from './RoadmapSection.types';\n\n/**\n * RoadmapSection - Timeline verticale con milestones e stati\n *\n * @component\n */\n\nexport const RoadmapSection: React.FC<RoadmapSectionProps> = ({\n  title,\n  subtitle,\n  milestones,\n  className = '',\n}) => {\n  const getStatusColor = (status: RoadmapMilestone['status']) => {\n    switch (status) {\n      case 'completed':\n        return {\n          bg: 'bg-green-100',\n          text: 'text-green-800',\n          ring: 'ring-green-600',\n          line: 'bg-green-600',\n        };\n      case 'in-progress':\n        return {\n          bg: 'bg-blue-100',\n          text: 'text-blue-800',\n          ring: 'ring-blue-600',\n          line: 'bg-blue-600',\n        };\n      case 'planned':\n        return {\n          bg: 'bg-gray-100',\n          text: 'text-gray-800',\n          ring: 'ring-gray-400',\n          line: 'bg-gray-400',\n        };\n      default:\n        return {\n          bg: 'bg-gray-100',\n          text: 'text-gray-800',\n          ring: 'ring-gray-400',\n          line: 'bg-gray-400',\n        };\n    }\n  };\n\n  const getStatusIcon = (status: RoadmapMilestone['status']) => {\n    switch (status) {\n      case 'completed':\n        return (\n          <svg\n            className=\"h-6 w-6 text-green-600\"\n            fill=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\" />\n          </svg>\n        );\n      case 'in-progress':\n        return (\n          <svg\n            className=\"h-6 w-6 text-blue-600 animate-spin\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            />\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            />\n          </svg>\n        );\n      case 'planned':\n        return (\n          <svg\n            className=\"h-6 w-6 text-gray-400\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle cx=\"12\" cy=\"12\" r=\"10\" strokeWidth=\"2\" />\n          </svg>\n        );\n    }\n  };\n\n  return (\n    <section\n      className={`py-20 bg-white ${className}`}\n      aria-labelledby=\"roadmap-title\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2\n            id=\"roadmap-title\"\n            className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl md:text-5xl\"\n          >\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"mt-4 text-lg text-gray-600 max-w-3xl mx-auto\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n\n        {/* Timeline */}\n        <div className=\"relative max-w-4xl mx-auto\">\n          {/* Vertical line */}\n          <div className=\"absolute left-8 top-0 bottom-0 w-0.5 bg-gray-200 hidden md:block\" />\n\n          {/* Milestones */}\n          <div className=\"space-y-12\">\n            {milestones.map((milestone, index) => {\n              const colors = getStatusColor(milestone.status);\n              return (\n                <div\n                  key={index}\n                  className=\"relative flex items-start\"\n                >\n                  {/* Timeline node */}\n                  <div className=\"hidden md:flex absolute left-8 -translate-x-1/2 items-center justify-center\">\n                    <div\n                      className={`flex h-12 w-12 items-center justify-center rounded-full ${colors.bg} ring-4 ${colors.ring} ring-offset-2 bg-white`}\n                    >\n                      {getStatusIcon(milestone.status)}\n                    </div>\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"md:ml-24 w-full\">\n                    <div className=\"rounded-2xl bg-white p-6 shadow-lg border border-gray-100 hover:shadow-xl transition-shadow duration-300\">\n                      {/* Date and Status Badge */}\n                      <div className=\"flex flex-wrap items-center gap-3 mb-3\">\n                        <span className=\"text-sm font-semibold text-gray-500\">\n                          {milestone.date}\n                        </span>\n                        <span\n                          className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium ${colors.bg} ${colors.text}`}\n                        >\n                          {milestone.status === 'completed' && 'Completato'}\n                          {milestone.status === 'in-progress' && 'In Corso'}\n                          {milestone.status === 'planned' && 'Pianificato'}\n                        </span>\n                      </div>\n\n                      {/* Title */}\n                      <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n                        {milestone.title}\n                      </h3>\n\n                      {/* Description */}\n                      <p className=\"text-gray-600 leading-relaxed mb-4\">\n                        {milestone.description}\n                      </p>\n\n                      {/* Features List */}\n                      {milestone.features && milestone.features.length > 0 && (\n                        <div className=\"mt-4 space-y-2\">\n                          {milestone.features.map((feature, featureIndex) => (\n                            <div\n                              key={featureIndex}\n                              className=\"flex items-start space-x-2\"\n                            >\n                              <svg\n                                className=\"h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0\"\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                viewBox=\"0 0 24 24\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M9 5l7 7-7 7\"\n                                />\n                              </svg>\n                              <span className=\"text-sm text-gray-700\">\n                                {feature}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default RoadmapSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\RoadmapSection\\RoadmapSection.types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * RoadmapMilestone\n * @interface RoadmapMilestone\n */\nexport interface RoadmapMilestone {\n  date: string;\n  title: string;\n  description: string;\n  status: 'completed' | 'in-progress' | 'planned';\n  features?: string[];\n}\n\n/**\n * RoadmapSectionProps\n * @interface RoadmapSectionProps\n */\nexport interface RoadmapSectionProps {\n  title: string;\n  subtitle?: string;\n  milestones: RoadmapMilestone[];\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\RoadmapSection\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\RoadmapSection\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\RoadmapSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Content\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\BenefitsSection\\BenefitsSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\BenefitsSection\\BenefitsSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BenefitsSection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { BenefitsSection } from './BenefitsSection';\n\ndescribe('BenefitsSection', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\BenefitsSection\\BenefitsSection.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","line":56,"column":32,"nodeType":"Identifier","endLine":56,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":89,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":89,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2250,2258],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2250,2258],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2250,2258],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":111,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":111,"endColumn":36,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3273,3289],"text":"(benefit.animated ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3273,3289],"text":"(benefit.animated === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * BenefitsSection Component\n * @component\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport type { BenefitsSectionProps } from './BenefitsSection.types';\n\n/**\n * BenefitsSection - Sezione benefits con contatori animati a 4 colonne\n *\n * @component\n */\n\nconst AnimatedCounter: React.FC<{\n  end: number;\n  duration?: number;\n  suffix?: string;\n}> = ({ end, duration = 2000, suffix = '' }) => {\n  const [count, setCount] = useState(0);\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const ref = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !hasAnimated) {\n          setHasAnimated(true);\n          const startTime = Date.now();\n          const startValue = 0;\n\n          const animate = () => {\n            const now = Date.now();\n            const progress = Math.min((now - startTime) / duration, 1);\n            const easeOutQuad = 1 - (1 - progress) * (1 - progress);\n            const currentCount = Math.floor(easeOutQuad * (end - startValue) + startValue);\n\n            setCount(currentCount);\n\n            if (progress < 1) {\n              requestAnimationFrame(animate);\n            }\n          };\n\n          requestAnimationFrame(animate);\n        }\n      },\n      { threshold: 0.5 }\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      if (ref.current) {\n        observer.unobserve(ref.current);\n      }\n    };\n  }, [end, duration, hasAnimated]);\n\n  return (\n    <span ref={ref}>\n      {count}\n      {suffix}\n    </span>\n  );\n};\n\nexport const BenefitsSection: React.FC<BenefitsSectionProps> = ({\n  title,\n  subtitle,\n  benefits,\n  className = '',\n}) => {\n  return (\n    <section\n      className={`py-20 bg-gradient-to-b from-gray-50 to-white ${className}`}\n      aria-labelledby=\"benefits-title\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2\n            id=\"benefits-title\"\n            className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl md:text-5xl\"\n          >\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"mt-4 text-lg text-gray-600 max-w-3xl mx-auto\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n\n        {/* Benefits Grid - 4 columns */}\n        <div className=\"grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-4\">\n          {benefits.map((benefit, index) => (\n            <div\n              key={index}\n              className=\"group relative rounded-2xl bg-white p-8 shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 hover:border-blue-200 hover:-translate-y-1\"\n            >\n              {/* Icon */}\n              <div className=\"mb-4 inline-flex rounded-lg bg-blue-100 p-3 text-blue-600 group-hover:bg-blue-600 group-hover:text-white transition-colors duration-300\">\n                {benefit.icon}\n              </div>\n\n              {/* Value */}\n              <div className=\"mb-2\">\n                <p className=\"text-4xl font-bold text-gray-900 group-hover:text-blue-600 transition-colors duration-300\">\n                  {benefit.animated && typeof benefit.value === 'number' ? (\n                    <AnimatedCounter\n                      end={benefit.value}\n                      suffix={benefit.suffix}\n                    />\n                  ) : (\n                    <>\n                      {benefit.value}\n                      {benefit.suffix}\n                    </>\n                  )}\n                </p>\n              </div>\n\n              {/* Label */}\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                {benefit.label}\n              </h3>\n\n              {/* Description */}\n              <p className=\"text-sm text-gray-600 leading-relaxed\">\n                {benefit.description}\n              </p>\n\n              {/* Decorative corner accent */}\n              <div className=\"absolute top-0 right-0 w-20 h-20 overflow-hidden\">\n                <div className=\"absolute top-0 right-0 w-full h-full bg-gradient-to-br from-blue-100/50 to-transparent transform rotate-45 translate-x-10 -translate-y-10 group-hover:translate-x-8 group-hover:-translate-y-8 transition-transform duration-300\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default BenefitsSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\BenefitsSection\\BenefitsSection.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * BenefitCard\n * @interface BenefitCard\n */\nexport interface BenefitCard {\n  value: string | number;\n  label: string;\n  description: string;\n  icon: React.ReactNode;\n  suffix?: string;\n  animated?: boolean;\n}\n\n/**\n * BenefitsSectionProps\n * @interface BenefitsSectionProps\n */\nexport interface BenefitsSectionProps {\n  title: string;\n  subtitle?: string;\n  benefits: BenefitCard[];\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\BenefitsSection\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\BenefitsSection\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\BenefitsSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesBento\\FeaturesBento.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesBento\\FeaturesBento.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":15,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[449,454],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[449,454],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[449,454],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":15,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[458,466],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[458,466],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[458,466],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":17,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[532,537],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[532,537],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[532,537],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":18,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[624,632],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[624,632],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[624,632],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":36,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":36,"endColumn":25}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { FeaturesBentoProps } from './FeaturesBento.types';\n\nexport const FeaturesBento: React.FC<FeaturesBentoProps> = ({\n  title,\n  subtitle,\n  items,\n  className,\n}) => {\n  return (\n    <section className={cn('py-20 bg-slate-50 dark:bg-slate-900', className)}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {(title || subtitle) && (\n          <div className=\"text-center mb-16\">\n            {title && <h2 className=\"text-4xl font-bold dark:text-white mb-4\">{title}</h2>}\n            {subtitle && <p className=\"text-lg text-slate-600 dark:text-slate-400\">{subtitle}</p>}\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {items.map((item, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, scale: 0.9 }}\n              whileInView={{ opacity: 1, scale: 1 }}\n              viewport={{ once: true }}\n              transition={{ delay: idx * 0.1 }}\n              className={cn(\n                'bg-white dark:bg-slate-800 p-6 rounded-2xl',\n                idx === 0 && 'md:col-span-2 md:row-span-2',\n                item.className\n              )}\n            >\n              {item.icon && <div className=\"mb-4\">{item.icon}</div>}\n              <h3 className=\"text-2xl font-bold dark:text-white mb-2\">{item.title}</h3>\n              <p className=\"text-slate-600 dark:text-slate-400\">{item.description}</p>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesBento\\FeaturesBento.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesBento\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesGrid\\FeaturesGrid.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesGrid\\FeaturesGrid.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":28,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[697,702],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[697,702],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[697,702],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":28,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[706,714],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[706,714],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[706,714],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":30,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[780,785],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[780,785],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[780,785],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":35,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[961,969],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[961,969],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[961,969],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { FeaturesGridProps } from './FeaturesGrid.types';\n\n/**\n * FeaturesGrid Section\n *\n * Grid layout for displaying features with icons.\n * Clean, organized presentation.\n */\nexport const FeaturesGrid: React.FC<FeaturesGridProps> = ({\n  title,\n  subtitle,\n  features,\n  columns = 3,\n  className,\n}) => {\n  const gridCols = {\n    2: 'md:grid-cols-2',\n    3: 'md:grid-cols-3',\n    4: 'md:grid-cols-2 lg:grid-cols-4',\n  };\n\n  return (\n    <section className={cn('py-20 bg-white dark:bg-slate-950', className)}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {(title || subtitle) && (\n          <div className=\"text-center mb-16\">\n            {title && (\n              <h2 className=\"text-3xl md:text-4xl font-bold text-slate-900 dark:text-white mb-4\">\n                {title}\n              </h2>\n            )}\n            {subtitle && (\n              <p className=\"text-lg text-slate-600 dark:text-slate-400 max-w-2xl mx-auto\">\n                {subtitle}\n              </p>\n            )}\n          </div>\n        )}\n\n        <div className={cn('grid grid-cols-1 gap-8', gridCols[columns])}>\n          {features.map((feature, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ delay: idx * 0.1 }}\n              className=\"text-center\"\n            >\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-blue-100 dark:bg-blue-900/30 rounded-xl mb-4\">\n                {feature.icon}\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-900 dark:text-white mb-2\">\n                {feature.title}\n              </h3>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                {feature.description}\n              </p>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesGrid\\FeaturesGrid.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesGrid\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesSection\\FeaturesSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesSection\\FeaturesSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FeaturesSection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { FeaturesSection } from './FeaturesSection';\n\ndescribe('FeaturesSection', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesSection\\FeaturesSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":32,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[897,905],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[897,905],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[897,905],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":47,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":47,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1492,1505],"text":"(feature.badge != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1492,1505],"text":"(feature.badge ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1492,1505],"text":"(Boolean(feature.badge))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { FeaturesSectionProps } from './FeaturesSection.types';\n\n/**\n * FeaturesSection - Sezione features con griglia a 3 colonne\n *\n * Componente per mostrare le caratteristiche principali con icone,\n * titoli, descrizioni e lista di benefici per ogni feature.\n *\n * @component\n */\nexport const FeaturesSection: React.FC<FeaturesSectionProps> = ({\n  title,\n  subtitle,\n  features,\n  className = '',\n}) => {\n  return (\n    <section\n      className={`py-20 bg-white ${className}`}\n      aria-labelledby=\"features-title\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2\n            id=\"features-title\"\n            className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl md:text-5xl\"\n          >\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"mt-4 text-lg text-gray-600 max-w-3xl mx-auto\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 gap-8 md:grid-cols-3\">\n          {features.map((feature, index) => (\n            <div\n              key={index}\n              className=\"group relative rounded-2xl bg-gradient-to-br from-gray-50 to-white p-8 shadow-md hover:shadow-2xl transition-all duration-300 border border-gray-100 hover:border-blue-200\"\n            >\n              {/* Badge */}\n              {feature.badge && (\n                <div className=\"absolute top-4 right-4\">\n                  <span className=\"inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-xs font-medium text-blue-800\">\n                    {feature.badge}\n                  </span>\n                </div>\n              )}\n\n              {/* Icon */}\n              <div className=\"mb-6 inline-flex rounded-xl bg-blue-600 p-3 text-white shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                {feature.icon}\n              </div>\n\n              {/* Title */}\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">\n                {feature.title}\n              </h3>\n\n              {/* Description */}\n              <p className=\"text-gray-600 mb-6 leading-relaxed\">\n                {feature.description}\n              </p>\n\n              {/* Benefits List */}\n              {feature.benefits.length > 0 && (\n                <div className=\"space-y-3\">\n                  {feature.benefits.map((benefit, benefitIndex) => (\n                    <div\n                      key={benefitIndex}\n                      className=\"flex items-start space-x-3\"\n                    >\n                      <svg\n                        className=\"h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M5 13l4 4L19 7\"\n                        />\n                      </svg>\n                      <span className=\"text-sm text-gray-700\">{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Hover effect overlay */}\n              <div className=\"absolute inset-0 rounded-2xl bg-gradient-to-br from-blue-600/0 to-purple-600/0 group-hover:from-blue-600/5 group-hover:to-purple-600/5 transition-all duration-300 pointer-events-none\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FeaturesSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesSection\\FeaturesSection.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Singola feature da visualizzare\n * @interface FeatureItem\n */\nexport interface FeatureItem {\n  /** Icona della feature */\n  icon: React.ReactNode;\n  /** Titolo della feature */\n  title: string;\n  /** Descrizione della feature */\n  description: string;\n  /** Lista di benefici specifici */\n  benefits: string[];\n  /** Badge opzionale (es: \"Nuovo\", \"Popolare\") */\n  badge?: string;\n}\n\n/**\n * Props per il componente FeaturesSection\n * @interface FeaturesSectionProps\n */\nexport interface FeaturesSectionProps {\n  /** Titolo della sezione */\n  title: string;\n  /** Sottotitolo opzionale */\n  subtitle?: string;\n  /** Array di features da visualizzare */\n  features: FeatureItem[];\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesSection\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesSection\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTabs\\FeaturesTabs.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTabs\\FeaturesTabs.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":18,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[583,588],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[583,588],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[583,588],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":18,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[592,600],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[592,600],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[592,600],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":20,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[666,671],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[666,671],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[666,671],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":21,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[758,766],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[758,766],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[758,766],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":37,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":37,"endColumn":24}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { FeaturesTabsProps } from './FeaturesTabs.types';\n\nexport const FeaturesTabs: React.FC<FeaturesTabsProps> = ({\n  title,\n  subtitle,\n  tabs,\n  className,\n}) => {\n  const [activeTab, setActiveTab] = useState(tabs[0].id);\n  const active = tabs.find((t) => t.id === activeTab) || tabs[0];\n\n  return (\n    <section className={cn('py-20 bg-slate-50 dark:bg-slate-900', className)}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {(title || subtitle) && (\n          <div className=\"text-center mb-12\">\n            {title && <h2 className=\"text-4xl font-bold dark:text-white mb-4\">{title}</h2>}\n            {subtitle && <p className=\"text-lg text-slate-600 dark:text-slate-400\">{subtitle}</p>}\n          </div>\n        )}\n\n        <div className=\"flex flex-wrap gap-4 justify-center mb-12\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={cn(\n                'px-6 py-3 rounded-lg font-semibold transition-all',\n                activeTab === tab.id\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700'\n              )}\n            >\n              {tab.icon && <span className=\"inline-block mr-2\">{tab.icon}</span>}\n              {tab.label}\n            </button>\n          ))}\n        </div>\n\n        <motion.div\n          key={activeTab}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-white dark:bg-slate-800 rounded-2xl p-8 md:p-12\"\n        >\n          <h3 className=\"text-3xl font-bold dark:text-white mb-4\">{active.title}</h3>\n          <p className=\"text-lg text-slate-600 dark:text-slate-400 mb-8\">\n            {active.description}\n          </p>\n          {active.content}\n        </motion.div>\n      </div>\n    </section>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTabs\\FeaturesTabs.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTabs\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTimeline\\FeaturesTimeline.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTimeline\\FeaturesTimeline.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":15,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[458,463],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[458,463],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[458,463],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":15,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[467,475],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[467,475],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[467,475],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":17,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[541,546],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[541,546],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[541,546],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":18,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[633,641],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[633,641],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[633,641],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":35,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":35,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":38,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":38,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1463,1472],"text":"(item.date != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1463,1472],"text":"(item.date ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1463,1472],"text":"(Boolean(item.date))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { FeaturesTimelineProps } from './FeaturesTimeline.types';\n\nexport const FeaturesTimeline: React.FC<FeaturesTimelineProps> = ({\n  title,\n  subtitle,\n  items,\n  className,\n}) => {\n  return (\n    <section className={cn('py-20 bg-white dark:bg-slate-950', className)}>\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {(title || subtitle) && (\n          <div className=\"text-center mb-16\">\n            {title && <h2 className=\"text-4xl font-bold dark:text-white mb-4\">{title}</h2>}\n            {subtitle && <p className=\"text-lg text-slate-600 dark:text-slate-400\">{subtitle}</p>}\n          </div>\n        )}\n\n        <div className=\"relative\">\n          <div className=\"absolute left-8 top-0 bottom-0 w-0.5 bg-blue-600\" />\n\n          {items.map((item, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, x: -50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              transition={{ delay: idx * 0.1 }}\n              className=\"relative pl-20 pb-12 last:pb-0\"\n            >\n              <div className=\"absolute left-4 w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                {item.icon || <span className=\"text-white font-bold\">{idx + 1}</span>}\n              </div>\n              <div>\n                {item.date && <p className=\"text-sm text-blue-600 font-semibold mb-2\">{item.date}</p>}\n                <h3 className=\"text-2xl font-bold dark:text-white mb-2\">{item.title}</h3>\n                <p className=\"text-slate-600 dark:text-slate-400\">{item.description}</p>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTimeline\\FeaturesTimeline.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\FeaturesTimeline\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\WhyChooseSection\\WhyChooseSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\WhyChooseSection\\WhyChooseSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":48,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":53,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":64,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":69,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":71,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":72,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":72,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":79,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":84,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":85,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":86,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":92,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":92,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":93,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":93,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":94,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":94,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":95,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":95,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":102,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":102,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":113,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":130,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":130,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":131,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":132,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":132,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":133,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":133,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":174,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":174,"endColumn":38}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { WhyChooseSection } from './WhyChooseSection';\nimport { Users, Zap, Award, TrendingUp } from 'lucide-react';\n\nconst mockProps = {\n  title: 'Why Choose Us',\n  subtitle: 'Real results that speak for themselves',\n  benefits: [\n    {\n      icon: Users,\n      title: 'Global Community',\n      description: 'Join thousands of satisfied users worldwide using our platform daily.',\n      gradient: 'from-blue-500 to-cyan-500',\n      stat: '50K+',\n      statLabel: 'Active users',\n    },\n    {\n      icon: Zap,\n      title: 'Exceptional Performance',\n      description: 'Loading speed 10x faster than competitors for a smooth experience.',\n      gradient: 'from-purple-500 to-pink-500',\n      stat: '10x',\n      statLabel: 'Faster',\n    },\n    {\n      icon: Award,\n      title: 'Certified Quality',\n      description: 'Recognized as industry leader with international awards for innovation.',\n      gradient: 'from-orange-500 to-red-500',\n      stat: '15+',\n      statLabel: 'Awards won',\n    },\n    {\n      icon: TrendingUp,\n      title: 'Guaranteed Growth',\n      description: 'Our clients see an average increase of 240% in the first 6 months.',\n      gradient: 'from-green-500 to-emerald-500',\n      stat: '+240%',\n      statLabel: 'Average growth',\n    },\n  ],\n};\n\ndescribe('WhyChooseSection', () => {\n  it('renders without crashing', () => {\n    render(<WhyChooseSection {...mockProps} />);\n    expect(screen.getByText('Why Choose Us')).toBeInTheDocument();\n  });\n\n  it('renders title', () => {\n    render(<WhyChooseSection {...mockProps} />);\n    expect(screen.getByText('Why Choose Us')).toBeInTheDocument();\n  });\n\n  it('renders subtitle when provided', () => {\n    render(<WhyChooseSection {...mockProps} />);\n    expect(screen.getByText('Real results that speak for themselves')).toBeInTheDocument();\n  });\n\n  it('does not render subtitle when not provided', () => {\n    const propsWithoutSubtitle = { ...mockProps, subtitle: undefined };\n    render(<WhyChooseSection {...propsWithoutSubtitle} />);\n    expect(screen.queryByText('Real results that speak for themselves')).not.toBeInTheDocument();\n  });\n\n  it('renders all benefit cards', () => {\n    render(<WhyChooseSection {...mockProps} />);\n    expect(screen.getByText('Global Community')).toBeInTheDocument();\n    expect(screen.getByText('Exceptional Performance')).toBeInTheDocument();\n    expect(screen.getByText('Certified Quality')).toBeInTheDocument();\n    expect(screen.getByText('Guaranteed Growth')).toBeInTheDocument();\n  });\n\n  it('renders benefit descriptions', () => {\n    render(<WhyChooseSection {...mockProps} />);\n    expect(\n      screen.getByText('Join thousands of satisfied users worldwide using our platform daily.')\n    ).toBeInTheDocument();\n  });\n\n  it('renders all statistics', () => {\n    render(<WhyChooseSection {...mockProps} />);\n    expect(screen.getByText('50K+')).toBeInTheDocument();\n    expect(screen.getByText('10x')).toBeInTheDocument();\n    expect(screen.getByText('15+')).toBeInTheDocument();\n    expect(screen.getByText('+240%')).toBeInTheDocument();\n  });\n\n  it('renders all stat labels', () => {\n    render(<WhyChooseSection {...mockProps} />);\n    expect(screen.getByText('Active users')).toBeInTheDocument();\n    expect(screen.getByText('Faster')).toBeInTheDocument();\n    expect(screen.getByText('Awards won')).toBeInTheDocument();\n    expect(screen.getByText('Average growth')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <WhyChooseSection {...mockProps} className=\"custom-class\" />\n    );\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n\n  it('renders benefit icons with aria-hidden', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    const icons = container.querySelectorAll('[aria-hidden=\"true\"]');\n    expect(icons.length).toBeGreaterThan(0);\n  });\n\n  it('has correct semantic structure', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    expect(container.querySelector('section')).toBeInTheDocument();\n    const articles = container.querySelectorAll('article');\n    expect(articles).toHaveLength(4);\n  });\n\n  it('renders correct number of benefits', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    const articles = container.querySelectorAll('article');\n    expect(articles).toHaveLength(mockProps.benefits.length);\n  });\n\n  it('handles three benefits', () => {\n    const threeProps = {\n      title: 'Key Benefits',\n      benefits: mockProps.benefits.slice(0, 3),\n    };\n    render(<WhyChooseSection {...threeProps} />);\n    expect(screen.getByText('Global Community')).toBeInTheDocument();\n    expect(screen.getByText('Exceptional Performance')).toBeInTheDocument();\n    expect(screen.getByText('Certified Quality')).toBeInTheDocument();\n    expect(screen.queryByText('Guaranteed Growth')).not.toBeInTheDocument();\n  });\n\n  it('handles six benefits', () => {\n    const sixProps = {\n      title: 'All Benefits',\n      benefits: [\n        ...mockProps.benefits,\n        {\n          icon: Users,\n          title: 'Extra 1',\n          description: 'Description 1',\n          gradient: 'from-blue-500 to-cyan-500',\n          stat: '100%',\n          statLabel: 'Satisfaction',\n        },\n        {\n          icon: Zap,\n          title: 'Extra 2',\n          description: 'Description 2',\n          gradient: 'from-purple-500 to-pink-500',\n          stat: '24/7',\n          statLabel: 'Support',\n        },\n      ],\n    };\n    render(<WhyChooseSection {...sixProps} />);\n    const { container } = render(<WhyChooseSection {...sixProps} />);\n    const articles = container.querySelectorAll('article');\n    expect(articles).toHaveLength(6);\n  });\n\n  it('applies gradient classes to icon containers', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    const gradientElements = container.querySelectorAll('.from-blue-500');\n    expect(gradientElements.length).toBeGreaterThan(0);\n  });\n\n  it('uses section tag for semantic HTML', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    const section = container.querySelector('section');\n    expect(section).toBeInTheDocument();\n  });\n\n  it('uses article tag for each benefit', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    const articles = container.querySelectorAll('article');\n    expect(articles.length).toBe(4);\n  });\n\n  it('renders separator between description and stats', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    const separators = container.querySelectorAll('.border-t');\n    expect(separators.length).toBeGreaterThan(0);\n  });\n\n  it('stats are in strong tags for accessibility', () => {\n    const { container } = render(<WhyChooseSection {...mockProps} />);\n    const strongTags = container.querySelectorAll('strong');\n    expect(strongTags.length).toBeGreaterThan(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\WhyChooseSection\\WhyChooseSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WhyChooseBenefit' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":54},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":23,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":23,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[731,739],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[731,739],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[731,739],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { WhyChooseSectionProps, WhyChooseBenefit } from './WhyChooseSection.types';\n\n/**\n * WhyChooseSection - Sezione \"Perché Sceglierci\"\n *\n * Cards con statistiche integrate, isometric transforms e gradients\n */\nexport const WhyChooseSection: React.FC<WhyChooseSectionProps> = ({\n  title,\n  subtitle,\n  benefits,\n  className = '',\n}) => {\n  return (\n    <section className={`py-20 lg:py-32 relative ${className}`}>\n      <div className=\"container mx-auto px-4 relative z-10\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16 lg:mb-20\">\n          <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-4 text-gray-900\">\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"text-xl md:text-2xl text-gray-600 max-w-2xl mx-auto\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n\n        {/* Benefits Grid */}\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-6 max-w-7xl mx-auto\">\n          {benefits.map((benefit, index) => {\n            const IconComponent = benefit.icon;\n\n            return (\n              <div\n                key={index}\n                className=\"group\"\n                style={{ perspective: '1000px' }}\n              >\n                <div className=\"block relative h-full\">\n                  {/* Animated gradient border */}\n                  <div\n                    className={`absolute -inset-[2px] bg-gradient-to-r ${benefit.gradient} rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 blur-sm`}\n                  />\n\n                  {/* Main card */}\n                  <div\n                    className=\"relative bg-white/80 backdrop-blur-md rounded-2xl overflow-hidden h-full min-h-[280px] border border-gray-200 transition-all duration-500 group-hover:border-transparent\"\n                    style={{\n                      transform: 'perspective(1000px) rotateX(2deg) rotateY(-2deg)',\n                      transition: 'transform 0.5s cubic-bezier(0.21, 0.45, 0.27, 0.9)',\n                    }}\n                  >\n                    <div className=\"pt-8 px-6 pb-6 relative h-full flex flex-col\">\n                      {/* Icon */}\n                      <div className=\"absolute top-8 left-1/2 -translate-x-1/2 z-20\">\n                        <div className={`relative w-14 h-14 bg-gradient-to-br ${benefit.gradient} rounded-xl shadow-2xl flex items-center justify-center transform group-hover:scale-110 group-hover:rotate-6 transition-all duration-500`}>\n                          <div className={`absolute inset-0 bg-gradient-to-br ${benefit.gradient} rounded-xl blur-xl opacity-50`} />\n                          <IconComponent className=\"w-7 h-7 text-white relative z-10\" />\n                        </div>\n                      </div>\n\n                      {/* Content */}\n                      <div className=\"mt-20 flex-1 flex flex-col text-center\">\n                        <h3 className={`text-xl lg:text-2xl font-bold mb-3 bg-gradient-to-br ${benefit.gradient} bg-clip-text text-transparent`}>\n                          {benefit.title}\n                        </h3>\n                        <p className=\"text-sm text-gray-600 leading-relaxed mb-4\">\n                          {benefit.description}\n                        </p>\n\n                        {/* Stats */}\n                        <div className=\"mt-auto pt-4 border-t border-gray-200\">\n                          <div className=\"flex items-center justify-center gap-2\">\n                            <div className={`text-2xl font-bold bg-gradient-to-br ${benefit.gradient} bg-clip-text text-transparent`}>\n                              {benefit.stat}\n                            </div>\n                            <div className=\"text-xs text-gray-600\">\n                              {benefit.statLabel}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default WhyChooseSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\WhyChooseSection\\WhyChooseSection.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Why Choose Benefit\n */\nexport interface WhyChooseBenefit {\n  icon: React.ComponentType<{ className?: string }>;\n  title: string;\n  description: string;\n  gradient: string;\n  stat: string;\n  statLabel: string;\n}\n\n/**\n * WhyChooseSection Props\n */\nexport interface WhyChooseSectionProps {\n  title: string;\n  subtitle?: string;\n  benefits: WhyChooseBenefit[];\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\WhyChooseSection\\examples\\advanced.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":14,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WhyChooseSection } from '../WhyChooseSection';\nimport { Users, Zap, Award, TrendingUp, Shield, Clock, Heart, Star } from 'lucide-react';\n\n/**\n * Esempio avanzato di WhyChooseSection\n *\n * Questo esempio mostra configurazione completa con:\n * - 8 benefici per showcase massimo\n * - Statistiche dettagliate e specifiche\n * - Descrizioni più approfondite\n * - Background gradient personalizzato\n * - Mix di icone e colori per varietà visiva\n */\nexport default function AdvancedExample() {\n  return (\n    <WhyChooseSection\n      title=\"Perché le Aziende Fortune 500 ci Scelgono\"\n      subtitle=\"Risultati misurabili e certificati che dimostrano la nostra leadership nel settore\"\n      benefits={[\n        {\n          icon: Users,\n          title: 'Community Globale Enterprise',\n          description: 'Oltre 50,000 professionisti e 1,000+ aziende Fortune 500 utilizzano quotidianamente la nostra piattaforma in 120+ paesi.',\n          gradient: 'from-blue-600 to-blue-400',\n          stat: '50K+',\n          statLabel: 'Utenti enterprise',\n        },\n        {\n          icon: Clock,\n          title: 'Uptime Garantito SLA',\n          description: 'Infrastruttura multi-region ridondante con monitoring proattivo 24/7 e incident response in <15 minuti.',\n          gradient: 'from-green-600 to-green-400',\n          stat: '99.99%',\n          statLabel: 'SLA garantito',\n        },\n        {\n          icon: Shield,\n          title: 'Sicurezza Certificata',\n          description: 'Conformità completa SOC2 Type II, ISO 27001, HIPAA, GDPR con penetration testing trimestrale verificato.',\n          gradient: 'from-purple-600 to-purple-400',\n          stat: '100%',\n          statLabel: 'Compliance',\n        },\n        {\n          icon: Zap,\n          title: 'Performance API',\n          description: 'Latenza media globale inferiore a 50ms con CDN edge computing e automatic scaling.',\n          gradient: 'from-yellow-600 to-yellow-400',\n          stat: '<50ms',\n          statLabel: 'Latenza API',\n        },\n        {\n          icon: Award,\n          title: 'Premi e Riconoscimenti',\n          description: 'Leader di settore riconosciuto da Gartner Magic Quadrant e G2 Grid per 4 anni consecutivi.',\n          gradient: 'from-orange-600 to-orange-400',\n          stat: '20+',\n          statLabel: 'Award internazionali',\n        },\n        {\n          icon: TrendingUp,\n          title: 'ROI Comprovato',\n          description: 'I nostri enterprise client registrano un ROI medio del 340% nei primi 12 mesi con payback in 4 mesi.',\n          gradient: 'from-emerald-600 to-emerald-400',\n          stat: '+340%',\n          statLabel: 'ROI medio a 12 mesi',\n        },\n        {\n          icon: Heart,\n          title: 'Customer Success',\n          description: 'Net Promoter Score di 72 con 98% customer retention e dedicated CSM per ogni account enterprise.',\n          gradient: 'from-pink-600 to-pink-400',\n          stat: 'NPS 72',\n          statLabel: '98% retention',\n        },\n        {\n          icon: Star,\n          title: 'Supporto Premium',\n          description: 'Team di esperti disponibile 24/7/365 in 12 lingue con SLA di risposta <1h e resolution <4h.',\n          gradient: 'from-indigo-600 to-indigo-400',\n          stat: '24/7',\n          statLabel: 'Support multilingua',\n        },\n      ]}\n      className=\"bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50\"\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\WhyChooseSection\\examples\\basic.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WhyChooseSection } from '../WhyChooseSection';\nimport { Users, Zap, Award, TrendingUp } from 'lucide-react';\n\n/**\n * Esempio base di WhyChooseSection\n *\n * Questo esempio mostra l'utilizzo minimo con:\n * - Titolo e sottotitolo\n * - 4 benefici standard\n * - Statistiche semplici\n */\nexport default function BasicExample() {\n  return (\n    <WhyChooseSection\n      title=\"Perché sceglierci\"\n      subtitle=\"I numeri parlano chiaro\"\n      benefits={[\n        {\n          icon: Users,\n          title: 'Utenti Attivi',\n          description: 'Una community in crescita che utilizza quotidianamente la nostra piattaforma.',\n          gradient: 'from-blue-500 to-cyan-500',\n          stat: '10K+',\n          statLabel: 'Utenti',\n        },\n        {\n          icon: Zap,\n          title: 'Performance',\n          description: 'Velocità di elaborazione superiore alla media del mercato.',\n          gradient: 'from-purple-500 to-pink-500',\n          stat: '5x',\n          statLabel: 'Più veloce',\n        },\n        {\n          icon: Award,\n          title: 'Affidabilità',\n          description: 'Uptime costante e monitorato 24/7 per garantire continuità.',\n          gradient: 'from-orange-500 to-red-500',\n          stat: '99.9%',\n          statLabel: 'Uptime',\n        },\n        {\n          icon: TrendingUp,\n          title: 'Crescita',\n          description: 'I nostri clienti vedono risultati concreti fin dal primo mese.',\n          gradient: 'from-green-500 to-emerald-500',\n          stat: '+150%',\n          statLabel: 'ROI medio',\n        },\n      ]}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\WhyChooseSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Features\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMega\\FooterMega.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMega\\FooterMega.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":42,"column":14,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":42,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":54,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":54,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1571,1590],"text":"(contactInfo.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1571,1590],"text":"(contactInfo.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1571,1590],"text":"(Boolean(contactInfo.address))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":64,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":64,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2001,2018],"text":"(contactInfo.email != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2001,2018],"text":"(contactInfo.email ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2001,2018],"text":"(Boolean(contactInfo.email))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":83,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":83,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2734,2751],"text":"(contactInfo.phone != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2734,2751],"text":"(contactInfo.phone ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2734,2751],"text":"(Boolean(contactInfo.phone))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":130,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":130,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4550,4560],"text":"(link.badge != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4550,4560],"text":"(link.badge ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4550,4560],"text":"(Boolean(link.badge))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":178,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":178,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6112,6125],"text":"(copyrightText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6112,6125],"text":"(copyrightText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6112,6125],"text":"(Boolean(copyrightText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { ArrowUp, Mail, Phone, MapPin } from 'lucide-react';\nimport type { FooterMegaProps } from './FooterMega.types';\n\nexport const FooterMega: React.FC<FooterMegaProps> = ({\n  logo,\n  description = 'We are committed to providing the best service and products to our customers worldwide.',\n  columns = [],\n  contactInfo,\n  socialLinks = [],\n  paymentMethods = [],\n  legalLinks = [],\n  copyrightText,\n  variant = 'dark',\n  showBackToTop = true,\n  className = '',\n}) => {\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const currentYear = new Date().getFullYear();\n  const defaultCopyright = `© ${currentYear} All rights reserved.`;\n\n  const isDark = variant === 'dark';\n\n  return (\n    <footer\n      className={`relative ${\n        isDark\n          ? 'bg-gray-900 text-gray-300'\n          : 'bg-gray-100 text-gray-700'\n      } ${className}`}\n    >\n      {/* Main Footer Content */}\n      <div className=\"mx-auto max-w-7xl px-6 py-16 lg:px-8\">\n        <div className=\"grid gap-12 lg:grid-cols-5 lg:gap-8\">\n          {/* Column 1: Brand & Description */}\n          <div className=\"lg:col-span-2\">\n            {logo && <div className=\"mb-6\">{logo}</div>}\n            <p\n              className={`mb-6 text-sm leading-relaxed ${\n                isDark ? 'text-gray-400' : 'text-gray-600'\n              }`}\n            >\n              {description}\n            </p>\n\n            {/* Contact Info */}\n            {contactInfo && (\n              <div className=\"space-y-3\">\n                {contactInfo.address && (\n                  <div className=\"flex items-start gap-3\">\n                    <MapPin\n                      className={`mt-0.5 h-5 w-5 flex-shrink-0 ${\n                        isDark ? 'text-gray-500' : 'text-gray-400'\n                      }`}\n                    />\n                    <span className=\"text-sm\">{contactInfo.address}</span>\n                  </div>\n                )}\n                {contactInfo.email && (\n                  <div className=\"flex items-center gap-3\">\n                    <Mail\n                      className={`h-5 w-5 flex-shrink-0 ${\n                        isDark ? 'text-gray-500' : 'text-gray-400'\n                      }`}\n                    />\n                    <a\n                      href={`mailto:${contactInfo.email}`}\n                      className={`text-sm transition-colors ${\n                        isDark\n                          ? 'hover:text-white'\n                          : 'hover:text-gray-900'\n                      }`}\n                    >\n                      {contactInfo.email}\n                    </a>\n                  </div>\n                )}\n                {contactInfo.phone && (\n                  <div className=\"flex items-center gap-3\">\n                    <Phone\n                      className={`h-5 w-5 flex-shrink-0 ${\n                        isDark ? 'text-gray-500' : 'text-gray-400'\n                      }`}\n                    />\n                    <a\n                      href={`tel:${contactInfo.phone}`}\n                      className={`text-sm transition-colors ${\n                        isDark\n                          ? 'hover:text-white'\n                          : 'hover:text-gray-900'\n                      }`}\n                    >\n                      {contactInfo.phone}\n                    </a>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Columns 2-5: Link Columns */}\n          {columns.map((column, colIndex) => (\n            <div key={colIndex}>\n              <h3\n                className={`mb-4 text-sm font-semibold uppercase tracking-wider ${\n                  isDark ? 'text-white' : 'text-gray-900'\n                }`}\n              >\n                {column.title}\n              </h3>\n              <ul className=\"space-y-3\">\n                {column.links.map((link, linkIndex) => (\n                  <li key={linkIndex}>\n                    <a\n                      href={link.href}\n                      className={`group inline-flex items-center gap-2 text-sm transition-all ${\n                        isDark\n                          ? 'text-gray-400 hover:text-white'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`}\n                    >\n                      <span className=\"transition-transform group-hover:translate-x-1\">\n                        {link.label}\n                      </span>\n                      {link.badge && (\n                        <span className=\"rounded-full bg-blue-600 px-2 py-0.5 text-xs text-white\">\n                          {link.badge}\n                        </span>\n                      )}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Social Links */}\n        {socialLinks.length > 0 && (\n          <div className=\"mt-12 flex items-center justify-center gap-6 lg:justify-start\">\n            {socialLinks.map((social, index) => (\n              <a\n                key={index}\n                href={social.href}\n                aria-label={social.name}\n                className={`transition-all duration-300 hover:scale-110 ${\n                  isDark\n                    ? 'text-gray-400 hover:text-white'\n                    : 'text-gray-500 hover:text-gray-900'\n                }`}\n              >\n                {social.icon}\n              </a>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Bottom Bar */}\n      <div\n        className={`border-t ${\n          isDark ? 'border-gray-800 bg-gray-950' : 'border-gray-200 bg-white'\n        }`}\n      >\n        <div className=\"mx-auto max-w-7xl px-6 py-6 lg:px-8\">\n          <div className=\"flex flex-col items-center justify-between gap-4 lg:flex-row\">\n            {/* Copyright */}\n            <p\n              className={`text-center text-sm lg:text-left ${\n                isDark ? 'text-gray-500' : 'text-gray-500'\n              }`}\n            >\n              {copyrightText || defaultCopyright}\n            </p>\n\n            {/* Legal Links */}\n            {legalLinks.length > 0 && (\n              <div className=\"flex flex-wrap items-center justify-center gap-4\">\n                {legalLinks.map((link, index) => (\n                  <a\n                    key={index}\n                    href={link.href}\n                    className={`text-sm transition-colors ${\n                      isDark\n                        ? 'text-gray-500 hover:text-gray-300'\n                        : 'text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    {link.label}\n                  </a>\n                ))}\n              </div>\n            )}\n\n            {/* Payment Methods */}\n            {paymentMethods.length > 0 && (\n              <div className=\"flex items-center gap-3\">\n                {paymentMethods.map((method, index) => (\n                  <div\n                    key={index}\n                    className={`flex h-8 w-12 items-center justify-center rounded border ${\n                      isDark\n                        ? 'border-gray-700 bg-gray-800'\n                        : 'border-gray-300 bg-gray-50'\n                    }`}\n                    title={method.name}\n                  >\n                    {method.icon}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Back to Top Button */}\n      {showBackToTop && (\n        <button\n          onClick={scrollToTop}\n          aria-label=\"Back to top\"\n          className={`fixed bottom-8 right-8 rounded-full p-3 shadow-lg transition-all duration-300 hover:scale-110 hover:shadow-xl ${\n            isDark\n              ? 'bg-blue-600 text-white hover:bg-blue-700'\n              : 'bg-gray-900 text-white hover:bg-gray-800'\n          }`}\n        >\n          <ArrowUp className=\"h-5 w-5\" />\n        </button>\n      )}\n    </footer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMega\\FooterMega.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMega\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMinimal\\FooterMinimal.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMinimal\\FooterMinimal.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":39,"column":14,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":39,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":107,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":107,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3277,3290],"text":"(copyrightText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3277,3290],"text":"(copyrightText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3277,3290],"text":"(Boolean(copyrightText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { ArrowUp } from 'lucide-react';\nimport type { FooterMinimalProps } from './FooterMinimal.types';\n\nexport const FooterMinimal: React.FC<FooterMinimalProps> = ({\n  logo,\n  tagline = 'Building the future, one line at a time.',\n  links = [],\n  socialLinks = [],\n  copyrightText,\n  variant = 'dark',\n  showBackToTop = true,\n  className = '',\n}) => {\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const currentYear = new Date().getFullYear();\n  const defaultCopyright = `© ${currentYear} All rights reserved.`;\n\n  const isDark = variant === 'dark';\n\n  return (\n    <footer\n      className={`relative ${\n        isDark\n          ? 'bg-gray-900 text-gray-300'\n          : 'bg-gray-50 text-gray-600'\n      } ${className}`}\n    >\n      <div className=\"mx-auto max-w-7xl px-6 py-12 lg:px-8\">\n        {/* Main Content */}\n        <div className=\"flex flex-col items-center justify-between gap-8 md:flex-row md:items-start\">\n          {/* Left: Logo & Tagline */}\n          <div className=\"flex flex-col items-center md:items-start\">\n            {logo && (\n              <div className=\"mb-4 transition-transform hover:scale-105\">\n                {logo}\n              </div>\n            )}\n            <p\n              className={`max-w-xs text-center text-sm md:text-left ${\n                isDark ? 'text-gray-400' : 'text-gray-500'\n              }`}\n            >\n              {tagline}\n            </p>\n          </div>\n\n          {/* Center: Quick Links */}\n          {links.length > 0 && (\n            <nav className=\"flex flex-wrap justify-center gap-x-8 gap-y-2\">\n              {links.map((link, index) => (\n                <a\n                  key={index}\n                  href={link.href}\n                  className={`text-sm transition-all duration-200 hover:translate-y-[-2px] ${\n                    isDark\n                      ? 'text-gray-300 hover:text-white'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  {link.label}\n                </a>\n              ))}\n            </nav>\n          )}\n\n          {/* Right: Social Links */}\n          {socialLinks.length > 0 && (\n            <div className=\"flex items-center gap-4\">\n              {socialLinks.map((social, index) => (\n                <a\n                  key={index}\n                  href={social.href}\n                  aria-label={social.name}\n                  className={`transition-all duration-300 hover:scale-110 hover:-translate-y-1 ${\n                    isDark\n                      ? 'text-gray-400 hover:text-white'\n                      : 'text-gray-500 hover:text-gray-900'\n                  }`}\n                >\n                  {social.icon}\n                </a>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Divider */}\n        <div\n          className={`my-8 h-px ${\n            isDark ? 'bg-gray-800' : 'bg-gray-200'\n          }`}\n        />\n\n        {/* Bottom: Copyright */}\n        <div className=\"flex items-center justify-center\">\n          <p\n            className={`text-center text-sm ${\n              isDark ? 'text-gray-500' : 'text-gray-400'\n            }`}\n          >\n            {copyrightText || defaultCopyright}\n          </p>\n        </div>\n      </div>\n\n      {/* Back to Top Button */}\n      {showBackToTop && (\n        <button\n          onClick={scrollToTop}\n          aria-label=\"Back to top\"\n          className={`fixed bottom-8 right-8 rounded-full p-3 shadow-lg transition-all duration-300 hover:scale-110 hover:shadow-xl ${\n            isDark\n              ? 'bg-white text-gray-900 hover:bg-gray-100'\n              : 'bg-gray-900 text-white hover:bg-gray-800'\n          }`}\n        >\n          <ArrowUp className=\"h-5 w-5\" />\n        </button>\n      )}\n    </footer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMinimal\\FooterMinimal.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterMinimal\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterNewsletter\\FooterNewsletter.stories.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":65,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":65,"endColumn":13},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1763,1810],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { FooterNewsletter } from './FooterNewsletter';\nimport { Github, Twitter, Linkedin, Instagram, Youtube } from 'lucide-react';\n\nconst meta: Meta<typeof FooterNewsletter> = {\n  title: 'Sections/Footers/FooterNewsletter',\n  component: FooterNewsletter,\n  parameters: {\n    layout: 'fullscreen',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof FooterNewsletter>;\n\nconst mockLogo = (\n  <div className=\"flex h-14 w-14 items-center justify-center rounded-2xl bg-white/10 backdrop-blur-sm\">\n    <span className=\"text-3xl font-bold text-white\">N</span>\n  </div>\n);\n\nconst mockQuickLinks = [\n  { label: 'About', href: '/about' },\n  { label: 'Features', href: '/features' },\n  { label: 'Pricing', href: '/pricing' },\n  { label: 'Blog', href: '/blog' },\n  { label: 'Help Center', href: '/help' },\n  { label: 'Contact', href: '/contact' },\n];\n\nconst mockSocialLinks = [\n  {\n    name: 'GitHub',\n    href: 'https://github.com',\n    icon: <Github className=\"h-5 w-5\" />,\n  },\n  {\n    name: 'Twitter',\n    href: 'https://twitter.com',\n    icon: <Twitter className=\"h-5 w-5\" />,\n  },\n  {\n    name: 'LinkedIn',\n    href: 'https://linkedin.com',\n    icon: <Linkedin className=\"h-5 w-5\" />,\n  },\n  {\n    name: 'Instagram',\n    href: 'https://instagram.com',\n    icon: <Instagram className=\"h-5 w-5\" />,\n  },\n  {\n    name: 'YouTube',\n    href: 'https://youtube.com',\n    icon: <Youtube className=\"h-5 w-5\" />,\n  },\n];\n\nconst mockNewsletterConfig = {\n  title: 'Stay in the loop',\n  description: 'Subscribe to our newsletter for the latest updates, exclusive offers, and industry insights.',\n  placeholder: 'Enter your email',\n  buttonText: 'Subscribe',\n  onSubmit: (email: string) => {\n    console.log('Newsletter subscription:', email);\n    return Promise.resolve();\n  },\n};\n\nexport const Dark: Story = {\n  args: {\n    variant: 'dark',\n    logo: mockLogo,\n    newsletterConfig: mockNewsletterConfig,\n    quickLinks: mockQuickLinks,\n    socialLinks: mockSocialLinks,\n    showWave: true,\n    gradientColors: {\n      from: 'from-blue-600',\n      via: 'via-purple-600',\n      to: 'to-pink-600',\n    },\n  },\n};\n\nexport const Light: Story = {\n  args: {\n    variant: 'light',\n    logo: mockLogo,\n    newsletterConfig: mockNewsletterConfig,\n    quickLinks: mockQuickLinks,\n    socialLinks: mockSocialLinks,\n    showWave: true,\n    gradientColors: {\n      from: 'from-blue-600',\n      via: 'via-purple-600',\n      to: 'to-pink-600',\n    },\n  },\n};\n\nexport const GreenGradient: Story = {\n  args: {\n    variant: 'dark',\n    logo: mockLogo,\n    newsletterConfig: {\n      title: 'Join our community',\n      description: 'Get weekly insights, tips, and exclusive content delivered to your inbox.',\n      placeholder: 'you@example.com',\n      buttonText: 'Join Now',\n    },\n    quickLinks: mockQuickLinks,\n    socialLinks: mockSocialLinks,\n    showWave: true,\n    gradientColors: {\n      from: 'from-green-500',\n      via: 'via-teal-500',\n      to: 'to-cyan-500',\n    },\n  },\n};\n\nexport const OrangeGradient: Story = {\n  args: {\n    variant: 'light',\n    logo: mockLogo,\n    newsletterConfig: {\n      title: 'Never miss an update',\n      description: 'Be the first to know about new features, product launches, and special promotions.',\n      placeholder: 'Enter email address',\n      buttonText: 'Get Started',\n    },\n    quickLinks: mockQuickLinks,\n    socialLinks: mockSocialLinks,\n    showWave: true,\n    gradientColors: {\n      from: 'from-orange-500',\n      via: 'via-red-500',\n      to: 'to-pink-500',\n    },\n  },\n};\n\nexport const WithoutWave: Story = {\n  args: {\n    variant: 'dark',\n    logo: mockLogo,\n    newsletterConfig: mockNewsletterConfig,\n    quickLinks: mockQuickLinks,\n    socialLinks: mockSocialLinks,\n    showWave: false,\n    gradientColors: {\n      from: 'from-indigo-600',\n      via: 'via-purple-600',\n      to: 'to-pink-600',\n    },\n  },\n};\n\nexport const MinimalNewsletter: Story = {\n  args: {\n    variant: 'dark',\n    newsletterConfig: {\n      title: 'Subscribe',\n      description: 'Get updates directly to your inbox.',\n      placeholder: 'Your email',\n      buttonText: 'Subscribe',\n    },\n    showWave: false,\n    gradientColors: {\n      from: 'from-gray-800',\n      to: 'to-gray-900',\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterNewsletter\\FooterNewsletter.tsx","messages":[{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":36,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":36,"endColumn":45,"suggestions":[{"messageId":"removeAwait","fix":{"range":[959,964],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":77,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":77,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2258,2276],"text":"(gradientColors.via != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2258,2276],"text":"(gradientColors.via ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2258,2276],"text":"(Boolean(gradientColors.via))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":81,"column":14,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":81,"endColumn":18},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":93,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":93,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":170,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":170,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5882,5895],"text":"(copyrightText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5882,5895],"text":"(copyrightText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5882,5895],"text":"(Boolean(copyrightText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Send } from 'lucide-react';\nimport type { FooterNewsletterProps } from './FooterNewsletter.types';\n\nexport const FooterNewsletter: React.FC<FooterNewsletterProps> = ({\n  logo,\n  newsletterConfig = {\n    title: 'Stay in the loop',\n    description: 'Subscribe to our newsletter for the latest updates and exclusive offers.',\n    placeholder: 'Enter your email',\n    buttonText: 'Subscribe',\n  },\n  quickLinks = [],\n  socialLinks = [],\n  copyrightText,\n  variant = 'dark',\n  showWave = true,\n  gradientColors = {\n    from: 'from-blue-600',\n    via: 'via-purple-600',\n    to: 'to-pink-600',\n  },\n  className = '',\n}) => {\n  const [email, setEmail] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) return;\n\n    setIsSubmitting(true);\n    if (newsletterConfig.onSubmit) {\n      await newsletterConfig.onSubmit(email);\n    }\n    setEmail('');\n    setIsSubmitting(false);\n  };\n\n  const currentYear = new Date().getFullYear();\n  const defaultCopyright = `© ${currentYear} All rights reserved.`;\n\n  const isDark = variant === 'dark';\n\n  return (\n    <footer className={`relative overflow-hidden ${className}`}>\n      {/* Wave SVG */}\n      {showWave && (\n        <div className=\"absolute inset-x-0 top-0 -translate-y-full\">\n          <svg\n            className=\"w-full\"\n            viewBox=\"0 0 1440 120\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M0 120L60 105C120 90 240 60 360 45C480 30 600 30 720 37.5C840 45 960 60 1080 67.5C1200 75 1320 75 1380 75L1440 75V120H1380C1320 120 1200 120 1080 120C960 120 840 120 720 120C600 120 480 120 360 120C240 120 120 120 60 120H0Z\"\n              className={\n                isDark ? 'fill-gray-900' : 'fill-gray-50'\n              }\n            />\n          </svg>\n        </div>\n      )}\n\n      {/* Main Footer */}\n      <div\n        className={`relative ${\n          isDark ? 'bg-gray-900' : 'bg-gray-50'\n        }`}\n      >\n        {/* Newsletter Section with Gradient */}\n        <div\n          className={`bg-gradient-to-r ${gradientColors.from} ${\n            gradientColors.via || ''\n          } ${gradientColors.to} py-16`}\n        >\n          <div className=\"mx-auto max-w-4xl px-6 text-center\">\n            {logo && (\n              <div className=\"mb-6 flex justify-center\">{logo}</div>\n            )}\n            <h2 className=\"mb-3 text-3xl font-bold text-white md:text-4xl\">\n              {newsletterConfig.title}\n            </h2>\n            <p className=\"mb-8 text-lg text-white/90\">\n              {newsletterConfig.description}\n            </p>\n\n            {/* Newsletter Form */}\n            <form\n              onSubmit={handleSubmit}\n              className=\"mx-auto flex max-w-md flex-col gap-3 sm:flex-row\"\n            >\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder={newsletterConfig.placeholder}\n                className=\"flex-1 rounded-lg border-0 px-6 py-4 text-gray-900 shadow-lg transition-all focus:outline-none focus:ring-4 focus:ring-white/30\"\n                required\n              />\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"group flex items-center justify-center gap-2 rounded-lg bg-white px-8 py-4 font-semibold text-gray-900 shadow-lg transition-all hover:scale-105 hover:shadow-xl disabled:opacity-50\"\n              >\n                <span>{newsletterConfig.buttonText}</span>\n                <Send className=\"h-5 w-5 transition-transform group-hover:translate-x-1\" />\n              </button>\n            </form>\n          </div>\n        </div>\n\n        {/* Links & Social Section */}\n        <div className=\"mx-auto max-w-7xl px-6 py-12\">\n          <div className=\"flex flex-col items-center gap-8 md:flex-row md:justify-between\">\n            {/* Quick Links */}\n            {quickLinks.length > 0 && (\n              <nav className=\"flex flex-wrap justify-center gap-6\">\n                {quickLinks.map((link, index) => (\n                  <a\n                    key={index}\n                    href={link.href}\n                    className={`text-sm font-medium transition-all hover:-translate-y-0.5 ${\n                      isDark\n                        ? 'text-gray-400 hover:text-white'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`}\n                  >\n                    {link.label}\n                  </a>\n                ))}\n              </nav>\n            )}\n\n            {/* Social Links */}\n            {socialLinks.length > 0 && (\n              <div className=\"flex items-center gap-4\">\n                {socialLinks.map((social, index) => (\n                  <a\n                    key={index}\n                    href={social.href}\n                    aria-label={social.name}\n                    className={`rounded-full p-2 transition-all hover:scale-110 ${\n                      isDark\n                        ? 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-white'\n                        : 'bg-white text-gray-600 shadow hover:text-gray-900 hover:shadow-md'\n                    }`}\n                  >\n                    {social.icon}\n                  </a>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Copyright */}\n          <div\n            className={`mt-8 border-t pt-8 text-center ${\n              isDark ? 'border-gray-800' : 'border-gray-200'\n            }`}\n          >\n            <p\n              className={`text-sm ${\n                isDark ? 'text-gray-500' : 'text-gray-500'\n              }`}\n            >\n              {copyrightText || defaultCopyright}\n            </p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterNewsletter\\FooterNewsletter.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\FooterNewsletter\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\Footer\\Footer.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\Footer\\Footer.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Footer' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { Footer } from './Footer';\n\ndescribe('Footer', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\Footer\\Footer.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":35,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[988,996],"text":"(logo.src != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[988,996],"text":"(logo.src ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[988,996],"text":"(Boolean(logo.src))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":38,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":38,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1117,1126],"text":"(logo.text != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1117,1126],"text":"(logo.text ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1117,1126],"text":"(Boolean(logo.text))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":46,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1342,1349],"text":"(tagline != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1342,1349],"text":"(tagline ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1342,1349],"text":"(Boolean(tagline))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":53,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":53,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1588,1607],"text":"(contactInfo.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1588,1607],"text":"(contactInfo.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1588,1607],"text":"(Boolean(contactInfo.address))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":77,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":77,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2675,2692],"text":"(contactInfo.email != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2675,2692],"text":"(contactInfo.email ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2675,2692],"text":"(Boolean(contactInfo.email))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":100,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":100,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3696,3713],"text":"(contactInfo.phone != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3696,3713],"text":"(contactInfo.phone ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3696,3713],"text":"(Boolean(contactInfo.phone))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { FooterProps } from './Footer.types';\n\n/**\n * Footer - Footer completo con link columns e social media\n *\n * Componente footer completo con logo, tagline, colonne di link,\n * social media links, informazioni di contatto e legal links.\n *\n * @component\n */\nexport const Footer: React.FC<FooterProps> = ({\n  logo,\n  tagline,\n  columns,\n  socialLinks,\n  contactInfo,\n  legalLinks,\n  copyright,\n  className = '',\n}) => {\n  return (\n    <footer\n      className={`bg-gray-900 text-gray-300 ${className}`}\n      role=\"contentinfo\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        {/* Main Footer Content */}\n        <div className=\"py-12 lg:py-16\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-12 gap-8 lg:gap-12\">\n            {/* Brand Column */}\n            <div className=\"lg:col-span-4\">\n              {/* Logo */}\n              <div className=\"flex items-center space-x-2 mb-4\">\n                {logo.src && (\n                  <img src={logo.src} alt={logo.alt} className=\"h-8 w-auto\" />\n                )}\n                {logo.text && (\n                  <span className=\"text-xl font-bold text-white\">\n                    {logo.text}\n                  </span>\n                )}\n              </div>\n\n              {/* Tagline */}\n              {tagline && (\n                <p className=\"text-gray-400 mb-6 leading-relaxed\">{tagline}</p>\n              )}\n\n              {/* Contact Info */}\n              {contactInfo && (\n                <div className=\"space-y-3 mb-6\">\n                  {contactInfo.address && (\n                    <div className=\"flex items-start space-x-3\">\n                      <svg\n                        className=\"h-5 w-5 text-gray-400 mt-0.5 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\n                        />\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"\n                        />\n                      </svg>\n                      <span className=\"text-sm\">{contactInfo.address}</span>\n                    </div>\n                  )}\n                  {contactInfo.email && (\n                    <div className=\"flex items-center space-x-3\">\n                      <svg\n                        className=\"h-5 w-5 text-gray-400 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n                        />\n                      </svg>\n                      <a\n                        href={`mailto:${contactInfo.email}`}\n                        className=\"text-sm hover:text-white transition-colors\"\n                      >\n                        {contactInfo.email}\n                      </a>\n                    </div>\n                  )}\n                  {contactInfo.phone && (\n                    <div className=\"flex items-center space-x-3\">\n                      <svg\n                        className=\"h-5 w-5 text-gray-400 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"\n                        />\n                      </svg>\n                      <a\n                        href={`tel:${contactInfo.phone}`}\n                        className=\"text-sm hover:text-white transition-colors\"\n                      >\n                        {contactInfo.phone}\n                      </a>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Social Links */}\n              {socialLinks && socialLinks.length > 0 && (\n                <div className=\"flex space-x-4\">\n                  {socialLinks.map((social, index) => (\n                    <a\n                      key={index}\n                      href={social.href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-gray-400 hover:text-white transition-colors\"\n                      aria-label={social.name}\n                    >\n                      {social.icon}\n                    </a>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Link Columns */}\n            {columns.map((column, index) => (\n              <div\n                key={index}\n                className={`lg:col-span-${\n                  columns.length === 3 ? '2' : '3'\n                } lg:col-span-2`}\n              >\n                <h3 className=\"text-white font-semibold mb-4\">\n                  {column.title}\n                </h3>\n                <ul className=\"space-y-3\">\n                  {column.links.map((link, linkIndex) => (\n                    <li key={linkIndex}>\n                      <a\n                        href={link.href}\n                        className=\"text-sm hover:text-white transition-colors\"\n                      >\n                        {link.label}\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-gray-800 py-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            {/* Copyright */}\n            <p className=\"text-sm text-gray-400\">{copyright}</p>\n\n            {/* Legal Links */}\n            {legalLinks && legalLinks.length > 0 && (\n              <div className=\"flex flex-wrap justify-center gap-6\">\n                {legalLinks.map((link, index) => (\n                  <a\n                    key={index}\n                    href={link.href}\n                    className=\"text-sm text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {link.label}\n                  </a>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\Footer\\Footer.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * FooterLink\n * @interface FooterLink\n */\nexport interface FooterLink {\n  label: string;\n  href: string;\n}\n\n/**\n * FooterColumn\n * @interface FooterColumn\n */\nexport interface FooterColumn {\n  title: string;\n  links: FooterLink[];\n}\n\n/**\n * SocialLink\n * @interface SocialLink\n */\nexport interface SocialLink {\n  name: string;\n  href: string;\n  icon: React.ReactNode;\n}\n\n/**\n * FooterProps\n * @interface FooterProps\n */\nexport interface FooterProps {\n  logo: {\n    src?: string;\n    alt: string;\n    text?: string;\n  };\n  tagline?: string;\n  columns: FooterColumn[];\n  socialLinks?: SocialLink[];\n  contactInfo?: {\n    address?: string;\n    email?: string;\n    phone?: string;\n  };\n  legalLinks?: FooterLink[];\n  copyright: string;\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\Footer\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\Footer\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\Footer\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Footer\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroAnimatedBeam\\HeroAnimatedBeam.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroAnimatedBeam\\HeroAnimatedBeam.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'secondaryCtaText' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onSecondaryCtaClick' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'children' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":20,"column":11,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":20,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1233,1241],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1233,1241],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1233,1241],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":34,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1405,1412],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1405,1412],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1405,1412],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { HeroAnimatedBeamProps } from './HeroAnimatedBeam.types';\n\nexport const HeroAnimatedBeam: React.FC<HeroAnimatedBeamProps> = ({\n  title,\n  subtitle,\n  ctaText,\n  secondaryCtaText,\n  onCtaClick,\n  onSecondaryCtaClick,\n  children,\n  className,\n}) => {\n  return (\n    <div className={cn('relative h-screen w-full flex items-center justify-center overflow-hidden bg-slate-950', className)}>\n      {/* Animated Beams */}\n      <div className=\"absolute inset-0\">\n        {[...Array(5)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute h-1 bg-gradient-to-r from-transparent via-blue-500 to-transparent\"\n            style={{ top: `${20 + i * 15}%`, width: '100%' }}\n            animate={{ x: ['-100%', '100%'] }}\n            transition={{ duration: 3 + i, repeat: Infinity, ease: 'linear' }}\n          />\n        ))}\n      </div>\n\n      <div className=\"relative z-10 w-full max-w-7xl mx-auto px-4 text-center\">\n        <motion.h1 initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\"text-5xl md:text-7xl font-bold text-white mb-6\">{title}</motion.h1>\n        {subtitle && <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.2 }} className=\"text-xl text-slate-300 mb-8\">{subtitle}</motion.p>}\n        {ctaText && (\n          <motion.button onClick={onCtaClick} initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.3 }} className=\"px-8 py-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors\">{ctaText}</motion.button>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroAnimatedBeam\\HeroAnimatedBeam.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroAnimatedBeam\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroGradient\\HeroGradient.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroGradient\\HeroGradient.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":52,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":52,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1287,1295],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1287,1295],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1287,1295],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":63,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1635,1642],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1635,1642],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1635,1642],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":63,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1646,1662],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1646,1662],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1646,1662],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":70,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":70,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1942,1949],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1942,1949],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1942,1949],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":79,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":79,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2243,2259],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2243,2259],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2243,2259],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":90,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":90,"endColumn":18}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { HeroGradientProps } from './HeroGradient.types';\n\n/**\n * HeroGradient Section\n *\n * Hero section with animated gradient mesh background.\n * Creates a vibrant, modern atmosphere.\n *\n * @example\n * ```tsx\n * <HeroGradient\n *   title=\"Welcome to the Future\"\n *   subtitle=\"Build amazing products\"\n *   ctaText=\"Get Started\"\n * />\n * ```\n */\nexport const HeroGradient: React.FC<HeroGradientProps> = ({\n  title,\n  subtitle,\n  ctaText,\n  secondaryCtaText,\n  onCtaClick,\n  onSecondaryCtaClick,\n  children,\n  className,\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative h-screen w-full flex items-center justify-center overflow-hidden bg-slate-950',\n        className\n      )}\n    >\n      {/* Animated gradient background */}\n      <BackgroundGradient />\n\n      {/* Content */}\n      <div className=\"relative z-10 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <motion.h1\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6\"\n        >\n          {title}\n        </motion.h1>\n\n        {subtitle && (\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n            className=\"text-lg md:text-xl lg:text-2xl text-slate-300 max-w-3xl mx-auto mb-8\"\n          >\n            {subtitle}\n          </motion.p>\n        )}\n\n        {(ctaText || secondaryCtaText) && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n          >\n            {ctaText && (\n              <button\n                onClick={onCtaClick}\n                className=\"px-8 py-4 bg-white text-slate-950 font-semibold rounded-lg hover:bg-slate-100 transition-colors shadow-xl\"\n              >\n                {ctaText}\n              </button>\n            )}\n\n            {secondaryCtaText && (\n              <button\n                onClick={onSecondaryCtaClick}\n                className=\"px-8 py-4 rounded-lg border border-slate-600 text-white hover:bg-slate-800 transition-colors\"\n              >\n                {secondaryCtaText}\n              </button>\n            )}\n          </motion.div>\n        )}\n\n        {children && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5, delay: 0.3 }}\n            className=\"mt-12\"\n          >\n            {children}\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Background Gradient Component\nconst BackgroundGradient: React.FC = () => {\n  return (\n    <div className=\"absolute inset-0\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-slate-950 to-blue-900/20\" />\n      <div className=\"absolute top-0 left-1/4 w-96 h-96 bg-purple-500/30 rounded-full blur-3xl animate-first\" />\n      <div className=\"absolute top-1/4 right-1/4 w-96 h-96 bg-blue-500/30 rounded-full blur-3xl animate-second\" />\n      <div className=\"absolute bottom-1/4 left-1/3 w-96 h-96 bg-pink-500/30 rounded-full blur-3xl animate-third\" />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroGradient\\HeroGradient.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroGradient\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroMeteor\\HeroMeteor.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroMeteor\\HeroMeteor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'children' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":113,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":121},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":16,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1257,1265],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1257,1265],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1257,1265],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":17,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1414,1421],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1414,1421],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1414,1421],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { HeroMeteorProps } from './HeroMeteor.types';\n\nexport const HeroMeteor: React.FC<HeroMeteorProps> = ({ title, subtitle, ctaText, onCtaClick, meteorCount = 20, children, className }) => {\n  const meteors = useMemo(() => Array.from({ length: meteorCount }).map((_, i) => ({ id: i, left: Math.random() * 100, animationDelay: Math.random() * 5, duration: Math.random() * 2 + 3 })), [meteorCount]);\n\n  return (\n    <div className={cn('relative h-screen w-full flex items-center justify-center overflow-hidden bg-slate-950', className)}>\n      {meteors.map((meteor) => (\n        <motion.div key={meteor.id} className=\"absolute w-0.5 h-24 bg-gradient-to-b from-blue-400 to-transparent\" style={{ left: `${meteor.left}%`, top: '-100px' }} animate={{ y: ['0vh', '110vh'], opacity: [0, 1, 0] }} transition={{ duration: meteor.duration, delay: meteor.animationDelay, repeat: Infinity, ease: 'linear' }} />\n      ))}\n      <div className=\"relative z-10 text-center text-white\">\n        <motion.h1 initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\"text-5xl md:text-7xl font-bold mb-6\">{title}</motion.h1>\n        {subtitle && <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.2 }} className=\"text-xl mb-8\">{subtitle}</motion.p>}\n        {ctaText && <motion.button onClick={onCtaClick} initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.3 }} className=\"px-8 py-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700\">{ctaText}</motion.button>}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroMeteor\\HeroMeteor.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroMeteor\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroParticles\\HeroParticles.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroParticles\\HeroParticles.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":87,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":87,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2292,2300],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2292,2300],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2292,2300],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":98,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":98,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2640,2647],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2640,2647],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2640,2647],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":98,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":98,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2651,2667],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2651,2667],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2651,2667],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":105,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":105,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2947,2954],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2947,2954],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2947,2954],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":114,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3246,3262],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3246,3262],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3246,3262],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":125,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":125,"endColumn":18}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { HeroParticlesProps } from './HeroParticles.types';\n\n/**\n * HeroParticles Section\n *\n * Hero section with floating particles animation.\n * Creates a dynamic, tech-focused atmosphere.\n *\n * @example\n * ```tsx\n * <HeroParticles\n *   title=\"Welcome\"\n *   subtitle=\"Innovation starts here\"\n *   ctaText=\"Get Started\"\n * />\n * ```\n */\nexport const HeroParticles: React.FC<HeroParticlesProps> = ({\n  title,\n  subtitle,\n  ctaText,\n  secondaryCtaText,\n  onCtaClick,\n  onSecondaryCtaClick,\n  children,\n  particleCount = 50,\n  className,\n}) => {\n  const particles = useMemo(() => {\n    return Array.from({ length: particleCount }).map((_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 4 + 1,\n      duration: Math.random() * 20 + 10,\n      delay: Math.random() * 5,\n    }));\n  }, [particleCount]);\n\n  return (\n    <div\n      className={cn(\n        'relative h-screen w-full flex items-center justify-center overflow-hidden bg-slate-950',\n        className\n      )}\n    >\n      {/* Particles */}\n      <div className=\"absolute inset-0\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"absolute rounded-full bg-blue-500/30\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.5, 0.2],\n            }}\n            transition={{\n              duration: particle.duration,\n              repeat: Infinity,\n              delay: particle.delay,\n              ease: 'easeInOut',\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <motion.h1\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6\"\n        >\n          {title}\n        </motion.h1>\n\n        {subtitle && (\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n            className=\"text-lg md:text-xl lg:text-2xl text-slate-300 max-w-3xl mx-auto mb-8\"\n          >\n            {subtitle}\n          </motion.p>\n        )}\n\n        {(ctaText || secondaryCtaText) && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n          >\n            {ctaText && (\n              <button\n                onClick={onCtaClick}\n                className=\"px-8 py-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors shadow-xl\"\n              >\n                {ctaText}\n              </button>\n            )}\n\n            {secondaryCtaText && (\n              <button\n                onClick={onSecondaryCtaClick}\n                className=\"px-8 py-4 rounded-lg border border-slate-600 text-white hover:bg-slate-800 transition-colors\"\n              >\n                {secondaryCtaText}\n              </button>\n            )}\n          </motion.div>\n        )}\n\n        {children && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5, delay: 0.3 }}\n            className=\"mt-12\"\n          >\n            {children}\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroParticles\\HeroParticles.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroParticles\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSection\\HeroSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSection\\HeroSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":33,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":34,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":41,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":41,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":42,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":43,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":44,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":68,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":77,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":97,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":112,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":120,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":120,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":139,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":139,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":146,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":155,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'container' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":159,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":163,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":163,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":173,"endColumn":40}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { HeroSection } from './HeroSection';\nimport type { HeroSectionProps } from './HeroSection.types';\n\ndescribe('HeroSection', () => {\n  const mockProps: HeroSectionProps = {\n    headline: {\n      text: \"Benvenuto\",\n      highlight: \"al futuro\"\n    },\n    subheadline: \"La soluzione perfetta per il tuo business\",\n    metrics: [\n      { value: \"10K+\", label: \"Utenti\" },\n      { value: \"99%\", label: \"Uptime\" },\n      { value: \"24/7\", label: \"Supporto\" }\n    ],\n    primaryCta: {\n      label: \"Inizia Ora\",\n      onClick: vi.fn()\n    },\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('Rendering', () => {\n    it('dovrebbe renderizzare il componente correttamente', () => {\n      render(<HeroSection {...mockProps} />);\n\n      expect(screen.getByText(\"Benvenuto\")).toBeInTheDocument();\n      expect(screen.getByText(\"al futuro\")).toBeInTheDocument();\n      expect(screen.getByText(\"La soluzione perfetta per il tuo business\")).toBeInTheDocument();\n    });\n\n    it('dovrebbe renderizzare tutte le metriche', () => {\n      render(<HeroSection {...mockProps} />);\n\n      expect(screen.getByText(\"10K+\")).toBeInTheDocument();\n      expect(screen.getByText(\"Utenti\")).toBeInTheDocument();\n      expect(screen.getByText(\"99%\")).toBeInTheDocument();\n      expect(screen.getByText(\"Uptime\")).toBeInTheDocument();\n      expect(screen.getByText(\"24/7\")).toBeInTheDocument();\n      expect(screen.getByText(\"Supporto\")).toBeInTheDocument();\n    });\n\n    it('dovrebbe renderizzare il bottone CTA primario', () => {\n      render(<HeroSection {...mockProps} />);\n\n      const primaryButton = screen.getByRole('button', { name: /inizia ora/i });\n      expect(primaryButton).toBeInTheDocument();\n    });\n\n    it('dovrebbe renderizzare il CTA secondario quando fornito', () => {\n      const propsWithSecondaryCta = {\n        ...mockProps,\n        secondaryCta: {\n          label: \"Scopri di più\",\n          href: \"/learn-more\"\n        }\n      };\n\n      render(<HeroSection {...propsWithSecondaryCta} />);\n\n      const secondaryLink = screen.getByText(/scopri di più/i);\n      expect(secondaryLink).toBeInTheDocument();\n      expect(secondaryLink).toHaveAttribute('href', '/learn-more');\n    });\n\n    it('dovrebbe applicare className personalizzata', () => {\n      const { container } = render(\n        <HeroSection {...mockProps} className=\"custom-class\" />\n      );\n\n      const section = container.querySelector('section');\n      expect(section).toHaveClass('custom-class');\n    });\n  });\n\n  describe('Interazioni', () => {\n    it('dovrebbe chiamare onClick quando il CTA primario viene cliccato', () => {\n      render(<HeroSection {...mockProps} />);\n\n      const primaryButton = screen.getByRole('button', { name: /inizia ora/i });\n      fireEvent.click(primaryButton);\n\n      expect(mockProps.primaryCta.onClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('dovrebbe avere focus states corretti', () => {\n      render(<HeroSection {...mockProps} />);\n\n      const primaryButton = screen.getByRole('button', { name: /inizia ora/i });\n      primaryButton.focus();\n\n      expect(primaryButton).toHaveFocus();\n    });\n  });\n\n  describe('Effetto Typewriter', () => {\n    it('dovrebbe renderizzare l\\'effetto typewriter quando le frasi sono fornite', () => {\n      const propsWithTypewriter = {\n        ...mockProps,\n        typewriterPhrases: [\"test phrase 1\", \"test phrase 2\"]\n      };\n\n      render(<HeroSection {...propsWithTypewriter} />);\n\n      // Verifica che il container typewriter esista\n      const typewriterContainer = screen.getByText(/\\|/);\n      expect(typewriterContainer).toBeInTheDocument();\n    });\n\n    it('non dovrebbe renderizzare typewriter senza frasi', () => {\n      render(<HeroSection {...mockProps} />);\n\n      // Non dovrebbe esserci il cursore \"|\"\n      const typewriterElements = screen.queryByText(/\\|/);\n      expect(typewriterElements).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Metriche con Icone', () => {\n    it('dovrebbe renderizzare le icone quando fornite', () => {\n      const propsWithIcons = {\n        ...mockProps,\n        metrics: [\n          {\n            value: \"100\",\n            label: \"Test\",\n            icon: <span data-testid=\"test-icon\">Icon</span>\n          }\n        ]\n      };\n\n      render(<HeroSection {...propsWithIcons} />);\n\n      expect(screen.getByTestId('test-icon')).toBeInTheDocument();\n    });\n\n    it('dovrebbe renderizzare senza icone quando non fornite', () => {\n      render(<HeroSection {...mockProps} />);\n\n      // Verifica che le metriche siano comunque renderizzate\n      expect(screen.getByText(\"10K+\")).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibilità', () => {\n    it('dovrebbe avere il corretto aria-label sulla sezione', () => {\n      const { container } = render(<HeroSection {...mockProps} />);\n\n      const section = container.querySelector('section');\n      expect(section).toHaveAttribute('aria-label', 'Hero section');\n    });\n\n    it('dovrebbe avere elementi semantici corretti', () => {\n      const { container } = render(<HeroSection {...mockProps} />);\n\n      // Verifica la presenza di h1 per l'headline\n      const heading = screen.getByRole('heading', { level: 1 });\n      expect(heading).toBeInTheDocument();\n    });\n\n    it('i bottoni dovrebbero essere accessibili da tastiera', () => {\n      render(<HeroSection {...mockProps} />);\n\n      const primaryButton = screen.getByRole('button', { name: /inizia ora/i });\n\n      // Simula Tab per focus\n      primaryButton.focus();\n      expect(primaryButton).toHaveFocus();\n\n      // Simula Enter per click\n      fireEvent.keyDown(primaryButton, { key: 'Enter', code: 'Enter' });\n      expect(mockProps.primaryCta.onClick).toHaveBeenCalled();\n    });\n  });\n\n  describe('Responsive', () => {\n    it('dovrebbe avere classi responsive corrette', () => {\n      const { container } = render(<HeroSection {...mockProps} />);\n\n      const section = container.querySelector('section');\n      expect(section?.className).toContain('py-20');\n      expect(section?.className).toContain('sm:py-28');\n      expect(section?.className).toContain('lg:py-36');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSection\\HeroSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":89,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":89,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2994,3012],"text":"(headline.highlight != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2994,3012],"text":"(headline.highlight ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2994,3012],"text":"(Boolean(headline.highlight))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":139,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":139,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport type { HeroSectionProps } from './HeroSection.types';\n\n/**\n * HeroSection - Sezione Hero con typewriter effect e metriche\n * \n * Componente hero moderno con effetto typewriter animato, gradient backgrounds,\n * metriche in evidenza e CTA buttons. Include animazioni fluide e design responsivo.\n * \n * @component\n * @example\n * ```tsx\n * <HeroSection\n *   headline={{ text: \"Benvenuto\", highlight: \"nel futuro\" }}\n *   subheadline=\"La soluzione perfetta per il tuo business\"\n *   typewriterPhrases={[\"innovazione\", \"crescita\", \"successo\"]}\n *   metrics={[\n *     { value: \"10K+\", label: \"Utenti\", icon: <UserIcon /> }\n *   ]}\n *   primaryCta={{ label: \"Inizia Ora\", onClick: () => {} }}\n * />\n * ```\n */\nexport const HeroSection: React.FC<HeroSectionProps> = ({\n  headline,\n  subheadline,\n  typewriterPhrases = [],\n  metrics,\n  primaryCta,\n  secondaryCta,\n  className = '',\n}) => {\n  const [currentPhrase, setCurrentPhrase] = useState(0);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [text, setText] = useState('');\n  const [delta, setDelta] = useState(150);\n\n  // Effetto typewriter\n  useEffect(() => {\n    if (typewriterPhrases.length === 0) return;\n\n    const ticker = setInterval(() => {\n      const fullText = typewriterPhrases[currentPhrase];\n\n      if (!isDeleting) {\n        setText(fullText.substring(0, text.length + 1));\n        setDelta(150);\n\n        if (text === fullText) {\n          setTimeout(() => setIsDeleting(true), 2000);\n        }\n      } else {\n        setText(fullText.substring(0, text.length - 1));\n        setDelta(75);\n\n        if (text === '') {\n          setIsDeleting(false);\n          setCurrentPhrase((prev) => (prev + 1) % typewriterPhrases.length);\n        }\n      }\n    }, delta);\n\n    return () => clearInterval(ticker);\n  }, [text, isDeleting, currentPhrase, delta, typewriterPhrases]);\n\n  return (\n    <section\n      className={`relative overflow-hidden bg-gradient-to-br from-blue-50 via-white to-purple-50 py-20 sm:py-28 lg:py-36 ${className}`}\n      aria-label=\"Hero section\"\n    >\n      {/* Elementi decorativi di sfondo */}\n      <div className=\"absolute top-0 left-0 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-blue-400/20 rounded-full blur-3xl animate-float-slow\" />\n      <div className=\"absolute bottom-0 right-0 translate-x-1/2 translate-y-1/2 w-96 h-96 bg-purple-400/20 rounded-full blur-3xl animate-float-slow-delayed\" />\n\n      {/* Pattern a puntini */}\n      <div\n        className=\"absolute inset-0 opacity-10\"\n        style={{\n          backgroundImage: `radial-gradient(circle, #3B82F6 1px, transparent 1px)`,\n          backgroundSize: '60px 60px',\n        }}\n      />\n\n      <div className=\"relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          {/* Headline */}\n          <h1 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl md:text-6xl lg:text-7xl\">\n            {headline.text}\n            {headline.highlight && (\n              <>\n                {' '}\n                <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  {headline.highlight}\n                </span>\n              </>\n            )}\n          </h1>\n\n          {/* Subheadline */}\n          <p className=\"mt-6 text-lg text-gray-600 sm:text-xl md:text-2xl max-w-3xl mx-auto\">\n            {subheadline}\n          </p>\n\n          {/* Effetto Typewriter */}\n          {typewriterPhrases.length > 0 && (\n            <div className=\"mt-4 h-8\">\n              <p className=\"text-blue-600 text-lg font-medium\">\n                {text}\n                <span className=\"animate-pulse\">|</span>\n              </p>\n            </div>\n          )}\n\n          {/* Bottoni CTA */}\n          <div className=\"mt-10 flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <button\n              onClick={primaryCta.onClick}\n              className=\"w-full sm:w-auto rounded-lg bg-blue-600 px-8 py-4 text-base font-semibold text-white shadow-lg hover:bg-blue-700 hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n            >\n              {primaryCta.label}\n            </button>\n            {secondaryCta && (\n              <a\n                href={secondaryCta.href}\n                className=\"w-full sm:w-auto rounded-lg border-2 border-blue-600 px-8 py-4 text-base font-semibold text-blue-600 hover:bg-blue-50 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n              >\n                {secondaryCta.label}\n              </a>\n            )}\n          </div>\n\n          {/* Cards Metriche */}\n          <div className=\"mt-16 grid grid-cols-1 gap-6 sm:grid-cols-3 max-w-4xl mx-auto\">\n            {metrics.map((metric, index) => (\n              <div\n                key={index}\n                className=\"rounded-2xl bg-white/80 backdrop-blur-sm p-6 shadow-lg hover:shadow-xl transition-shadow duration-200 border border-gray-100\"\n              >\n                {metric.icon && (\n                  <div className=\"mb-3 flex justify-center text-blue-600\">\n                    {metric.icon}\n                  </div>\n                )}\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  {metric.value}\n                </p>\n                <p className=\"mt-2 text-sm text-gray-600\">{metric.label}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default HeroSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSection\\HeroSection.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Configurazione per una card metrica nel hero\n * @interface MetricCard\n */\nexport interface MetricCard {\n  /** Valore della metrica da visualizzare (es: \"10K+\", \"99%\") */\n  value: string;\n  /** Label descrittiva della metrica */\n  label: string;\n  /** Icona opzionale da mostrare sopra il valore */\n  icon?: React.ReactNode;\n}\n\n/**\n * Configurazione del testo principale dell'hero\n * @interface Headline\n */\nexport interface Headline {\n  /** Testo principale dell'headline */\n  text: string;\n  /** Parte del testo da evidenziare con gradiente */\n  highlight?: string;\n}\n\n/**\n * Configurazione del bottone CTA primario\n * @interface PrimaryCTA\n */\nexport interface PrimaryCTA {\n  /** Testo del bottone */\n  label: string;\n  /** Callback eseguita al click */\n  onClick: () => void;\n}\n\n/**\n * Configurazione del bottone CTA secondario\n * @interface SecondaryCTA\n */\nexport interface SecondaryCTA {\n  /** Testo del bottone */\n  label: string;\n  /** URL di destinazione */\n  href: string;\n}\n\n/**\n * Props per il componente HeroSection\n * @interface HeroSectionProps\n */\nexport interface HeroSectionProps {\n  /** Configurazione dell'headline principale */\n  headline: Headline;\n  /** Sottotitolo descrittivo */\n  subheadline: string;\n  /** Array di frasi per l'effetto typewriter (opzionale) */\n  typewriterPhrases?: string[];\n  /** Array di metriche da visualizzare */\n  metrics: MetricCard[];\n  /** Configurazione del bottone CTA primario */\n  primaryCta: PrimaryCTA;\n  /** Configurazione del bottone CTA secondario (opzionale) */\n  secondaryCta?: SecondaryCTA;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSection\\examples\\advanced.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[486,522],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":24,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { HeroSection } from '../HeroSection';\nimport { Users, TrendingUp, Award } from 'lucide-react';\n\n/**\n * Esempio Avanzato - HeroSection\n *\n * Questo esempio mostra tutte le funzionalità avanzate del componente:\n * - Effetto typewriter con frasi multiple\n * - Metriche con icone personalizzate\n * - Doppio CTA (primario e secondario)\n * - Styling personalizzato\n */\nexport const AdvancedExample: React.FC = () => {\n  const handlePrimaryCTA = () => {\n    console.log(\"Primary CTA clicked!\");\n    // Esempio: Apri modal di registrazione\n    // openSignupModal();\n\n    // Esempio: Track analytics event\n    // analytics.track('hero_cta_clicked', {\n    //   type: 'primary',\n    //   label: 'Richiedi Demo'\n    // });\n\n    // Esempio: Navigate to signup\n    // router.push('/signup');\n  };\n\n  return (\n    <HeroSection\n      // Headline con evidenziazione\n      headline={{\n        text: \"Il futuro del\",\n        highlight: \"SaaS è qui\"\n      }}\n      // Subheadline descrittivo\n      subheadline=\"Automatizza il tuo business con AI e machine learning di ultima generazione. Scalabile, sicuro e facilissimo da usare.\"\n      // Frasi animate con effetto typewriter\n      typewriterPhrases={[\n        \"automazione intelligente\",\n        \"insights in tempo reale\",\n        \"scalabilità illimitata\",\n        \"sicurezza enterprise\"\n      ]}\n      // Metriche con icone personalizzate\n      metrics={[\n        {\n          value: \"100K+\",\n          label: \"Aziende che si fidano\",\n          icon: <Users className=\"h-8 w-8\" />\n        },\n        {\n          value: \"3x\",\n          label: \"ROI Medio\",\n          icon: <TrendingUp className=\"h-8 w-8\" />\n        },\n        {\n          value: \"#1\",\n          label: \"Nel Settore\",\n          icon: <Award className=\"h-8 w-8\" />\n        }\n      ]}\n      // CTA primario con handler\n      primaryCta={{\n        label: \"Richiedi Demo\",\n        onClick: handlePrimaryCTA\n      }}\n      // CTA secondario con link\n      secondaryCta={{\n        label: \"Vedi Prezzi\",\n        href: \"/pricing\"\n      }}\n      // Classi CSS personalizzate (opzionale)\n      className=\"bg-gradient-to-br from-indigo-50 via-white to-cyan-50\"\n    />\n  );\n};\n\n/**\n * Esempio per Startup/SaaS\n */\nexport const StartupHeroExample: React.FC = () => {\n  return (\n    <HeroSection\n      headline={{\n        text: \"Crescita esponenziale per\",\n        highlight: \"startup ambiziose\"\n      }}\n      subheadline=\"Da zero a 100K utenti in meno di un anno. Gli strumenti che hanno usato le migliori startup del mondo.\"\n      typewriterPhrases={[\n        \"analytics avanzate\",\n        \"growth hacking\",\n        \"A/B testing\",\n        \"retention optimization\"\n      ]}\n      metrics={[\n        { value: \"500+\", label: \"Startup Finanziate\", icon: <TrendingUp className=\"h-8 w-8\" /> },\n        { value: \"$2M+\", label: \"Funding Medio\", icon: <Award className=\"h-8 w-8\" /> },\n        { value: \"95%\", label: \"Success Rate\", icon: <Users className=\"h-8 w-8\" /> }\n      ]}\n      primaryCta={{\n        label: \"Inizia Gratis\",\n        onClick: () => window.location.href = \"/signup\"\n      }}\n      secondaryCta={{\n        label: \"Case Studies\",\n        href: \"/success-stories\"\n      }}\n    />\n  );\n};\n\n/**\n * Esempio per E-commerce\n */\nexport const EcommerceHeroExample: React.FC = () => {\n  return (\n    <HeroSection\n      headline={{\n        text: \"Vendi online come\",\n        highlight: \"mai prima d'ora\"\n      }}\n      subheadline=\"La piattaforma e-commerce che fa crescere il tuo fatturato del 300%. Senza commissioni nascoste.\"\n      metrics={[\n        { value: \"€50M+\", label: \"Volume Transato\" },\n        { value: \"0%\", label: \"Commissioni\" },\n        { value: \"2min\", label: \"Setup Completo\" }\n      ]}\n      primaryCta={{\n        label: \"Apri il Tuo Negozio\",\n        onClick: () => console.log(\"Opening store...\")\n      }}\n      secondaryCta={{\n        label: \"Vedi Demo Live\",\n        href: \"/demo\"\n      }}\n    />\n  );\n};\n\nexport default AdvancedExample;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSection\\examples\\basic.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[914,958],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { HeroSection } from '../HeroSection';\n\n/**\n * Esempio Base - HeroSection\n *\n * Questo esempio mostra l'utilizzo più semplice del componente HeroSection,\n * con headline, subheadline, metriche base e un singolo CTA.\n */\nexport const BasicExample: React.FC = () => {\n  return (\n    <HeroSection\n      headline={{\n        text: \"Trasforma il tuo business con\",\n        highlight: \"innovazione digitale\"\n      }}\n      subheadline=\"La piattaforma all-in-one per far crescere la tua azienda online in modo veloce e sicuro\"\n      metrics={[\n        {\n          value: \"10K+\",\n          label: \"Clienti Soddisfatti\"\n        },\n        {\n          value: \"99%\",\n          label: \"Uptime Garantito\"\n        },\n        {\n          value: \"24/7\",\n          label: \"Supporto Dedicato\"\n        }\n      ]}\n      primaryCta={{\n        label: \"Inizia Gratis\",\n        onClick: () => {\n          console.log(\"Inizia il percorso gratuito!\");\n          // Qui potresti:\n          // - Navigare alla pagina di signup\n          // - Aprire un modal di registrazione\n          // - Iniziare un tutorial guidato\n        }\n      }}\n    />\n  );\n};\n\nexport default BasicExample;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSplitScreen\\HeroSplitScreen.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSplitScreen\\HeroSplitScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":33,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":41,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":41,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":42,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":47,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":57,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":57,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":59,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":59,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":65,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":79,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":79,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":80,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":85,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":91,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":92,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":92,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":111,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":111,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":112,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":113,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":141,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":141,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":142,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":143,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":143,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":144,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":144,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":151,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":151,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":162,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":162,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":180,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":180,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":181,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":181,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":182,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":182,"endColumn":60}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { HeroSplitScreen } from './HeroSplitScreen';\nimport { Zap, Shield, TrendingUp } from 'lucide-react';\n\nconst mockProps = {\n  logo: {\n    src: '/logo.svg',\n    alt: 'Test Logo',\n    width: 180,\n    height: 40,\n  },\n  subtitle: '🚀 Test Subtitle',\n  description: 'Test description for hero section',\n  features: [\n    { icon: Zap, text: 'Fast performance' },\n    { icon: Shield, text: 'Secure platform' },\n    { icon: TrendingUp, text: 'Growth guaranteed' },\n  ],\n  primaryCta: {\n    text: 'Get Started',\n    href: '/signup',\n  },\n  mockupImage: {\n    src: '/mockup.png',\n    alt: 'Mockup Image',\n  },\n};\n\ndescribe('HeroSplitScreen', () => {\n  it('renders without crashing', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    expect(screen.getByText('Test description for hero section')).toBeInTheDocument();\n  });\n\n  it('renders logo with correct attributes', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    const logo = screen.getByAltText('Test Logo');\n    expect(logo).toBeInTheDocument();\n    expect(logo).toHaveAttribute('src', '/logo.svg');\n    expect(logo).toHaveAttribute('width', '180');\n    expect(logo).toHaveAttribute('height', '40');\n  });\n\n  it('renders subtitle', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    expect(screen.getByText('🚀 Test Subtitle')).toBeInTheDocument();\n  });\n\n  it('renders description', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    expect(screen.getByText('Test description for hero section')).toBeInTheDocument();\n  });\n\n  it('renders all features', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    expect(screen.getByText('Fast performance')).toBeInTheDocument();\n    expect(screen.getByText('Secure platform')).toBeInTheDocument();\n    expect(screen.getByText('Growth guaranteed')).toBeInTheDocument();\n  });\n\n  it('renders primary CTA button', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    const ctaButton = screen.getByRole('link', { name: 'Get Started' });\n    expect(ctaButton).toBeInTheDocument();\n    expect(ctaButton).toHaveAttribute('href', '/signup');\n  });\n\n  it('renders secondary CTA button when provided', () => {\n    const propsWithSecondary = {\n      ...mockProps,\n      secondaryCta: {\n        text: 'Learn More',\n        href: '/features',\n      },\n    };\n    render(<HeroSplitScreen {...propsWithSecondary} />);\n    const secondaryButton = screen.getByRole('link', { name: 'Learn More' });\n    expect(secondaryButton).toBeInTheDocument();\n    expect(secondaryButton).toHaveAttribute('href', '/features');\n  });\n\n  it('does not render secondary CTA when not provided', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    expect(screen.queryByText('Learn More')).not.toBeInTheDocument();\n  });\n\n  it('renders mockup image', () => {\n    render(<HeroSplitScreen {...mockProps} />);\n    const mockupImg = screen.getByAltText('Mockup Image');\n    expect(mockupImg).toBeInTheDocument();\n    expect(mockupImg).toHaveAttribute('src', '/mockup.png');\n  });\n\n  it('renders trust indicators when provided', () => {\n    const propsWithTrust = {\n      ...mockProps,\n      trustIndicators: [\n        {\n          avatars: [\n            { src: '/avatar1.jpg', alt: 'User 1' },\n            { src: '/avatar2.jpg', alt: 'User 2' },\n          ],\n          text: '500+ happy clients',\n          rating: 4.9,\n          ratingLabel: 'on Trustpilot',\n        },\n      ],\n    };\n    render(<HeroSplitScreen {...propsWithTrust} />);\n    expect(screen.getByText('500+ happy clients')).toBeInTheDocument();\n    expect(screen.getByText('4.9')).toBeInTheDocument();\n    expect(screen.getByText('on Trustpilot')).toBeInTheDocument();\n  });\n\n  it('renders floating cards when provided', () => {\n    const propsWithCards = {\n      ...mockProps,\n      mockupImage: {\n        src: '/mockup.png',\n        alt: 'Mockup Image',\n        floatingCards: [\n          {\n            title: 'Analytics',\n            value: '+127%',\n            trend: 'up' as const,\n            description: 'Monthly growth',\n            delay: 0,\n          },\n          {\n            title: 'Users',\n            value: '12.5K',\n            trend: 'up' as const,\n            description: 'Active now',\n            delay: 2,\n          },\n        ],\n      },\n    };\n    render(<HeroSplitScreen {...propsWithCards} />);\n    expect(screen.getByText('Analytics')).toBeInTheDocument();\n    expect(screen.getByText('+127%')).toBeInTheDocument();\n    expect(screen.getByText('Users')).toBeInTheDocument();\n    expect(screen.getByText('12.5K')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <HeroSplitScreen {...mockProps} className=\"custom-class\" />\n    );\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n\n  it('renders feature icons with aria-hidden', () => {\n    const { container } = render(<HeroSplitScreen {...mockProps} />);\n    const icons = container.querySelectorAll('[aria-hidden=\"true\"]');\n    expect(icons.length).toBeGreaterThan(0);\n  });\n\n  it('has correct semantic structure', () => {\n    const { container } = render(<HeroSplitScreen {...mockProps} />);\n    expect(container.querySelector('section')).toBeInTheDocument();\n  });\n\n  it('renders trust indicator avatars', () => {\n    const propsWithTrust = {\n      ...mockProps,\n      trustIndicators: [\n        {\n          avatars: [\n            { src: '/avatar1.jpg', alt: 'User 1' },\n            { src: '/avatar2.jpg', alt: 'User 2' },\n            { src: '/avatar3.jpg', alt: 'User 3' },\n          ],\n          text: 'Trusted by users',\n        },\n      ],\n    };\n    render(<HeroSplitScreen {...propsWithTrust} />);\n    expect(screen.getByAltText('User 1')).toBeInTheDocument();\n    expect(screen.getByAltText('User 2')).toBeInTheDocument();\n    expect(screen.getByAltText('User 3')).toBeInTheDocument();\n  });\n\n  it('renders rating stars when rating is provided', () => {\n    const propsWithRating = {\n      ...mockProps,\n      trustIndicators: [\n        {\n          avatars: [],\n          text: 'Rated',\n          rating: 5.0,\n          ratingLabel: 'stars',\n        },\n      ],\n    };\n    const { container } = render(<HeroSplitScreen {...propsWithRating} />);\n    const stars = container.querySelectorAll('svg[fill=\"currentColor\"]');\n    expect(stars.length).toBeGreaterThan(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSplitScreen\\HeroSplitScreen.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":111,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":111,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4385,4401],"text":"(indicator.rating != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4385,4401],"text":"(indicator.rating ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4385,4401],"text":"(Boolean(indicator.rating))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":114,"column":31,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":114,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":129,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":129,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5674,5695],"text":"(indicator.ratingLabel != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5674,5695],"text":"(indicator.ratingLabel ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5674,5695],"text":"(Boolean(indicator.ratingLabel))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { HeroSplitScreenProps } from './HeroSplitScreen.types';\n\n/**\n * HeroSplitScreen - Advanced hero section with split screen layout\n *\n * Features:\n * - Split screen layout (content + mockup)\n * - Floating glass cards for mockup\n * - Trust indicators with avatars and rating stars\n * - Dual CTA buttons\n * - Responsive design\n */\nexport const HeroSplitScreen: React.FC<HeroSplitScreenProps> = ({\n  logo,\n  subtitle,\n  description,\n  features,\n  primaryCta,\n  secondaryCta,\n  trustIndicators,\n  mockupImage,\n  className = '',\n}) => {\n  return (\n    <section className={`relative min-h-screen flex items-center overflow-hidden py-20 ${className}`}>\n      {/* Background gradient */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-blue-50 via-white to-purple-50 -z-10\" />\n\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16 items-center\">\n          {/* Left Side - Content */}\n          <div className=\"space-y-8\">\n            {/* Logo */}\n            <div className=\"mb-8\">\n              <img\n                src={logo.src}\n                alt={logo.alt}\n                width={logo.width}\n                height={logo.height}\n                className=\"h-10\"\n              />\n            </div>\n\n            {/* Subtitle */}\n            <p className=\"text-sm md:text-base text-blue-600 font-semibold uppercase tracking-wider\">\n              {subtitle}\n            </p>\n\n            {/* Description */}\n            <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 leading-tight\">\n              {description}\n            </h1>\n\n            {/* Features List */}\n            <ul className=\"space-y-4\">\n              {features.map((feature, index) => {\n                const IconComponent = feature.icon;\n                return (\n                  <li key={index} className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center mt-0.5\">\n                      <IconComponent className=\"w-4 h-4 text-blue-600\" />\n                    </div>\n                    <span className=\"text-lg text-gray-700\">{feature.text}</span>\n                  </li>\n                );\n              })}\n            </ul>\n\n            {/* CTA Buttons */}\n            <div className=\"flex gap-4 flex-wrap pt-4\">\n              <a\n                href={primaryCta.href}\n                className=\"group inline-flex items-center gap-2 px-8 py-4 bg-gradient-to-r from-blue-600 to-cyan-600 text-white rounded-xl font-semibold hover:shadow-2xl hover:shadow-blue-500/40 transition-all hover:scale-105\"\n              >\n                {primaryCta.text}\n                <svg className=\"w-5 h-5 group-hover:translate-x-1 transition-transform\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n                </svg>\n              </a>\n\n              {secondaryCta && (\n                <a\n                  href={secondaryCta.href}\n                  className=\"inline-flex items-center gap-2 px-8 py-4 border-2 border-gray-300 hover:border-blue-600 text-gray-900 rounded-xl font-semibold hover:bg-blue-50 transition-all\"\n                >\n                  {secondaryCta.text}\n                </a>\n              )}\n            </div>\n\n            {/* Trust Indicators */}\n            {trustIndicators && trustIndicators.length > 0 && (\n              <div className=\"pt-8 border-t border-gray-200\">\n                {trustIndicators.map((indicator, index) => (\n                  <div key={index} className=\"flex items-center gap-4\">\n                    {/* Avatar Stack */}\n                    <div className=\"flex -space-x-2\">\n                      {indicator.avatars.map((avatar, avatarIndex) => (\n                        <img\n                          key={avatarIndex}\n                          src={avatar.src}\n                          alt={avatar.alt}\n                          className=\"w-10 h-10 rounded-full border-2 border-white\"\n                        />\n                      ))}\n                    </div>\n\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-semibold text-gray-900\">{indicator.text}</p>\n                      {indicator.rating && (\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <div className=\"flex items-center\">\n                            {[...Array(5)].map((_, i) => (\n                              <svg\n                                key={i}\n                                className={`w-4 h-4 ${\n                                  i < Math.floor(indicator.rating!)\n                                    ? 'text-yellow-400 fill-current'\n                                    : 'text-gray-300 fill-current'\n                                }`}\n                                viewBox=\"0 0 20 20\"\n                              >\n                                <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                              </svg>\n                            ))}\n                          </div>\n                          <span className=\"text-sm font-bold text-gray-900\">{indicator.rating}</span>\n                          {indicator.ratingLabel && (\n                            <span className=\"text-sm text-gray-600\">{indicator.ratingLabel}</span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Right Side - Mockup with Floating Cards */}\n          <div className=\"relative hidden lg:block\">\n            <div className=\"relative\">\n              {/* Main Mockup Image */}\n              <img\n                src={mockupImage.src}\n                alt={mockupImage.alt}\n                className=\"w-full h-auto rounded-2xl shadow-2xl\"\n              />\n\n              {/* Floating Cards */}\n              {mockupImage.floatingCards && mockupImage.floatingCards.map((card, index) => (\n                <div\n                  key={index}\n                  className=\"absolute p-4 bg-white/80 backdrop-blur-md rounded-xl shadow-2xl border border-gray-200/50 animate-float-slow\"\n                  style={{\n                    top: index === 0 ? '10%' : index === 1 ? '50%' : '80%',\n                    left: index === 0 ? '-10%' : index === 1 ? '80%' : '70%',\n                    animationDelay: `${card.delay}s`,\n                  }}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className={`flex-shrink-0 w-10 h-10 rounded-lg bg-gradient-to-br ${\n                      card.trend === 'up' ? 'from-green-400 to-emerald-500' : 'from-red-400 to-rose-500'\n                    } flex items-center justify-center`}>\n                      <svg\n                        className=\"w-5 h-5 text-white\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        {card.trend === 'up' ? (\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n                        ) : (\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 17h8m0 0V9m0 8l-8-8-4 4-6-6\" />\n                        )}\n                      </svg>\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-gray-600 font-medium\">{card.title}</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">{card.value}</p>\n                      <p className=\"text-xs text-gray-500\">{card.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default HeroSplitScreen;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSplitScreen\\HeroSplitScreen.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Logo configuration\n */\nexport interface Logo {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n}\n\n/**\n * Feature with icon\n */\nexport interface Feature {\n  icon: React.ComponentType<{ className?: string }>;\n  text: string;\n}\n\n/**\n * CTA Button\n */\nexport interface CTAButton {\n  text: string;\n  href: string;\n}\n\n/**\n * Trust Indicator with avatars and rating\n */\nexport interface TrustIndicator {\n  avatars: Array<{ src: string; alt: string }>;\n  text: string;\n  rating?: number;\n  ratingLabel?: string;\n}\n\n/**\n * Floating Card for mockup\n */\nexport interface FloatingCard {\n  title: string;\n  value: string;\n  trend: 'up' | 'down';\n  description: string;\n  delay: number;\n}\n\n/**\n * Mockup Image with floating cards\n */\nexport interface MockupImage {\n  src: string;\n  alt: string;\n  floatingCards?: FloatingCard[];\n}\n\n/**\n * HeroSplitScreen Props\n */\nexport interface HeroSplitScreenProps {\n  logo: Logo;\n  subtitle: string;\n  description: string;\n  features: Feature[];\n  primaryCta: CTAButton;\n  secondaryCta?: CTAButton;\n  trustIndicators?: TrustIndicator[];\n  mockupImage: MockupImage;\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSplitScreen\\examples\\advanced.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":17,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":17,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { HeroSplitScreen } from '../HeroSplitScreen';\nimport { Zap, Shield, TrendingUp, Sparkles, Award, Users } from 'lucide-react';\n\n/**\n * Esempio avanzato di HeroSplitScreen\n *\n * Questo esempio mostra tutte le funzionalità del componente:\n * - Logo personalizzato\n * - Sottotitolo con emoji\n * - Descrizione dettagliata\n * - 6 features con icone diverse\n * - CTA primaria e secondaria\n * - Indicatori di fiducia con avatars e rating\n * - Mockup con 3 carte galleggianti animate\n * - Background gradient personalizzato\n */\nexport default function AdvancedExample() {\n  return (\n    <HeroSplitScreen\n      logo={{\n        src: 'https://via.placeholder.com/180x40/8b5cf6/ffffff?text=Premium+Brand',\n        alt: 'Premium Brand Logo',\n        width: 180,\n        height: 40,\n      }}\n      subtitle=\"✨ La Piattaforma All-in-One per il Tuo Successo\"\n      description=\"Gestisci vendite, marketing, analytics e team collaboration da un'unica dashboard potente. Oltre 1,000 aziende si fidano di noi per crescere il loro business.\"\n      features={[\n        { icon: Zap, text: 'Performance 10x superiori' },\n        { icon: Shield, text: 'Sicurezza enterprise-grade' },\n        { icon: TrendingUp, text: 'ROI medio del 240%' },\n        { icon: Sparkles, text: 'AI integrata per automazioni' },\n        { icon: Award, text: 'Premiata come Best SaaS 2024' },\n        { icon: Users, text: 'Community di 50K+ professionisti' },\n      ]}\n      primaryCta={{\n        text: 'Inizia Prova Gratuita 30 Giorni',\n        href: '/trial',\n      }}\n      secondaryCta={{\n        text: 'Guarda Demo dal Vivo',\n        href: '/demo',\n      }}\n      trustIndicators={[\n        {\n          avatars: [\n            { src: 'https://i.pravatar.cc/150?img=1', alt: 'CEO Azienda 1' },\n            { src: 'https://i.pravatar.cc/150?img=2', alt: 'CEO Azienda 2' },\n            { src: 'https://i.pravatar.cc/150?img=3', alt: 'CEO Azienda 3' },\n            { src: 'https://i.pravatar.cc/150?img=4', alt: 'CEO Azienda 4' },\n            { src: 'https://i.pravatar.cc/150?img=5', alt: 'CEO Azienda 5' },\n          ],\n          text: '1,000+ aziende Fortune 500',\n          rating: 4.9,\n          ratingLabel: 'su G2 e Capterra',\n        },\n      ]}\n      mockupImage={{\n        src: 'https://via.placeholder.com/800x600/8b5cf6/ffffff?text=Advanced+Dashboard',\n        alt: 'Advanced Dashboard with Analytics',\n        floatingCards: [\n          {\n            title: 'Revenue Growth',\n            value: '+240%',\n            trend: 'up',\n            description: 'Q1 2024',\n            delay: 0,\n          },\n          {\n            title: 'Active Users',\n            value: '50K+',\n            trend: 'up',\n            description: 'This month',\n            delay: 1,\n          },\n          {\n            title: 'Customer Satisfaction',\n            value: '4.9/5',\n            trend: 'up',\n            description: 'Trustpilot rating',\n            delay: 2,\n          },\n        ],\n      }}\n      className=\"bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50\"\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSplitScreen\\examples\\basic.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":15,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { HeroSplitScreen } from '../HeroSplitScreen';\nimport { Zap, Shield, TrendingUp } from 'lucide-react';\n\n/**\n * Esempio base di HeroSplitScreen\n *\n * Questo esempio mostra l'utilizzo minimo del componente con:\n * - Logo aziendale\n * - Sottotitolo con emoji\n * - Descrizione breve\n * - 3 features principali\n * - CTA primaria\n * - Mockup immagine semplice\n */\nexport default function BasicExample() {\n  return (\n    <HeroSplitScreen\n      logo={{\n        src: 'https://via.placeholder.com/180x40/3b82f6/ffffff?text=Brand',\n        alt: 'Brand Logo',\n        width: 180,\n        height: 40,\n      }}\n      subtitle=\"🚀 Innovazione Tecnologica\"\n      description=\"Trasforma il tuo business con la nostra piattaforma all-in-one. Semplice, veloce e sicura.\"\n      features={[\n        { icon: Zap, text: 'Performance eccezionali' },\n        { icon: Shield, text: 'Sicurezza avanzata' },\n        { icon: TrendingUp, text: 'Crescita garantita' },\n      ]}\n      primaryCta={{\n        text: 'Inizia Gratis',\n        href: '/signup',\n      }}\n      mockupImage={{\n        src: 'https://via.placeholder.com/800x600/3b82f6/ffffff?text=Dashboard',\n        alt: 'Dashboard Preview',\n      }}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSplitScreen\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSpotlight\\HeroSpotlight.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSpotlight\\HeroSpotlight.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":51,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":51,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1477,1485],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1477,1485],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1477,1485],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":57,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":57,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1648,1655],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1648,1655],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1648,1655],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":57,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":57,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1659,1675],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1659,1675],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1659,1675],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":59,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":59,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1783,1790],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1783,1790],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1783,1790],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":65,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":65,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1933,1949],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1933,1949],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1933,1949],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":76,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":76,"endColumn":18}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport { Spotlight } from '@/components/effects/Spotlight';\nimport { ButtonShimmer } from '@/components/ui/ButtonShimmer';\nimport type { HeroSpotlightProps } from './HeroSpotlight.types';\n\n/**\n * HeroSpotlight Section\n *\n * Modern hero section with animated spotlight effect.\n * Perfect for landing pages and product showcases.\n *\n * @example\n * ```tsx\n * <HeroSpotlight\n *   title=\"Transform Your Business\"\n *   subtitle=\"The ultimate solution for modern companies\"\n *   ctaText=\"Get Started\"\n *   onCtaClick={() => console.log('CTA clicked')}\n * />\n * ```\n */\nexport const HeroSpotlight: React.FC<HeroSpotlightProps> = ({\n  title,\n  subtitle,\n  ctaText,\n  secondaryCtaText,\n  onCtaClick,\n  onSecondaryCtaClick,\n  children,\n  className,\n  spotlightColor = 'white',\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative h-screen w-full bg-black/[0.96] antialiased bg-grid-white/[0.02] flex items-center justify-center overflow-hidden',\n        className\n      )}\n    >\n      <Spotlight\n        className=\"-top-40 left-0 md:left-60 md:-top-20\"\n        fill={spotlightColor}\n      />\n\n      <div className=\"relative z-10 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6 bg-clip-text text-transparent bg-gradient-to-b from-neutral-50 to-neutral-400 bg-opacity-50\">\n          {title}\n        </h1>\n\n        {subtitle && (\n          <p className=\"text-lg md:text-xl lg:text-2xl text-neutral-300 max-w-3xl mx-auto mb-8\">\n            {subtitle}\n          </p>\n        )}\n\n        {(ctaText || secondaryCtaText) && (\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            {ctaText && (\n              <ButtonShimmer onClick={onCtaClick}>\n                {ctaText}\n              </ButtonShimmer>\n            )}\n\n            {secondaryCtaText && (\n              <button\n                onClick={onSecondaryCtaClick}\n                className=\"px-8 py-3 rounded-lg border border-neutral-600 text-white hover:bg-neutral-800 transition-colors\"\n              >\n                {secondaryCtaText}\n              </button>\n            )}\n          </div>\n        )}\n\n        {children && <div className=\"mt-12\">{children}</div>}\n      </div>\n\n      {/* Grid background */}\n      <div className=\"absolute inset-0 bg-grid-white/[0.02]\" />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSpotlight\\HeroSpotlight.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroSpotlight\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroTypewriter\\HeroTypewriter.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroTypewriter\\HeroTypewriter.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":76,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2085,2096],"text":"(titlePrefix != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2085,2096],"text":"(titlePrefix ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2085,2096],"text":"(Boolean(titlePrefix))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":83,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":83,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2294,2302],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2294,2302],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2294,2302],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":94,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":94,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2642,2649],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2642,2649],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2642,2649],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":94,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":94,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2653,2669],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2653,2669],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2653,2669],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":101,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":101,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2949,2956],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2949,2956],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2949,2956],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":110,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":110,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3238,3254],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3238,3254],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3238,3254],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":121,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":121,"endColumn":18}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { HeroTypewriterProps } from './HeroTypewriter.types';\n\n/**\n * HeroTypewriter Section\n *\n * Hero section with typewriter effect cycling through words.\n * Creates dynamic, engaging headlines.\n *\n * @example\n * ```tsx\n * <HeroTypewriter\n *   titlePrefix=\"Build\"\n *   words={['Amazing', 'Beautiful', 'Modern']}\n *   subtitle=\"Products that users love\"\n * />\n * ```\n */\nexport const HeroTypewriter: React.FC<HeroTypewriterProps> = ({\n  titlePrefix,\n  words,\n  subtitle,\n  ctaText,\n  secondaryCtaText,\n  onCtaClick,\n  onSecondaryCtaClick,\n  children,\n  typeSpeed = 150,\n  className,\n}) => {\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentText, setCurrentText] = useState('');\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  useEffect(() => {\n    const word = words[currentWordIndex];\n\n    const timeout = setTimeout(\n      () => {\n        if (!isDeleting) {\n          // Typing\n          setCurrentText(word.substring(0, currentText.length + 1));\n\n          if (currentText === word) {\n            // Wait before deleting\n            setTimeout(() => setIsDeleting(true), 2000);\n          }\n        } else {\n          // Deleting\n          setCurrentText(word.substring(0, currentText.length - 1));\n\n          if (currentText === '') {\n            setIsDeleting(false);\n            setCurrentWordIndex((prev) => (prev + 1) % words.length);\n          }\n        }\n      },\n      isDeleting ? typeSpeed / 2 : typeSpeed\n    );\n\n    return () => clearTimeout(timeout);\n  }, [currentText, isDeleting, currentWordIndex, words, typeSpeed]);\n\n  return (\n    <div\n      className={cn(\n        'relative h-screen w-full flex items-center justify-center bg-slate-950',\n        className\n      )}\n    >\n      {/* Content */}\n      <div className=\"relative z-10 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <div className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6\">\n          {titlePrefix && <span>{titlePrefix} </span>}\n          <span className=\"text-blue-400\">\n            {currentText}\n            <span className=\"animate-pulse\">|</span>\n          </span>\n        </div>\n\n        {subtitle && (\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"text-lg md:text-xl lg:text-2xl text-slate-300 max-w-3xl mx-auto mb-8\"\n          >\n            {subtitle}\n          </motion.p>\n        )}\n\n        {(ctaText || secondaryCtaText) && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.3 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n          >\n            {ctaText && (\n              <button\n                onClick={onCtaClick}\n                className=\"px-8 py-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                {ctaText}\n              </button>\n            )}\n\n            {secondaryCtaText && (\n              <button\n                onClick={onSecondaryCtaClick}\n                className=\"px-8 py-4 rounded-lg border border-slate-600 text-white hover:bg-slate-800 transition-colors\"\n              >\n                {secondaryCtaText}\n              </button>\n            )}\n          </motion.div>\n        )}\n\n        {children && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5, delay: 0.4 }}\n            className=\"mt-12\"\n          >\n            {children}\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroTypewriter\\HeroTypewriter.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroTypewriter\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroVideo\\HeroVideo.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroVideo\\HeroVideo.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":70,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":70,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1614,1622],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1614,1622],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1614,1622],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":81,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1961,1968],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1961,1968],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1961,1968],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":81,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1972,1988],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1972,1988],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1972,1988],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":88,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":88,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2268,2275],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2268,2275],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2268,2275],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":97,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":97,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2569,2585],"text":"(secondaryCtaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2569,2585],"text":"(secondaryCtaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2569,2585],"text":"(Boolean(secondaryCtaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":108,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":108,"endColumn":18}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { HeroVideoProps } from './HeroVideo.types';\n\n/**\n * HeroVideo Section\n *\n * Hero section with full-screen background video.\n * Perfect for high-impact landing pages.\n *\n * @example\n * ```tsx\n * <HeroVideo\n *   title=\"Welcome\"\n *   videoSrc=\"/hero-video.mp4\"\n *   ctaText=\"Get Started\"\n * />\n * ```\n */\nexport const HeroVideo: React.FC<HeroVideoProps> = ({\n  title,\n  subtitle,\n  videoSrc,\n  posterSrc,\n  ctaText,\n  secondaryCtaText,\n  onCtaClick,\n  onSecondaryCtaClick,\n  children,\n  overlayOpacity = 0.5,\n  className,\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative h-screen w-full flex items-center justify-center overflow-hidden',\n        className\n      )}\n    >\n      {/* Background Video */}\n      <video\n        autoPlay\n        loop\n        muted\n        playsInline\n        poster={posterSrc}\n        className=\"absolute inset-0 w-full h-full object-cover\"\n      >\n        <source src={videoSrc} type=\"video/mp4\" />\n      </video>\n\n      {/* Overlay */}\n      <div\n        className=\"absolute inset-0 bg-black\"\n        style={{ opacity: overlayOpacity }}\n      />\n\n      {/* Content */}\n      <div className=\"relative z-10 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <motion.h1\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6\"\n        >\n          {title}\n        </motion.h1>\n\n        {subtitle && (\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n            className=\"text-lg md:text-xl lg:text-2xl text-white/90 max-w-3xl mx-auto mb-8\"\n          >\n            {subtitle}\n          </motion.p>\n        )}\n\n        {(ctaText || secondaryCtaText) && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n          >\n            {ctaText && (\n              <button\n                onClick={onCtaClick}\n                className=\"px-8 py-4 bg-white text-slate-950 font-semibold rounded-lg hover:bg-slate-100 transition-colors shadow-xl\"\n              >\n                {ctaText}\n              </button>\n            )}\n\n            {secondaryCtaText && (\n              <button\n                onClick={onSecondaryCtaClick}\n                className=\"px-8 py-4 rounded-lg border-2 border-white text-white hover:bg-white/10 transition-colors backdrop-blur-sm\"\n              >\n                {secondaryCtaText}\n              </button>\n            )}\n          </motion.div>\n        )}\n\n        {children && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5, delay: 0.3 }}\n            className=\"mt-12\"\n          >\n            {children}\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroVideo\\HeroVideo.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroVideo\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroWaves\\HeroWaves.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroWaves\\HeroWaves.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'children' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":93,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":101},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":14,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1437,1445],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1437,1445],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1437,1445],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":15,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1594,1601],"text":"(ctaText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1594,1601],"text":"(ctaText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1594,1601],"text":"(Boolean(ctaText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { HeroWavesProps } from './HeroWaves.types';\n\nexport const HeroWaves: React.FC<HeroWavesProps> = ({ title, subtitle, ctaText, onCtaClick, children, className }) => {\n  return (\n    <div className={cn('relative h-screen w-full flex items-center justify-center overflow-hidden bg-gradient-to-b from-blue-900 to-slate-950', className)}>\n      <svg className=\"absolute bottom-0 w-full\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n        <motion.path fill=\"#1e40af\" fillOpacity=\"0.3\" d=\"M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,112C672,96,768,96,864,112C960,128,1056,160,1152,160C1248,160,1344,128,1392,112L1440,96L1440,320L0,320Z\" animate={{ d: [\"M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,112C672,96,768,96,864,112C960,128,1056,160,1152,160C1248,160,1344,128,1392,112L1440,96L1440,320L0,320Z\", \"M0,128L48,138.7C96,149,192,171,288,165.3C384,160,480,128,576,128C672,128,768,160,864,165.3C960,171,1056,149,1152,138.7C1248,128,1344,128,1392,128L1440,128L1440,320L0,320Z\"] }} transition={{ duration: 5, repeat: Infinity, repeatType: \"reverse\" }} />\n      </svg>\n      <div className=\"relative z-10 text-center text-white\">\n        <motion.h1 initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\"text-5xl md:text-7xl font-bold mb-6\">{title}</motion.h1>\n        {subtitle && <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.2 }} className=\"text-xl mb-8\">{subtitle}</motion.p>}\n        {ctaText && <motion.button onClick={onCtaClick} initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.3 }} className=\"px-8 py-4 bg-white text-blue-900 font-semibold rounded-lg hover:bg-slate-100 transition-colors\">{ctaText}</motion.button>}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroWaves\\HeroWaves.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\HeroWaves\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Hero\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\NavigationHeader\\NavigationHeader.stories.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { NavigationHeader } from './NavigationHeader';\n\n/**\n * NavigationHeader è un componente header fisso e responsive con menu di navigazione,\n * selettore lingua e bottone CTA.\n */\nconst meta = {\n  title: 'Sections/NavigationHeader',\n  component: NavigationHeader,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Header di navigazione completo con supporto multi-lingua, menu mobile e CTA button. Ideale per landing pages e applicazioni web.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    logo: {\n      description: 'Configurazione del logo (immagine o testo)',\n      control: 'object',\n    },\n    links: {\n      description: 'Array di link di navigazione',\n      control: 'object',\n    },\n    languages: {\n      description: 'Configurazione del selettore di lingua (opzionale)',\n      control: 'object',\n    },\n    ctaButton: {\n      description: 'Configurazione del bottone CTA',\n      control: 'object',\n    },\n    className: {\n      description: 'Classi CSS aggiuntive',\n      control: 'text',\n    },\n  },\n} satisfies Meta<typeof NavigationHeader>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Configurazione base con logo testuale e link essenziali.\n */\nexport const Default: Story = {\n  args: {\n    logo: {\n      text: 'MioBrand',\n      alt: 'MioBrand Logo',\n    },\n    links: [\n      { label: 'Home', href: '/' },\n      { label: 'Prodotti', href: '/prodotti' },\n      { label: 'Servizi', href: '/servizi' },\n      { label: 'Chi Siamo', href: '/chi-siamo' },\n      { label: 'Contatti', href: '/contatti' },\n    ],\n    ctaButton: {\n      label: 'Inizia Ora',\n      onClick: () => alert('CTA clicked!'),\n    },\n  },\n};\n\n/**\n * Header con logo immagine invece di testo.\n */\nexport const WithImageLogo: Story = {\n  args: {\n    logo: {\n      src: 'https://via.placeholder.com/120x40/3B82F6/FFFFFF?text=Logo',\n      alt: 'Company Logo',\n    },\n    links: [\n      { label: 'Home', href: '/' },\n      { label: 'Features', href: '/features' },\n      { label: 'Pricing', href: '/pricing' },\n      { label: 'About', href: '/about' },\n    ],\n    ctaButton: {\n      label: 'Get Started',\n      onClick: () => console.log('Get Started clicked'),\n    },\n  },\n};\n\n/**\n * Header completo con selettore di lingua.\n */\nexport const WithLanguageSwitch: Story = {\n  args: {\n    logo: {\n      text: 'QuickFy',\n      alt: 'QuickFy Logo',\n    },\n    links: [\n      { label: 'Produkty', href: '/produkty' },\n      { label: 'Funkce', href: '/funkce' },\n      { label: 'Výhody', href: '/vyhody' },\n      { label: 'Ceny', href: '/ceny' },\n      { label: 'Kontakt', href: '/kontakt' },\n    ],\n    languages: {\n      current: 'cs',\n      options: [\n        { code: 'cs', label: 'Čeština' },\n        { code: 'en', label: 'English' },\n        { code: 'de', label: 'Deutsch' },\n        { code: 'fr', label: 'Français' },\n        { code: 'it', label: 'Italiano' },\n      ],\n      onChange: (code) => console.log(`Language changed to: ${code}`),\n    },\n    ctaButton: {\n      label: 'Začněte nyní',\n      onClick: () => console.log('CTA clicked'),\n    },\n  },\n};\n\n/**\n * Variante con stile personalizzato (background gradient).\n */\nexport const CustomStyling: Story = {\n  args: {\n    logo: {\n      text: 'Brand',\n      alt: 'Brand Logo',\n    },\n    links: [\n      { label: 'Home', href: '/' },\n      { label: 'Products', href: '/products' },\n      { label: 'About', href: '/about' },\n    ],\n    ctaButton: {\n      label: 'Sign Up',\n      onClick: () => console.log('Sign Up clicked'),\n    },\n    className: 'bg-gradient-to-r from-purple-600 to-pink-600',\n  },\n};\n\n/**\n * Header minimal con pochi link.\n */\nexport const Minimal: Story = {\n  args: {\n    logo: {\n      text: 'Minimal',\n      alt: 'Minimal Logo',\n    },\n    links: [\n      { label: 'Home', href: '/' },\n      { label: 'About', href: '/about' },\n    ],\n    ctaButton: {\n      label: 'Contact',\n      onClick: () => console.log('Contact clicked'),\n    },\n  },\n};\n\n/**\n * Header con molti link (test di overflow).\n */\nexport const ManyLinks: Story = {\n  args: {\n    logo: {\n      text: 'MegaSite',\n      alt: 'MegaSite Logo',\n    },\n    links: [\n      { label: 'Home', href: '/' },\n      { label: 'Products', href: '/products' },\n      { label: 'Services', href: '/services' },\n      { label: 'Solutions', href: '/solutions' },\n      { label: 'Resources', href: '/resources' },\n      { label: 'Blog', href: '/blog' },\n      { label: 'Support', href: '/support' },\n      { label: 'Contact', href: '/contact' },\n    ],\n    ctaButton: {\n      label: 'Get Started',\n      onClick: () => console.log('Get Started clicked'),\n    },\n  },\n};\n\n/**\n * Header con ARIA labels per accessibilità.\n */\nexport const WithAriaLabels: Story = {\n  args: {\n    logo: {\n      text: 'Accessible',\n      alt: 'Accessible Brand Logo',\n    },\n    links: [\n      { label: 'Home', href: '/', ariaLabel: 'Vai alla homepage' },\n      { label: 'Dashboard', href: '/dashboard', ariaLabel: 'Accedi alla tua dashboard' },\n      { label: 'Settings', href: '/settings', ariaLabel: 'Gestisci le impostazioni' },\n    ],\n    ctaButton: {\n      label: 'Login',\n      onClick: () => console.log('Login clicked'),\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\NavigationHeader\\NavigationHeader.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":25,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":30,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":30,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":63,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":67,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":71,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":82,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":82,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":83,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":83,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":100,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":134,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":141,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":141,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":144,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":144,"endColumn":34}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { NavigationHeader } from './NavigationHeader';\nimport type { NavigationHeaderProps } from './NavigationHeader.types';\n\ndescribe('NavigationHeader', () => {\n  const defaultProps: NavigationHeaderProps = {\n    logo: {\n      text: 'TestBrand',\n      alt: 'TestBrand Logo',\n    },\n    links: [\n      { label: 'Home', href: '/' },\n      { label: 'About', href: '/about' },\n      { label: 'Contact', href: '/contact' },\n    ],\n    ctaButton: {\n      label: 'Get Started',\n      onClick: vi.fn(),\n    },\n  };\n\n  it('renders without crashing', () => {\n    render(<NavigationHeader {...defaultProps} />);\n    expect(screen.getByRole('banner')).toBeInTheDocument();\n  });\n\n  it('displays logo text correctly', () => {\n    render(<NavigationHeader {...defaultProps} />);\n    expect(screen.getByText('TestBrand')).toBeInTheDocument();\n  });\n\n  it('renders all navigation links', () => {\n    render(<NavigationHeader {...defaultProps} />);\n    expect(screen.getAllByText('Home')).toHaveLength(2); // Desktop + Mobile\n    expect(screen.getAllByText('About')).toHaveLength(2);\n    expect(screen.getAllByText('Contact')).toHaveLength(2);\n  });\n\n  it('renders CTA button with correct label', () => {\n    render(<NavigationHeader {...defaultProps} />);\n    expect(screen.getAllByText('Get Started')).toHaveLength(2); // Desktop + Mobile\n  });\n\n  it('calls onClick when CTA button is clicked', () => {\n    const onClick = vi.fn();\n    render(\n      <NavigationHeader\n        {...defaultProps}\n        ctaButton={{ label: 'Click Me', onClick }}\n      />\n    );\n    const buttons = screen.getAllByText('Click Me');\n    fireEvent.click(buttons[0]); // Click desktop button\n    expect(onClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('toggles mobile menu when hamburger is clicked', () => {\n    render(<NavigationHeader {...defaultProps} />);\n    const hamburgerButton = screen.getByLabelText('Toggle menu');\n\n    // Menu should be closed initially\n    expect(screen.queryByRole('navigation')).toBeInTheDocument();\n\n    // Click to open\n    fireEvent.click(hamburgerButton);\n    expect(hamburgerButton).toHaveAttribute('aria-expanded', 'true');\n\n    // Click to close\n    fireEvent.click(hamburgerButton);\n    expect(hamburgerButton).toHaveAttribute('aria-expanded', 'false');\n  });\n\n  it('renders logo image when src is provided', () => {\n    render(\n      <NavigationHeader\n        {...defaultProps}\n        logo={{ src: '/logo.png', alt: 'Logo Image' }}\n      />\n    );\n    const logoImage = screen.getByAltText('Logo Image');\n    expect(logoImage).toBeInTheDocument();\n    expect(logoImage).toHaveAttribute('src', '/logo.png');\n  });\n\n  it('renders language switcher when languages prop is provided', () => {\n    const languagesConfig = {\n      current: 'en',\n      options: [\n        { code: 'en', label: 'English' },\n        { code: 'it', label: 'Italiano' },\n      ],\n      onChange: vi.fn(),\n    };\n\n    render(\n      <NavigationHeader {...defaultProps} languages={languagesConfig} />\n    );\n\n    expect(screen.getByText('EN')).toBeInTheDocument();\n  });\n\n  it('calls onChange when language is selected', () => {\n    const onChange = vi.fn();\n    const languagesConfig = {\n      current: 'en',\n      options: [\n        { code: 'en', label: 'English' },\n        { code: 'it', label: 'Italiano' },\n      ],\n      onChange,\n    };\n\n    render(\n      <NavigationHeader {...defaultProps} languages={languagesConfig} />\n    );\n\n    // Open language dropdown\n    const languageButton = screen.getByLabelText('Select language');\n    fireEvent.click(languageButton);\n\n    // Select Italian\n    const italianoButton = screen.getByText('Italiano');\n    fireEvent.click(italianoButton);\n\n    expect(onChange).toHaveBeenCalledWith('it');\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <NavigationHeader {...defaultProps} className=\"custom-class\" />\n    );\n    const header = container.querySelector('header');\n    expect(header).toHaveClass('custom-class');\n  });\n\n  it('has proper accessibility attributes', () => {\n    render(<NavigationHeader {...defaultProps} />);\n\n    const banner = screen.getByRole('banner');\n    expect(banner).toBeInTheDocument();\n\n    const nav = screen.getByLabelText('Main navigation');\n    expect(nav).toBeInTheDocument();\n  });\n\n  it('renders ARIA labels on links when provided', () => {\n    const propsWithAria: NavigationHeaderProps = {\n      ...defaultProps,\n      links: [\n        { label: 'Home', href: '/', ariaLabel: 'Go to homepage' },\n      ],\n    };\n\n    render(<NavigationHeader {...propsWithAria} />);\n    const links = screen.getAllByLabelText('Go to homepage');\n    expect(links.length).toBeGreaterThan(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\NavigationHeader\\NavigationHeader.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":53,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":53,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1460,1468],"text":"(logo.src != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1460,1468],"text":"(logo.src ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1460,1468],"text":"(Boolean(logo.src))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":60,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1653,1662],"text":"(logo.text != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1653,1662],"text":"(logo.text ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1653,1662],"text":"(Boolean(logo.text))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport type { NavigationHeaderProps } from './NavigationHeader.types';\n\n/**\n * NavigationHeader - Header di navigazione fisso responsive\n *\n * Componente header completo con:\n * - Logo e brand text\n * - Menu di navigazione responsive\n * - Selettore di lingua con dropdown\n * - Bottone CTA principale\n * - Menu mobile con hamburger icon\n *\n * @example\n * ```tsx\n * <NavigationHeader\n *   logo={{ text: \"MioBrand\", alt: \"Logo\" }}\n *   links={[\n *     { label: \"Home\", href: \"/\" },\n *     { label: \"Prodotti\", href: \"/prodotti\" }\n *   ]}\n *   ctaButton={{ label: \"Inizia ora\", onClick: () => {} }}\n * />\n * ```\n */\nexport const NavigationHeader: React.FC<NavigationHeaderProps> = ({\n  logo,\n  links,\n  languages,\n  ctaButton,\n  className = '',\n}) => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [languageMenuOpen, setLanguageMenuOpen] = useState(false);\n\n  return (\n    <header\n      className={`fixed top-0 left-0 right-0 z-50 bg-white shadow-sm ${className}`}\n      role=\"banner\"\n    >\n      <nav\n        className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\"\n        aria-label=\"Main navigation\"\n      >\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <a\n              href=\"/\"\n              className=\"flex items-center space-x-2\"\n              aria-label={logo.alt}\n            >\n              {logo.src && (\n                <img\n                  src={logo.src}\n                  alt={logo.alt}\n                  className=\"h-8 w-auto\"\n                />\n              )}\n              {logo.text && (\n                <span className=\"text-xl font-bold text-gray-900\">\n                  {logo.text}\n                </span>\n              )}\n            </a>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex md:items-center md:space-x-8\">\n            {links.map((link, index) => (\n              <a\n                key={index}\n                href={link.href}\n                className=\"text-gray-700 hover:text-blue-600 transition-colors duration-200 text-sm font-medium\"\n                aria-label={link.ariaLabel}\n              >\n                {link.label}\n              </a>\n            ))}\n          </div>\n\n          {/* Right side: Language Switcher + CTA */}\n          <div className=\"hidden md:flex md:items-center md:space-x-4\">\n            {/* Language Switcher */}\n            {languages && (\n              <div className=\"relative\">\n                <button\n                  onClick={() => setLanguageMenuOpen(!languageMenuOpen)}\n                  className=\"flex items-center space-x-1 text-gray-700 hover:text-blue-600 transition-colors duration-200\"\n                  aria-label=\"Select language\"\n                  aria-expanded={languageMenuOpen}\n                  aria-haspopup=\"true\"\n                >\n                  <span className=\"text-sm font-medium uppercase\">\n                    {languages.current}\n                  </span>\n                  <svg\n                    className={`h-4 w-4 transition-transform ${\n                      languageMenuOpen ? 'rotate-180' : ''\n                    }`}\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M19 9l-7 7-7-7\"\n                    />\n                  </svg>\n                </button>\n\n                {/* Language Dropdown */}\n                {languageMenuOpen && (\n                  <div\n                    className=\"absolute right-0 mt-2 w-32 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5\"\n                    role=\"menu\"\n                  >\n                    <div className=\"py-1\">\n                      {languages.options.map((lang) => (\n                        <button\n                          key={lang.code}\n                          onClick={() => {\n                            languages.onChange?.(lang.code);\n                            setLanguageMenuOpen(false);\n                          }}\n                          className={`block w-full px-4 py-2 text-left text-sm hover:bg-gray-100 ${\n                            lang.code === languages.current\n                              ? 'bg-blue-50 text-blue-600 font-medium'\n                              : 'text-gray-700'\n                          }`}\n                          role=\"menuitem\"\n                        >\n                          {lang.label}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* CTA Button */}\n            <button\n              onClick={ctaButton.onClick}\n              className=\"rounded-lg bg-blue-600 px-6 py-2 text-sm font-semibold text-white shadow-md hover:bg-blue-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n            >\n              {ctaButton.label}\n            </button>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"flex md:hidden\">\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"inline-flex items-center justify-center rounded-md p-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\n              aria-expanded={mobileMenuOpen}\n              aria-label=\"Toggle menu\"\n            >\n              <span className=\"sr-only\">Open main menu</span>\n              {!mobileMenuOpen ? (\n                <svg\n                  className=\"block h-6 w-6\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M4 6h16M4 12h16M4 18h16\"\n                  />\n                </svg>\n              ) : (\n                <svg\n                  className=\"block h-6 w-6\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden border-t border-gray-200 pb-3 pt-2\">\n            <div className=\"space-y-1 px-2\">\n              {links.map((link, index) => (\n                <a\n                  key={index}\n                  href={link.href}\n                  className=\"block rounded-md px-3 py-2 text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-blue-600\"\n                  aria-label={link.ariaLabel}\n                >\n                  {link.label}\n                </a>\n              ))}\n            </div>\n            <div className=\"mt-4 px-2 space-y-2\">\n              {languages && (\n                <div className=\"space-y-1\">\n                  {languages.options.map((lang) => (\n                    <button\n                      key={lang.code}\n                      onClick={() => languages.onChange?.(lang.code)}\n                      className={`block w-full text-left rounded-md px-3 py-2 text-base font-medium ${\n                        lang.code === languages.current\n                          ? 'bg-blue-50 text-blue-600'\n                          : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                    >\n                      {lang.label}\n                    </button>\n                  ))}\n                </div>\n              )}\n              <button\n                onClick={ctaButton.onClick}\n                className=\"w-full rounded-lg bg-blue-600 px-6 py-2 text-base font-semibold text-white shadow-md hover:bg-blue-700 transition-colors duration-200\"\n              >\n                {ctaButton.label}\n              </button>\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n  );\n};\n\nexport default NavigationHeader;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\NavigationHeader\\NavigationHeader.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\NavigationHeader\\examples\\advanced.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[987,1029],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3242,3284],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3350,3389],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Esempio Avanzato - NavigationHeader\n *\n * Questo esempio mostra tutte le funzionalità avanzate del componente,\n * incluso il selettore di lingua, gestione dello stato e integrazione\n * con sistemi di internazionalizzazione.\n */\n\nimport React, { useState } from 'react';\nimport { NavigationHeader } from '../NavigationHeader';\n\nexport function AdvancedExample() {\n  // Stato per gestire la lingua corrente\n  const [currentLanguage, setCurrentLanguage] = useState('it');\n\n  // Stato per gestire l'autenticazione (simulato)\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Configurazione delle lingue disponibili\n  const languages = {\n    current: currentLanguage,\n    options: [\n      { code: 'it', label: 'Italiano' },\n      { code: 'en', label: 'English' },\n      { code: 'fr', label: 'Français' },\n      { code: 'de', label: 'Deutsch' },\n      { code: 'es', label: 'Español' },\n    ],\n    onChange: (code: string) => {\n      setCurrentLanguage(code);\n      console.log(`Lingua cambiata a: ${code}`);\n\n      // Qui puoi integrare con il tuo sistema i18n:\n      // i18n.changeLanguage(code);\n      // oppure:\n      // localStorage.setItem('language', code);\n      // window.location.reload();\n    },\n  };\n\n  // Traduzioni di esempio (in un'app reale, useresti i18n)\n  const translations = {\n    it: {\n      home: 'Home',\n      products: 'Prodotti',\n      features: 'Funzionalità',\n      pricing: 'Prezzi',\n      about: 'Chi Siamo',\n      contact: 'Contatti',\n      cta: isAuthenticated ? 'Dashboard' : 'Inizia Gratis',\n      welcome: 'Benvenuto!',\n      description: 'Esempio avanzato con selettore di lingua e gestione dello stato.',\n    },\n    en: {\n      home: 'Home',\n      products: 'Products',\n      features: 'Features',\n      pricing: 'Pricing',\n      about: 'About Us',\n      contact: 'Contact',\n      cta: isAuthenticated ? 'Dashboard' : 'Get Started',\n      welcome: 'Welcome!',\n      description: 'Advanced example with language switcher and state management.',\n    },\n    fr: {\n      home: 'Accueil',\n      products: 'Produits',\n      features: 'Fonctionnalités',\n      pricing: 'Tarifs',\n      about: 'À Propos',\n      contact: 'Contact',\n      cta: isAuthenticated ? 'Tableau de bord' : 'Commencer',\n      welcome: 'Bienvenue!',\n      description: 'Exemple avancé avec sélecteur de langue et gestion d\\'état.',\n    },\n    de: {\n      home: 'Startseite',\n      products: 'Produkte',\n      features: 'Funktionen',\n      pricing: 'Preise',\n      about: 'Über Uns',\n      contact: 'Kontakt',\n      cta: isAuthenticated ? 'Dashboard' : 'Jetzt Starten',\n      welcome: 'Willkommen!',\n      description: 'Erweitertes Beispiel mit Sprachauswahl und Zustandsverwaltung.',\n    },\n    es: {\n      home: 'Inicio',\n      products: 'Productos',\n      features: 'Características',\n      pricing: 'Precios',\n      about: 'Sobre Nosotros',\n      contact: 'Contacto',\n      cta: isAuthenticated ? 'Panel' : 'Comenzar',\n      welcome: '¡Bienvenido!',\n      description: 'Ejemplo avanzado con selector de idioma y gestión de estado.',\n    },\n  };\n\n  const t = translations[currentLanguage as keyof typeof translations];\n\n  // Handler per il bottone CTA\n  const handleCtaClick = () => {\n    if (isAuthenticated) {\n      console.log('Navigating to dashboard...');\n      // window.location.href = '/dashboard';\n    } else {\n      console.log('Opening signup modal...');\n      // openSignupModal();\n    }\n  };\n\n  // Link di navigazione dinamici basati sulla lingua\n  const navigationLinks = [\n    { label: t.home, href: '/', ariaLabel: `${t.home} page` },\n    { label: t.products, href: '/products', ariaLabel: `${t.products} page` },\n    { label: t.features, href: '/features', ariaLabel: `${t.features} page` },\n    { label: t.pricing, href: '/pricing', ariaLabel: `${t.pricing} page` },\n    { label: t.about, href: '/about', ariaLabel: `${t.about} page` },\n    { label: t.contact, href: '/contact', ariaLabel: `${t.contact} page` },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50\">\n      <NavigationHeader\n        logo={{\n          src: 'https://via.placeholder.com/120x40/3B82F6/FFFFFF?text=Logo',\n          alt: 'Company Logo',\n        }}\n        links={navigationLinks}\n        languages={languages}\n        ctaButton={{\n          label: t.cta,\n          onClick: handleCtaClick,\n        }}\n        className=\"shadow-lg\"\n      />\n\n      {/* Contenuto della pagina */}\n      <main className=\"pt-16\">\n        <div className=\"mx-auto max-w-7xl px-4 py-12\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-5xl font-bold text-gray-900 mb-4\">\n              {t.welcome}\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              {t.description}\n            </p>\n          </div>\n\n          {/* Demo Controls */}\n          <div className=\"max-w-md mx-auto mb-12 p-6 bg-white rounded-lg shadow-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Demo Controls</h2>\n\n            <div className=\"space-y-4\">\n              {/* Language Display */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Current Language\n                </label>\n                <div className=\"p-3 bg-gray-50 rounded-md\">\n                  <span className=\"font-mono text-blue-600\">\n                    {currentLanguage.toUpperCase()} -{' '}\n                    {languages.options.find((l) => l.code === currentLanguage)?.label}\n                  </span>\n                </div>\n              </div>\n\n              {/* Auth Toggle */}\n              <div>\n                <label className=\"flex items-center space-x-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isAuthenticated}\n                    onChange={(e) => setIsAuthenticated(e.target.checked)}\n                    className=\"h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm font-medium text-gray-700\">\n                    Simula utente autenticato\n                  </span>\n                </label>\n                <p className=\"mt-2 text-xs text-gray-500\">\n                  Cambia il testo del bottone CTA\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n            {[\n              {\n                title: 'Multi-lingua',\n                description: 'Supporto completo per internazionalizzazione',\n                icon: '🌍',\n              },\n              {\n                title: 'Responsive',\n                description: 'Ottimizzato per tutti i dispositivi',\n                icon: '📱',\n              },\n              {\n                title: 'Accessibile',\n                description: 'WCAG 2.1 compliant con ARIA labels',\n                icon: '♿',\n              },\n            ].map((feature, i) => (\n              <div\n                key={i}\n                className=\"p-6 bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow\"\n              >\n                <div className=\"text-4xl mb-4\">{feature.icon}</div>\n                <h3 className=\"text-lg font-semibold mb-2\">{feature.title}</h3>\n                <p className=\"text-gray-600\">{feature.description}</p>\n              </div>\n            ))}\n          </div>\n\n          {/* Code Example */}\n          <div className=\"p-6 bg-gray-900 rounded-lg\">\n            <h3 className=\"text-white text-lg font-semibold mb-4\">\n              Esempio di Integrazione\n            </h3>\n            <pre className=\"text-green-400 text-sm overflow-x-auto\">\n              {`<NavigationHeader\n  logo={{ src: \"/logo.png\", alt: \"Logo\" }}\n  links={translatedLinks}\n  languages={{\n    current: currentLang,\n    options: availableLanguages,\n    onChange: handleLanguageChange\n  }}\n  ctaButton={{\n    label: isAuth ? \"Dashboard\" : \"Sign Up\",\n    onClick: handleCta\n  }}\n/>`}\n            </pre>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default AdvancedExample;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\NavigationHeader\\examples\\basic.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[819,856],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":45,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1320,1466],"text":"\n            Questo è un esempio base del NavigationHeader. Scorri la pagina per\n            vedere come l&apos;header rimane fisso in alto.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1320,1466],"text":"\n            Questo è un esempio base del NavigationHeader. Scorri la pagina per\n            vedere come l&lsquo;header rimane fisso in alto.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1320,1466],"text":"\n            Questo è un esempio base del NavigationHeader. Scorri la pagina per\n            vedere come l&#39;header rimane fisso in alto.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1320,1466],"text":"\n            Questo è un esempio base del NavigationHeader. Scorri la pagina per\n            vedere come l&rsquo;header rimane fisso in alto.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":56,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1864,2055],"text":"\n                  Contenuto di esempio per dimostrare lo scroll. L&apos;header\n                  dovrebbe rimanere fisso in alto durante lo scroll della\n                  pagina.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1864,2055],"text":"\n                  Contenuto di esempio per dimostrare lo scroll. L&lsquo;header\n                  dovrebbe rimanere fisso in alto durante lo scroll della\n                  pagina.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1864,2055],"text":"\n                  Contenuto di esempio per dimostrare lo scroll. L&#39;header\n                  dovrebbe rimanere fisso in alto durante lo scroll della\n                  pagina.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1864,2055],"text":"\n                  Contenuto di esempio per dimostrare lo scroll. L&rsquo;header\n                  dovrebbe rimanere fisso in alto durante lo scroll della\n                  pagina.\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Esempio Base - NavigationHeader\n *\n * Questo esempio mostra l'uso più semplice del componente NavigationHeader\n * con le configurazioni minime necessarie.\n */\n\nimport React from 'react';\nimport { NavigationHeader } from '../NavigationHeader';\n\nexport function BasicExample() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader\n        logo={{\n          text: 'MioBrand',\n          alt: 'MioBrand Logo',\n        }}\n        links={[\n          { label: 'Home', href: '/' },\n          { label: 'Prodotti', href: '/prodotti' },\n          { label: 'Servizi', href: '/servizi' },\n          { label: 'Chi Siamo', href: '/chi-siamo' },\n          { label: 'Contatti', href: '/contatti' },\n        ]}\n        ctaButton={{\n          label: 'Inizia Ora',\n          onClick: () => {\n            console.log('Bottone CTA cliccato!');\n            // Qui puoi gestire l'azione, ad esempio:\n            // window.location.href = '/signup';\n          },\n        }}\n      />\n\n      {/* Contenuto della pagina */}\n      <main className=\"pt-16\">\n        {/* pt-16 per compensare l'header fisso */}\n        <div className=\"mx-auto max-w-7xl px-4 py-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Benvenuto!\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Questo è un esempio base del NavigationHeader. Scorri la pagina per\n            vedere come l'header rimane fisso in alto.\n          </p>\n\n          {/* Contenuto aggiuntivo per testare lo scroll */}\n          <div className=\"mt-8 space-y-4\">\n            {Array.from({ length: 20 }).map((_, i) => (\n              <div key={i} className=\"p-6 bg-white rounded-lg shadow\">\n                <h2 className=\"text-xl font-semibold mb-2\">\n                  Sezione {i + 1}\n                </h2>\n                <p className=\"text-gray-600\">\n                  Contenuto di esempio per dimostrare lo scroll. L'header\n                  dovrebbe rimanere fisso in alto durante lo scroll della\n                  pagina.\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default BasicExample;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\NavigationHeader\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Navigation\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\PricingSection\\PricingSection.stories.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":26,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":26,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":26,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { PricingSection } from './PricingSection';\nimport { Check, X } from 'lucide-react';\n\nconst meta: Meta<typeof PricingSection> = {\n  title: 'Sections/PricingSection',\n  component: PricingSection,\n  parameters: {\n    layout: 'fullscreen',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof PricingSection>;\n\nexport const Default: Story = {\n  args: {\n    title: 'Scegli il piano perfetto per te',\n    subtitle: 'Prezzi trasparenti e flessibili, senza costi nascosti',\n    plans: [\n      {\n        name: 'Starter',\n        description: 'Perfetto per iniziare',\n        price: {\n          amount: 29,\n          currency: '€',\n          period: 'mese',\n        },\n        perfectFor: 'Freelancer e piccoli progetti',\n        features: [\n          {\n            text: 'Fino a 5 progetti',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: '10 GB di storage',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Supporto email',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Analytics base',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Supporto prioritario',\n            icon: <X className=\"w-5 h-5\" />,\n            available: false,\n          },\n          {\n            text: 'API avanzate',\n            icon: <X className=\"w-5 h-5\" />,\n            available: false,\n          },\n        ],\n        cta: {\n          label: 'Inizia gratis',\n          onClick: () => console.log('Starter plan selected'),\n        },\n      },\n      {\n        name: 'Professional',\n        description: 'Per team e aziende in crescita',\n        price: {\n          amount: 79,\n          currency: '€',\n          period: 'mese',\n        },\n        badge: {\n          text: 'Più popolare',\n          variant: 'recommended',\n        },\n        highlighted: true,\n        perfectFor: 'Agenzie e team',\n        features: [\n          {\n            text: 'Progetti illimitati',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: '100 GB di storage',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Supporto prioritario 24/7',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Analytics avanzate',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Integrazioni premium',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'White label',\n            icon: <X className=\"w-5 h-5\" />,\n            available: false,\n          },\n        ],\n        cta: {\n          label: 'Inizia ora',\n          onClick: () => console.log('Professional plan selected'),\n        },\n      },\n      {\n        name: 'Enterprise',\n        description: 'Soluzione su misura per grandi aziende',\n        price: {\n          amount: 'Custom',\n          currency: '',\n          period: '',\n        },\n        perfectFor: 'Grandi organizzazioni',\n        features: [\n          {\n            text: 'Tutto del Professional',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Storage illimitato',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'Account manager dedicato',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'White label completo',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'API personalizzate',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n          {\n            text: 'SLA garantito',\n            icon: <Check className=\"w-5 h-5\" />,\n            available: true,\n          },\n        ],\n        cta: {\n          label: 'Contattaci',\n          onClick: () => console.log('Enterprise plan selected'),\n        },\n      },\n    ],\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\PricingSection\\PricingSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PricingSection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { PricingSection } from './PricingSection';\n\ndescribe('PricingSection', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\PricingSection\\PricingSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":55,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":55,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1452,1460],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1452,1460],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1452,1460],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":94,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":94,"endColumn":33,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2956,2972],"text":"(plan.highlighted ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2956,2972],"text":"(plan.highlighted === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":118,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":118,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3837,3852],"text":"(plan.perfectFor != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3837,3852],"text":"(plan.perfectFor ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3837,3852],"text":"(Boolean(plan.perfectFor))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":145,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":145,"endColumn":36,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4966,4983],"text":"(plan.cta.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[4966,4983],"text":"(plan.cta.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":147,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":147,"endColumn":39,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[5075,5091],"text":"(plan.highlighted ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[5075,5091],"text":"(plan.highlighted === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PricingSection Component\n * @component\n */\nimport React from 'react';\nimport type { PricingSectionProps, PricingPlan } from './PricingSection.types';\n\n/**\n * PricingSection - Sezione pricing con piani e toggle mensile/annuale\n *\n * @component\n */\n\nexport const PricingSection: React.FC<PricingSectionProps> = ({\n  title,\n  subtitle,\n  plans,\n  billingToggle,\n  className = '',\n}) => {\n  const [billingPeriod, setBillingPeriod] = React.useState<'monthly' | 'yearly'>('monthly');\n\n  const handleToggle = (period: 'monthly' | 'yearly') => {\n    setBillingPeriod(period);\n    billingToggle?.onToggle?.(period);\n  };\n\n  const getBadgeStyles = (variant: NonNullable<PricingPlan['badge']>['variant']) => {\n    switch (variant) {\n      case 'recommended':\n        return 'bg-blue-600 text-white';\n      case 'coming-soon':\n        return 'bg-gray-400 text-white';\n      case 'popular':\n        return 'bg-purple-600 text-white';\n      default:\n        return 'bg-gray-600 text-white';\n    }\n  };\n\n  return (\n    <section\n      className={`py-20 bg-gray-50 ${className}`}\n      aria-labelledby=\"pricing-title\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-12\">\n          <h2\n            id=\"pricing-title\"\n            className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl md:text-5xl\"\n          >\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"mt-4 text-lg text-gray-600 max-w-3xl mx-auto\">\n              {subtitle}\n            </p>\n          )}\n\n          {/* Billing Toggle */}\n          {billingToggle && (\n            <div className=\"mt-8 inline-flex rounded-lg bg-white p-1 shadow-md\">\n              <button\n                onClick={() => handleToggle('monthly')}\n                className={`px-6 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${\n                  billingPeriod === 'monthly'\n                    ? 'bg-blue-600 text-white'\n                    : 'text-gray-700 hover:text-gray-900'\n                }`}\n              >\n                {billingToggle.monthly}\n              </button>\n              <button\n                onClick={() => handleToggle('yearly')}\n                className={`px-6 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${\n                  billingPeriod === 'yearly'\n                    ? 'bg-blue-600 text-white'\n                    : 'text-gray-700 hover:text-gray-900'\n                }`}\n              >\n                {billingToggle.yearly}\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Pricing Cards Grid */}\n        <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-3 lg:gap-6\">\n          {plans.map((plan, index) => (\n            <div\n              key={index}\n              className={`relative rounded-2xl bg-white p-8 shadow-lg transition-all duration-300 ${\n                plan.highlighted\n                  ? 'ring-2 ring-blue-600 scale-105 lg:scale-110 z-10'\n                  : 'hover:shadow-xl hover:scale-105'\n              }`}\n            >\n              {/* Badge */}\n              {plan.badge && (\n                <div className=\"absolute -top-4 left-1/2 -translate-x-1/2\">\n                  <span\n                    className={`inline-flex items-center rounded-full px-4 py-1 text-xs font-bold uppercase tracking-wider shadow-md ${getBadgeStyles(\n                      plan.badge.variant\n                    )}`}\n                  >\n                    {plan.badge.text}\n                  </span>\n                </div>\n              )}\n\n              {/* Plan Name */}\n              <h3 className=\"text-2xl font-bold text-gray-900 text-center\">\n                {plan.name}\n              </h3>\n\n              {/* Perfect For */}\n              {plan.perfectFor && (\n                <p className=\"mt-2 text-sm text-gray-500 text-center\">\n                  {plan.perfectFor}\n                </p>\n              )}\n\n              {/* Price */}\n              <div className=\"mt-6 text-center\">\n                <div className=\"flex items-baseline justify-center\">\n                  <span className=\"text-5xl font-extrabold text-gray-900\">\n                    {plan.price.currency}\n                    {plan.price.amount}\n                  </span>\n                  <span className=\"ml-2 text-gray-500\">/{plan.price.period}</span>\n                </div>\n              </div>\n\n              {/* Description */}\n              <p className=\"mt-4 text-center text-gray-600 leading-relaxed\">\n                {plan.description}\n              </p>\n\n              {/* CTA Button */}\n              <button\n                onClick={plan.cta.onClick}\n                disabled={plan.cta.disabled}\n                className={`mt-8 w-full rounded-lg px-6 py-3 text-base font-semibold shadow-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n                  plan.cta.disabled\n                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                    : plan.highlighted\n                    ? 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500'\n                    : 'bg-gray-900 text-white hover:bg-gray-800 focus:ring-gray-500'\n                }`}\n              >\n                {plan.cta.label}\n              </button>\n\n              {/* Features List */}\n              <ul className=\"mt-8 space-y-4\">\n                {plan.features.map((feature, featureIndex) => (\n                  <li key={featureIndex} className=\"flex items-start\">\n                    {feature.included ? (\n                      <svg\n                        className=\"h-6 w-6 text-blue-600 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M5 13l4 4L19 7\"\n                        />\n                      </svg>\n                    ) : (\n                      <svg\n                        className=\"h-6 w-6 text-gray-300 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                      </svg>\n                    )}\n                    <span\n                      className={`ml-3 text-sm ${\n                        feature.included ? 'text-gray-700' : 'text-gray-400 line-through'\n                      }`}\n                    >\n                      {feature.text}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PricingSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\PricingSection\\PricingSection.types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * PricingFeature\n * @interface PricingFeature\n */\nexport interface PricingFeature {\n  text: string;\n  included: boolean;\n}\n\n/**\n * PricingPlan\n * @interface PricingPlan\n */\nexport interface PricingPlan {\n  name: string;\n  description: string;\n  price: {\n    amount: number | string;\n    currency: string;\n    period: string;\n  };\n  badge?: {\n    text: string;\n    variant: 'recommended' | 'coming-soon' | 'popular';\n  };\n  features: PricingFeature[];\n  cta: {\n    label: string;\n    onClick?: () => void;\n    disabled?: boolean;\n  };\n  highlighted?: boolean;\n  perfectFor?: string;\n}\n\n/**\n * PricingSectionProps\n * @interface PricingSectionProps\n */\nexport interface PricingSectionProps {\n  title: string;\n  subtitle?: string;\n  plans: PricingPlan[];\n  billingToggle?: {\n    monthly: string;\n    yearly: string;\n    onToggle?: (period: 'monthly' | 'yearly') => void;\n  };\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\PricingSection\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\PricingSection\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\PricingSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\Pricing\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\ClientLogosSection\\ClientLogosSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\ClientLogosSection\\ClientLogosSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClientLogosSection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { ClientLogosSection } from './ClientLogosSection';\n\ndescribe('ClientLogosSection', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\ClientLogosSection\\ClientLogosSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":46,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":46,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1109,1129],"text":"animationRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1109,1129],"text":"animationRef.current ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1109,1129],"text":"Boolean(animationRef.current)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":62,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1573,1578],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1573,1578],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1573,1578],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":62,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1582,1590],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1582,1590],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1582,1590],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":64,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":64,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1656,1661],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1656,1661],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1656,1661],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":69,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":69,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1830,1838],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1830,1838],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1830,1838],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":85,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":85,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2286,2306],"text":"animationRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2286,2306],"text":"animationRef.current ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2286,2306],"text":"Boolean(animationRef.current)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":113,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":113,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3300,3310],"text":"(client.url != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3300,3310],"text":"(client.url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3300,3310],"text":"(Boolean(client.url))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ClientLogosSection Component\n * @component\n */\nimport React, { useRef, useEffect } from 'react';\nimport type { ClientLogosSectionProps } from './ClientLogosSection.types';\n\n/**\n * ClientLogosSection - Carosello infinito di loghi clienti\n *\n * @component\n */\n\nexport const ClientLogosSection: React.FC<ClientLogosSectionProps> = ({\n  title,\n  subtitle,\n  logos,\n  autoScroll = true,\n  scrollSpeed = 1,\n  className = '',\n}) => {\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const animationRef = useRef<number>();\n\n  useEffect(() => {\n    if (!autoScroll || !scrollRef.current) return;\n\n    const scroll = () => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollLeft += scrollSpeed;\n\n        // Reset scroll when reaching end\n        if (\n          scrollRef.current.scrollLeft >=\n          scrollRef.current.scrollWidth - scrollRef.current.clientWidth\n        ) {\n          scrollRef.current.scrollLeft = 0;\n        }\n      }\n      animationRef.current = requestAnimationFrame(scroll);\n    };\n\n    animationRef.current = requestAnimationFrame(scroll);\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [autoScroll, scrollSpeed]);\n\n  // Duplicate logos for infinite scroll effect\n  const duplicatedLogos = [...logos, ...logos, ...logos];\n\n  return (\n    <section\n      className={`py-16 bg-gray-50 overflow-hidden ${className}`}\n      aria-label=\"Client logos\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        {(title || subtitle) && (\n          <div className=\"text-center mb-12\">\n            {title && (\n              <h2 className=\"text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl\">\n                {title}\n              </h2>\n            )}\n            {subtitle && (\n              <p className=\"mt-2 text-base text-gray-600 max-w-2xl mx-auto\">\n                {subtitle}\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* Logos Carousel */}\n        <div\n          ref={scrollRef}\n          className=\"flex gap-12 overflow-x-auto scrollbar-hide\"\n          style={{\n            scrollBehavior: autoScroll ? 'auto' : 'smooth',\n          }}\n          onMouseEnter={() => {\n            if (animationRef.current) {\n              cancelAnimationFrame(animationRef.current);\n            }\n          }}\n          onMouseLeave={() => {\n            if (autoScroll && scrollRef.current) {\n              const scroll = () => {\n                if (scrollRef.current) {\n                  scrollRef.current.scrollLeft += scrollSpeed;\n\n                  if (\n                    scrollRef.current.scrollLeft >=\n                    scrollRef.current.scrollWidth - scrollRef.current.clientWidth\n                  ) {\n                    scrollRef.current.scrollLeft = 0;\n                  }\n                }\n                animationRef.current = requestAnimationFrame(scroll);\n              };\n              animationRef.current = requestAnimationFrame(scroll);\n            }\n          }}\n        >\n          {duplicatedLogos.map((client, index) => (\n            <div\n              key={`${client.name}-${index}`}\n              className=\"flex-shrink-0 flex items-center justify-center\"\n            >\n              {client.url ? (\n                <a\n                  href={client.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group block\"\n                >\n                  <img\n                    src={client.logo}\n                    alt={`${client.name} logo`}\n                    className=\"h-12 w-auto object-contain grayscale hover:grayscale-0 opacity-60 hover:opacity-100 transition-all duration-300 group-hover:scale-110\"\n                  />\n                </a>\n              ) : (\n                <img\n                  src={client.logo}\n                  alt={`${client.name} logo`}\n                  className=\"h-12 w-auto object-contain grayscale hover:grayscale-0 opacity-60 hover:opacity-100 transition-all duration-300\"\n                />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Fade edges */}\n        <div className=\"relative -mt-16 pointer-events-none\">\n          <div className=\"absolute left-0 top-0 bottom-0 w-24 bg-gradient-to-r from-gray-50 to-transparent\" />\n          <div className=\"absolute right-0 top-0 bottom-0 w-24 bg-gradient-to-l from-gray-50 to-transparent\" />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ClientLogosSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\ClientLogosSection\\ClientLogosSection.types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * ClientLogo\n * @interface ClientLogo\n */\nexport interface ClientLogo {\n  name: string;\n  logo: string;\n  url?: string;\n}\n\n/**\n * ClientLogosSectionProps\n * @interface ClientLogosSectionProps\n */\nexport interface ClientLogosSectionProps {\n  title?: string;\n  subtitle?: string;\n  logos: ClientLogo[];\n  autoScroll?: boolean;\n  scrollSpeed?: number;\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\ClientLogosSection\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\ClientLogosSection\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\ClientLogosSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\TestimonialsSection\\TestimonialsSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\TestimonialsSection\\TestimonialsSection.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TestimonialsSection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { TestimonialsSection } from './TestimonialsSection';\n\ndescribe('TestimonialsSection', () => {\n  it('dovrebbe renderizzare correttamente', () => {\n    // TODO: Add test implementation\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\TestimonialsSection\\TestimonialsSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":62,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1822,1830],"text":"(subtitle != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1822,1830],"text":"(subtitle ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1822,1830],"text":"(Boolean(subtitle))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":87,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2912,2930],"text":"\n                &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2912,2930],"text":"\n                &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2912,2930],"text":"\n                &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2912,2930],"text":"\n                &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":87,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2956,2972],"text":"&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2956,2972],"text":"&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2956,2972],"text":"&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2956,2972],"text":"&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":116,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":116,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4279,4303],"text":"(currentTestimonial.image != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4279,4303],"text":"(currentTestimonial.image ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4279,4303],"text":"(Boolean(currentTestimonial.image))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":123,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":123,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4570,4595],"text":"(currentTestimonial.image == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4571,4595],"text":"(currentTestimonial.image ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4570,4595],"text":"(!Boolean(currentTestimonial.image))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport type { TestimonialsSectionProps } from './TestimonialsSection.types';\n\n/**\n * TestimonialsSection - Carosello testimonials con autoplay\n *\n * Componente per mostrare testimonials dei clienti in un carosello\n * animato con navigazione, autoplay e rating a stelle.\n *\n * @component\n */\n\nexport const TestimonialsSection: React.FC<TestimonialsSectionProps> = ({\n  title,\n  subtitle,\n  testimonials,\n  autoplay = true,\n  autoplayDelay = 5000,\n  className = '',\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n\n  useEffect(() => {\n    if (!autoplay || isPaused || testimonials.length <= 1) return;\n\n    const interval = setInterval(() => {\n      setCurrentIndex((prev) => (prev + 1) % testimonials.length);\n    }, autoplayDelay);\n\n    return () => clearInterval(interval);\n  }, [autoplay, autoplayDelay, isPaused, testimonials.length]);\n\n  const goToSlide = (index: number) => {\n    setCurrentIndex(index);\n  };\n\n  const goToPrevious = () => {\n    setCurrentIndex((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n  };\n\n  const goToNext = () => {\n    setCurrentIndex((prev) => (prev + 1) % testimonials.length);\n  };\n\n  const currentTestimonial = testimonials[currentIndex];\n\n  return (\n    <section\n      className={`py-20 bg-gradient-to-br from-blue-50 via-white to-purple-50 ${className}`}\n      aria-labelledby=\"testimonials-title\"\n    >\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2\n            id=\"testimonials-title\"\n            className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl md:text-5xl\"\n          >\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"mt-4 text-lg text-gray-600 max-w-3xl mx-auto\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n\n        {/* Carousel Container */}\n        <div className=\"relative max-w-4xl mx-auto\">\n          {/* Main Testimonial Card */}\n          <div className=\"rounded-3xl bg-white p-8 md:p-12 shadow-2xl border border-gray-100\">\n            {/* Quote Icon */}\n            <div className=\"flex justify-center mb-6\">\n              <svg\n                className=\"h-12 w-12 text-blue-600 opacity-20\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path d=\"M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h3.983v10h-9.983z\" />\n              </svg>\n            </div>\n\n            {/* Quote */}\n            <blockquote className=\"text-center mb-8\">\n              <p className=\"text-xl md:text-2xl text-gray-800 leading-relaxed italic\">\n                \"{currentTestimonial.quote}\"\n              </p>\n            </blockquote>\n\n            {/* Rating */}\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"flex items-center space-x-1\">\n                {Array.from({ length: 5 }).map((_, index) => (\n                  <svg\n                    key={index}\n                    className={`h-5 w-5 ${\n                      index < currentTestimonial.rating\n                        ? 'text-yellow-400'\n                        : 'text-gray-300'\n                    }`}\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                  </svg>\n                ))}\n                <span className=\"ml-2 text-gray-600 font-medium\">\n                  {currentTestimonial.rating}/5\n                </span>\n              </div>\n            </div>\n\n            {/* Author Info */}\n            <div className=\"flex flex-col items-center\">\n              {currentTestimonial.image && (\n                <img\n                  src={currentTestimonial.image}\n                  alt={currentTestimonial.name}\n                  className=\"h-16 w-16 rounded-full object-cover mb-4 ring-4 ring-blue-100\"\n                />\n              )}\n              {!currentTestimonial.image && (\n                <div className=\"h-16 w-16 rounded-full bg-blue-600 flex items-center justify-center mb-4 ring-4 ring-blue-100\">\n                  <span className=\"text-white text-xl font-bold\">\n                    {currentTestimonial.name.charAt(0)}\n                  </span>\n                </div>\n              )}\n              <h3 className=\"text-lg font-bold text-gray-900\">\n                {currentTestimonial.name}\n              </h3>\n              <p className=\"text-sm text-gray-600\">\n                {currentTestimonial.role}\n              </p>\n              <p className=\"text-sm text-blue-600 font-medium\">\n                {currentTestimonial.company}\n              </p>\n            </div>\n          </div>\n\n          {/* Navigation Controls */}\n          <div className=\"flex items-center justify-center mt-8 space-x-4\">\n            {/* Previous Button */}\n            <button\n              onClick={goToPrevious}\n              className=\"rounded-full bg-white p-3 shadow-lg hover:bg-gray-50 hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              aria-label=\"Previous testimonial\"\n            >\n              <svg\n                className=\"h-6 w-6 text-gray-700\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M15 19l-7-7 7-7\"\n                />\n              </svg>\n            </button>\n\n            {/* Dot Indicators */}\n            <div className=\"flex space-x-2\">\n              {testimonials.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => goToSlide(index)}\n                  className={`h-2.5 rounded-full transition-all duration-300 ${\n                    index === currentIndex\n                      ? 'w-8 bg-blue-600'\n                      : 'w-2.5 bg-gray-300 hover:bg-gray-400'\n                  }`}\n                  aria-label={`Go to testimonial ${index + 1}`}\n                  aria-current={index === currentIndex}\n                />\n              ))}\n            </div>\n\n            {/* Next Button */}\n            <button\n              onClick={goToNext}\n              className=\"rounded-full bg-white p-3 shadow-lg hover:bg-gray-50 hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              aria-label=\"Next testimonial\"\n            >\n              <svg\n                className=\"h-6 w-6 text-gray-700\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 5l7 7-7 7\"\n                />\n              </svg>\n            </button>\n\n            {/* Pause/Play Button */}\n            {autoplay && (\n              <button\n                onClick={() => setIsPaused(!isPaused)}\n                className=\"rounded-full bg-white p-3 shadow-lg hover:bg-gray-50 hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                aria-label={isPaused ? 'Play' : 'Pause'}\n              >\n                {isPaused ? (\n                  <svg\n                    className=\"h-6 w-6 text-gray-700\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M8 5v14l11-7z\" />\n                  </svg>\n                ) : (\n                  <svg\n                    className=\"h-6 w-6 text-gray-700\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M6 4h4v16H6V4zm8 0h4v16h-4V4z\" />\n                  </svg>\n                )}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default TestimonialsSection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\TestimonialsSection\\TestimonialsSection.types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Testimonial\n * @interface Testimonial\n */\nexport interface Testimonial {\n  name: string;\n  role: string;\n  company: string;\n  image?: string;\n  quote: string;\n  rating: number;\n}\n\n/**\n * TestimonialsSectionProps\n * @interface TestimonialsSectionProps\n */\nexport interface TestimonialsSectionProps {\n  title: string;\n  subtitle?: string;\n  testimonials: Testimonial[];\n  autoplay?: boolean;\n  autoplayDelay?: number;\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\TestimonialsSection\\examples\\advanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\TestimonialsSection\\examples\\basic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\TestimonialsSection\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\SocialProof\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\complete-migration.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'path' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'originalFiles' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":5,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[595,645],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[646,689],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs');\nconst path = require('path');\n\n// Read original component files\nconst originalFiles = {\n  Features: fs.readFileSync('FeaturesSection.tsx', 'utf8'),\n  Benefits: fs.readFileSync('BenefitsSection.tsx', 'utf8'),\n  Pricing: fs.readFileSync('PricingSection.tsx', 'utf8'),\n  Roadmap: fs.readFileSync('RoadmapSection.tsx', 'utf8'),\n  Testimonials: fs.readFileSync('TestimonialsSection.tsx', 'utf8'),\n  ClientLogos: fs.readFileSync('ClientLogosSection.tsx', 'utf8'),\n  Contact: fs.readFileSync('ContactSection.tsx', 'utf8'),\n  Footer: fs.readFileSync('Footer.tsx', 'utf8'),\n};\n\nconsole.log('Original files loaded successfully');\nconsole.log('Ready to migrate components');\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\generate-components.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fs' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":9},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'path' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":7,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":7,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[184,234],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[235,288],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs');\nconst path = require('path');\n\n// This script will be used to generate the remaining files\n// Due to token limits, I'll create the most critical files first\n\nconsole.log(\"Component generator script created\");\nconsole.log(\"Run with: node generate-components.js\");\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\sections\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Avatar\\Avatar.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":59,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":59,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1298,1303],"text":"name == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1299,1303],"text":"(name ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1298,1303],"text":"!Boolean(name)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":69,"column":11,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":69,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":72,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1618,1622],"text":"name != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1618,1622],"text":"name ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1618,1622],"text":"Boolean(name)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":92,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":92,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2263,2266],"text":"(src != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2263,2266],"text":"(src ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2263,2266],"text":"(Boolean(src))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":95,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":95,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2347,2350],"text":"(src != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2347,2350],"text":"(src ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2347,2350],"text":"(Boolean(src))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":114,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":114,"endColumn":19,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2844,2853],"text":"(showBadge ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2844,2853],"text":"(showBadge === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":123,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":123,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3159,3171],"text":"(badgeContent != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3159,3171],"text":"(badgeContent ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3159,3171],"text":"(Boolean(badgeContent))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { AvatarProps, AvatarGroupProps } from './Avatar.types';\n\n/**\n * Avatar - Componente avatar con status, badge e fallback\n */\nexport const Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(\n  (\n    {\n      src,\n      alt,\n      name,\n      size = 'md',\n      status,\n      showBadge,\n      badgeContent,\n      fallbackIcon,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const sizeClasses = {\n      xs: 'h-6 w-6 text-xs',\n      sm: 'h-8 w-8 text-sm',\n      md: 'h-12 w-12 text-base',\n      lg: 'h-16 w-16 text-lg',\n      xl: 'h-20 w-20 text-xl',\n      '2xl': 'h-24 w-24 text-2xl',\n    };\n\n    const statusSizeClasses = {\n      xs: 'h-1.5 w-1.5',\n      sm: 'h-2 w-2',\n      md: 'h-3 w-3',\n      lg: 'h-3.5 w-3.5',\n      xl: 'h-4 w-4',\n      '2xl': 'h-5 w-5',\n    };\n\n    const statusColorClasses = {\n      online: 'bg-green-500',\n      offline: 'bg-gray-400',\n      busy: 'bg-red-500',\n      away: 'bg-yellow-500',\n    };\n\n    const badgeSizeClasses = {\n      xs: 'h-3 w-3 text-[8px]',\n      sm: 'h-4 w-4 text-[10px]',\n      md: 'h-5 w-5 text-xs',\n      lg: 'h-6 w-6 text-sm',\n      xl: 'h-7 w-7 text-sm',\n      '2xl': 'h-8 w-8 text-base',\n    };\n\n    const getInitials = (name?: string) => {\n      if (!name) return '?';\n      return name\n        .split(' ')\n        .map((n) => n[0])\n        .join('')\n        .toUpperCase()\n        .slice(0, 2);\n    };\n\n    const renderFallback = () => {\n      if (fallbackIcon) {\n        return <div className=\"flex items-center justify-center\">{fallbackIcon}</div>;\n      }\n      if (name) {\n        return getInitials(name);\n      }\n      return (\n        <svg\n          className=\"h-full w-full text-gray-400\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z\" />\n        </svg>\n      );\n    };\n\n    return (\n      <div ref={ref} className={cn('relative inline-block', className)} {...props}>\n        <div\n          className={cn(\n            'rounded-full flex items-center justify-center font-semibold overflow-hidden',\n            sizeClasses[size],\n            src ? 'bg-transparent' : 'bg-blue-600 text-white'\n          )}\n        >\n          {src ? (\n            <img src={src} alt={alt} className=\"h-full w-full object-cover\" />\n          ) : (\n            renderFallback()\n          )}\n        </div>\n\n        {/* Status indicator */}\n        {status && (\n          <span\n            className={cn(\n              'absolute bottom-0 right-0 rounded-full border-2 border-white',\n              statusSizeClasses[size],\n              statusColorClasses[status]\n            )}\n          />\n        )}\n\n        {/* Badge indicator */}\n        {showBadge && (\n          <span\n            className={cn(\n              'absolute -top-1 -right-1 rounded-full bg-red-500 text-white',\n              'flex items-center justify-center font-semibold',\n              'border-2 border-white',\n              badgeSizeClasses[size]\n            )}\n          >\n            {badgeContent && badgeContent > 0 ? (badgeContent > 99 ? '99+' : badgeContent) : ''}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nAvatar.displayName = 'Avatar';\n\n/**\n * AvatarGroup - Componente per mostrare multipli avatar sovrapposti\n */\nexport const AvatarGroup: React.FC<AvatarGroupProps> = ({\n  children,\n  max = 5,\n  size = 'md',\n  className,\n}) => {\n  const avatars = React.Children.toArray(children);\n  const displayedAvatars = avatars.slice(0, max);\n  const remainingCount = Math.max(avatars.length - max, 0);\n\n  const spacingClasses = {\n    xs: '-space-x-2',\n    sm: '-space-x-3',\n    md: '-space-x-4',\n    lg: '-space-x-5',\n    xl: '-space-x-6',\n    '2xl': '-space-x-7',\n  };\n\n  return (\n    <div className={cn('flex items-center', spacingClasses[size], className)}>\n      {displayedAvatars.map((avatar, index) => {\n        if (React.isValidElement<AvatarProps>(avatar)) {\n          return React.cloneElement(avatar, {\n            key: index,\n            size: avatar.props.size || size,\n            className: cn(\n              'ring-2 ring-white',\n              avatar.props.className\n            ),\n          });\n        }\n        return avatar;\n      })}\n\n      {remainingCount > 0 && (\n        <Avatar\n          size={size}\n          name={`+${remainingCount}`}\n          className=\"ring-2 ring-white\"\n        />\n      )}\n    </div>\n  );\n};\n\nAvatarGroup.displayName = 'AvatarGroup';\n\nexport default Avatar;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Avatar\\Avatar.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Dimensioni dell'avatar\n */\nexport type AvatarSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n\n/**\n * Status indicator per l'avatar\n */\nexport type AvatarStatus = 'online' | 'offline' | 'busy' | 'away';\n\n/**\n * Props per il componente Avatar\n * @interface AvatarProps\n */\nexport interface AvatarProps {\n  /** URL dell'immagine avatar */\n  src?: string;\n  /** Testo alternativo per l'immagine */\n  alt?: string;\n  /** Nome dell'utente (usato per generare iniziali se manca src) */\n  name?: string;\n  /** Dimensione dell'avatar */\n  size?: AvatarSize;\n  /** Status indicator (online/offline/busy/away) */\n  status?: AvatarStatus;\n  /** Se true, mostra un badge di notifica */\n  showBadge?: boolean;\n  /** Numero da mostrare nel badge (es. notifiche) */\n  badgeContent?: number;\n  /** Icona fallback quando mancano sia src che name */\n  fallbackIcon?: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n\n/**\n * Props per il componente AvatarGroup\n * @interface AvatarGroupProps\n */\nexport interface AvatarGroupProps {\n  /** Avatars da mostrare nel gruppo */\n  children: React.ReactNode;\n  /** Numero massimo di avatar da mostrare */\n  max?: number;\n  /** Dimensione degli avatar nel gruppo */\n  size?: AvatarSize;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Avatar\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Badge\\Badge.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":98,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":98,"endColumn":14},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":102,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":102,"endColumn":18,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2663,2671],"text":"(closable ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2663,2671],"text":"(closable === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { BadgeProps } from './Badge.types';\n\n/**\n * Badge - Componente badge/pill per etichette e status\n */\nexport const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(\n  (\n    {\n      children,\n      variant = 'default',\n      size = 'md',\n      style = 'solid',\n      icon,\n      closable,\n      onClose,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const variantClasses = {\n      default: {\n        solid: 'bg-gray-100 text-gray-800',\n        outline: 'border-2 border-gray-300 text-gray-700 bg-transparent',\n        dot: 'bg-transparent text-gray-700',\n      },\n      primary: {\n        solid: 'bg-blue-100 text-blue-800',\n        outline: 'border-2 border-blue-300 text-blue-700 bg-transparent',\n        dot: 'bg-transparent text-blue-700',\n      },\n      success: {\n        solid: 'bg-green-100 text-green-800',\n        outline: 'border-2 border-green-300 text-green-700 bg-transparent',\n        dot: 'bg-transparent text-green-700',\n      },\n      danger: {\n        solid: 'bg-red-100 text-red-800',\n        outline: 'border-2 border-red-300 text-red-700 bg-transparent',\n        dot: 'bg-transparent text-red-700',\n      },\n      warning: {\n        solid: 'bg-yellow-100 text-yellow-800',\n        outline: 'border-2 border-yellow-300 text-yellow-700 bg-transparent',\n        dot: 'bg-transparent text-yellow-700',\n      },\n      info: {\n        solid: 'bg-cyan-100 text-cyan-800',\n        outline: 'border-2 border-cyan-300 text-cyan-700 bg-transparent',\n        dot: 'bg-transparent text-cyan-700',\n      },\n    };\n\n    const sizeClasses = {\n      sm: 'px-2 py-0.5 text-xs',\n      md: 'px-3 py-1 text-sm',\n      lg: 'px-4 py-1.5 text-base',\n    };\n\n    const dotColorClasses = {\n      default: 'bg-gray-500',\n      primary: 'bg-blue-500',\n      success: 'bg-green-500',\n      danger: 'bg-red-500',\n      warning: 'bg-yellow-500',\n      info: 'bg-cyan-500',\n    };\n\n    const dotSizeClasses = {\n      sm: 'h-1.5 w-1.5',\n      md: 'h-2 w-2',\n      lg: 'h-2.5 w-2.5',\n    };\n\n    return (\n      <span\n        ref={ref}\n        className={cn(\n          'inline-flex items-center rounded-full font-medium transition-colors',\n          variantClasses[variant][style],\n          sizeClasses[size],\n          className\n        )}\n        {...props}\n      >\n        {style === 'dot' && (\n          <span\n            className={cn(\n              'rounded-full mr-1.5',\n              dotSizeClasses[size],\n              dotColorClasses[variant]\n            )}\n          />\n        )}\n\n        {icon && <span className=\"mr-1\">{icon}</span>}\n\n        {children}\n\n        {closable && onClose && (\n          <button\n            type=\"button\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onClose();\n            }}\n            className=\"ml-1 hover:opacity-70 transition-opacity\"\n            aria-label=\"Close\"\n          >\n            <svg\n              className=\"h-3 w-3\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        )}\n      </span>\n    );\n  }\n);\n\nBadge.displayName = 'Badge';\n\nexport default Badge;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Badge\\Badge.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Varianti visuali del badge\n */\nexport type BadgeVariant =\n  | 'default'   // Grigio - uso generale\n  | 'primary'   // Blu - badge primario\n  | 'success'   // Verde - stati positivi\n  | 'danger'    // Rosso - errori/avvisi critici\n  | 'warning'   // Giallo - avvertimenti\n  | 'info';     // Azzurro - informazioni\n\n/**\n * Dimensioni del badge\n */\nexport type BadgeSize = 'sm' | 'md' | 'lg';\n\n/**\n * Stile del badge\n */\nexport type BadgeStyle = 'solid' | 'outline' | 'dot';\n\n/**\n * Props per il componente Badge\n * @interface BadgeProps\n */\nexport interface BadgeProps {\n  /** Contenuto del badge */\n  children: React.ReactNode;\n  /** Variante visuale del badge */\n  variant?: BadgeVariant;\n  /** Dimensione del badge */\n  size?: BadgeSize;\n  /** Stile del badge (solid/outline/dot) */\n  style?: BadgeStyle;\n  /** Icona da mostrare nel badge */\n  icon?: React.ReactNode;\n  /** Se true, mostra un bottone per rimuovere il badge */\n  closable?: boolean;\n  /** Callback chiamata quando il badge viene chiuso */\n  onClose?: () => void;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Badge\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ButtonShimmer\\ButtonShimmer.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ButtonShimmer\\ButtonShimmer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'shimmerColor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { ButtonShimmerProps } from './ButtonShimmer.types';\n\n/**\n * ButtonShimmer Component\n *\n * Button with animated shimmer effect that moves across the button.\n * Creates an eye-catching, premium look for CTAs.\n *\n * @example\n * ```tsx\n * <ButtonShimmer onClick={() => console.log('clicked')}>\n *   Get Started\n * </ButtonShimmer>\n * ```\n */\nexport const ButtonShimmer: React.FC<ButtonShimmerProps> = ({\n  children,\n  className,\n  shimmerColor = 'rgba(255, 255, 255, 0.5)',\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative inline-flex h-12 overflow-hidden rounded-lg p-[1px] focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50',\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute inset-[-1000%] animate-shimmer bg-[conic-gradient(from_90deg_at_50%_50%,#E2CBFF_0%,#393BB2_50%,#E2CBFF_100%)]\" />\n      <span className=\"inline-flex h-full w-full cursor-pointer items-center justify-center rounded-lg bg-slate-950 px-6 py-1 text-sm font-medium text-white backdrop-blur-3xl transition-colors hover:bg-slate-900\">\n        {children}\n      </span>\n    </button>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ButtonShimmer\\ButtonShimmer.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ButtonShimmer\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Button\\Button.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":123,"column":19,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":123,"endColumn":27,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3760,3768],"text":"(disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3760,3768],"text":"(disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":125,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":125,"endColumn":32,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3832,3840],"text":"(disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3832,3840],"text":"(disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":129,"column":22,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":129,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":133,"column":22,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":133,"endColumn":31}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { ButtonProps } from './Button.types';\n\n/**\n * Button - Componente bottone versatile e accessibile\n *\n * Componente bottone completamente personalizzabile con:\n * - 7 varianti visuali (primary, secondary, success, danger, warning, ghost, link)\n * - 5 dimensioni (xs, sm, md, lg, xl)\n * - Stato di caricamento con spinner\n * - Supporto per icone (sinistra/destra)\n * - Full width e rounded variants\n * - Completamente accessibile (ARIA, keyboard navigation)\n *\n * @example\n * ```tsx\n * <Button variant=\"primary\" size=\"md\" onClick={() => console.log('clicked')}>\n *   Click me\n * </Button>\n * ```\n */\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      variant = 'primary',\n      size = 'md',\n      fullWidth = false,\n      loading = false,\n      leftIcon,\n      rightIcon,\n      rounded = false,\n      disabled,\n      className = '',\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    // Classi base\n    const baseClasses =\n      'inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';\n\n    // Classi per varianti\n    const variantClasses = {\n      primary:\n        'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800 focus:ring-blue-500 shadow-md hover:shadow-lg',\n      secondary:\n        'border-2 border-blue-600 text-blue-600 hover:bg-blue-50 active:bg-blue-100 focus:ring-blue-500',\n      success:\n        'bg-green-600 text-white hover:bg-green-700 active:bg-green-800 focus:ring-green-500 shadow-md hover:shadow-lg',\n      danger:\n        'bg-red-600 text-white hover:bg-red-700 active:bg-red-800 focus:ring-red-500 shadow-md hover:shadow-lg',\n      warning:\n        'bg-yellow-500 text-white hover:bg-yellow-600 active:bg-yellow-700 focus:ring-yellow-500 shadow-md hover:shadow-lg',\n      ghost:\n        'bg-transparent text-gray-700 hover:bg-gray-100 active:bg-gray-200 focus:ring-gray-500',\n      link: 'bg-transparent text-blue-600 hover:text-blue-700 underline-offset-4 hover:underline focus:ring-blue-500 p-0',\n    };\n\n    // Classi per dimensioni\n    const sizeClasses = {\n      xs: 'text-xs px-3 py-1 gap-1',\n      sm: 'text-sm px-4 py-2 gap-2',\n      md: 'text-base px-6 py-2.5 gap-2',\n      lg: 'text-lg px-8 py-3 gap-3',\n      xl: 'text-xl px-10 py-4 gap-3',\n    };\n\n    // Classi per border radius\n    const radiusClasses = rounded ? 'rounded-full' : 'rounded-lg';\n\n    // Classi per full width\n    const widthClasses = fullWidth ? 'w-full' : '';\n\n    // Combina tutte le classi\n    const buttonClasses = [\n      baseClasses,\n      variantClasses[variant],\n      variant !== 'link' ? sizeClasses[size] : '',\n      variant !== 'link' ? radiusClasses : '',\n      widthClasses,\n      className,\n    ]\n      .filter(Boolean)\n      .join(' ');\n\n    // Dimensioni icone basate sulla size\n    const iconSizeClasses = {\n      xs: 'w-3 h-3',\n      sm: 'w-4 h-4',\n      md: 'w-5 h-5',\n      lg: 'w-6 h-6',\n      xl: 'w-7 h-7',\n    };\n\n    // Spinner di caricamento\n    const LoadingSpinner = () => (\n      <svg\n        className={`animate-spin ${iconSizeClasses[size]}`}\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <circle\n          className=\"opacity-25\"\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          stroke=\"currentColor\"\n          strokeWidth=\"4\"\n        />\n        <path\n          className=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n    );\n\n    return (\n      <button\n        ref={ref}\n        className={buttonClasses}\n        disabled={disabled || loading}\n        aria-busy={loading}\n        aria-disabled={disabled || loading}\n        {...props}\n      >\n        {loading && <LoadingSpinner />}\n        {!loading && leftIcon && (\n          <span className={iconSizeClasses[size]}>{leftIcon}</span>\n        )}\n        <span>{children}</span>\n        {!loading && rightIcon && (\n          <span className={iconSizeClasses[size]}>{rightIcon}</span>\n        )}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport default Button;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Button\\Button.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Varianti visuali del bottone\n */\nexport type ButtonVariant =\n  | 'primary'      // Blu solido - azione principale\n  | 'secondary'    // Bordo blu - azione secondaria\n  | 'success'      // Verde - azioni positive\n  | 'danger'       // Rosso - azioni distruttive\n  | 'warning'      // Giallo - avvisi\n  | 'ghost'        // Trasparente - azioni subtle\n  | 'link';        // Stile link - navigazione\n\n/**\n * Dimensioni del bottone\n */\nexport type ButtonSize =\n  | 'xs'    // Extra small - 24px height\n  | 'sm'    // Small - 32px height\n  | 'md'    // Medium - 40px height (default)\n  | 'lg'    // Large - 48px height\n  | 'xl';   // Extra large - 56px height\n\n/**\n * Props per il componente Button\n * @interface ButtonProps\n */\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Variante visuale del bottone */\n  variant?: ButtonVariant;\n  /** Dimensione del bottone */\n  size?: ButtonSize;\n  /** Se true, il bottone occupa tutta la larghezza disponibile */\n  fullWidth?: boolean;\n  /** Se true, mostra uno stato di caricamento con spinner */\n  loading?: boolean;\n  /** Icona da mostrare a sinistra del testo */\n  leftIcon?: React.ReactNode;\n  /** Icona da mostrare a destra del testo */\n  rightIcon?: React.ReactNode;\n  /** Se true, il bottone ha bordi arrotondati completi (pill shape) */\n  rounded?: boolean;\n  /** Callback eseguita al click (eredita da HTMLButtonElement) */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Contenuto del bottone */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Button\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card3D\\Card3D.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":24,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[602,687],"text":"\n        Muovi il mouse sopra questa card per vedere l&apos;effetto 3D interattivo!\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[602,687],"text":"\n        Muovi il mouse sopra questa card per vedere l&lsquo;effetto 3D interattivo!\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[602,687],"text":"\n        Muovi il mouse sopra questa card per vedere l&#39;effetto 3D interattivo!\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[602,687],"text":"\n        Muovi il mouse sopra questa card per vedere l&rsquo;effetto 3D interattivo!\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":53,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1721,1769],"text":"Performance ottimizzate per un&apos;esperienza fluida"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1721,1769],"text":"Performance ottimizzate per un&lsquo;esperienza fluida"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1721,1769],"text":"Performance ottimizzate per un&#39;esperienza fluida"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1721,1769],"text":"Performance ottimizzate per un&rsquo;esperienza fluida"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { Card3D } from './Card3D';\nimport { Sparkles, Zap, Shield } from 'lucide-react';\n\nconst meta: Meta<typeof Card3D> = {\n  title: 'UI/Card3D',\n  component: Card3D,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Card3D>;\n\nexport const Default: Story = {\n  render: () => (\n    <Card3D className=\"bg-white rounded-xl shadow-2xl p-8 w-80\">\n      <h3 className=\"text-2xl font-bold mb-4 text-gray-900\">\n        Card 3D Effect\n      </h3>\n      <p className=\"text-gray-600\">\n        Muovi il mouse sopra questa card per vedere l'effetto 3D interattivo!\n      </p>\n    </Card3D>\n  ),\n};\n\nexport const GradientCard: Story = {\n  render: () => (\n    <Card3D className=\"bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl shadow-2xl p-8 w-80\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <Sparkles className=\"w-8 h-8 text-white\" />\n        <h3 className=\"text-2xl font-bold text-white\">Premium Feature</h3>\n      </div>\n      <p className=\"text-white/90\">\n        Effetto tilt 3D con gradiente colorato per un look premium\n      </p>\n    </Card3D>\n  ),\n};\n\nexport const FeatureCards: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-8\">\n      <Card3D className=\"bg-white rounded-xl shadow-lg p-6\">\n        <div className=\"flex flex-col items-center text-center\">\n          <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n            <Zap className=\"w-6 h-6 text-blue-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2\">Velocità</h3>\n          <p className=\"text-gray-600\">Performance ottimizzate per un'esperienza fluida</p>\n        </div>\n      </Card3D>\n\n      <Card3D className=\"bg-white rounded-xl shadow-lg p-6\">\n        <div className=\"flex flex-col items-center text-center\">\n          <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-4\">\n            <Sparkles className=\"w-6 h-6 text-purple-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2\">Design</h3>\n          <p className=\"text-gray-600\">Interfaccia moderna e intuitiva</p>\n        </div>\n      </Card3D>\n\n      <Card3D className=\"bg-white rounded-xl shadow-lg p-6\">\n        <div className=\"flex flex-col items-center text-center\">\n          <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n            <Shield className=\"w-6 h-6 text-green-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2\">Sicurezza</h3>\n          <p className=\"text-gray-600\">Protezione avanzata dei tuoi dati</p>\n        </div>\n      </Card3D>\n    </div>\n  ),\n};\n\nexport const DarkCard: Story = {\n  render: () => (\n    <div className=\"bg-slate-900 p-12\">\n      <Card3D className=\"bg-slate-800 border border-slate-700 rounded-xl shadow-2xl p-8 w-80\">\n        <h3 className=\"text-2xl font-bold mb-4 text-white\">\n          Dark Mode\n        </h3>\n        <p className=\"text-slate-300\">\n          Perfetto anche in modalità scura con bordi sottili\n        </p>\n      </Card3D>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card3D\\Card3D.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `MatchersObject<MatcherState>`.","line":8,"column":15,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":8,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":18,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":18,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":24,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":24,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":34,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":42,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":75,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":75,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":75,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":76,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":90,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":90,"endColumn":38}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest'\nimport { render, screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport { Card3D } from './Card3D'\nimport type { Card3DProps } from './Card3D.types'\n\nexpect.extend(toHaveNoViolations)\n\ndescribe('Card3D', () => {\n  const defaultProps: Card3DProps = {\n    children: 'Test Content',\n  }\n\n  describe('Rendering', () => {\n    it('renders without crashing', () => {\n      render(<Card3D {...defaultProps} />)\n      expect(screen.getByTestId('card3d')).toBeInTheDocument()\n    })\n\n    it('renders children correctly', () => {\n      const testContent = 'Test Content'\n      render(<Card3D {...defaultProps}>{testContent}</Card3D>)\n      expect(screen.getByText(testContent)).toBeInTheDocument()\n    })\n  })\n\n  describe('Props', () => {\n\n    it('applies className prop correctly', () => {\n      const testValue = 'Test'\n      render(<Card3D {...defaultProps} className={testValue} />)\n      const element = screen.getByTestId('card3d')\n      expect(element).toBeInTheDocument()\n      // Add specific assertion based on prop type\n    })\n\n    it('applies containerClassName prop correctly', () => {\n      const testValue = 'Test'\n      render(<Card3D {...defaultProps} containerClassName={testValue} />)\n      const element = screen.getByTestId('card3d')\n      expect(element).toBeInTheDocument()\n      // Add specific assertion based on prop type\n    })\n  })\n\n  describe('Interactions', () => {\n\n    it('handles onMouseMove correctly', async () => {\n      const handler = vi.fn()\n      const user = userEvent.setup()\n      render(<Card3D {...defaultProps} onMouseMove={handler} />)\n\n      const element = screen.getByTestId('card3d')\n      await user.click(element)\n\n      expect(handler).toHaveBeenCalledTimes(1)\n    })\n\n    it('handles onMouseLeave correctly', async () => {\n      const handler = vi.fn()\n      const user = userEvent.setup()\n      render(<Card3D {...defaultProps} onMouseLeave={handler} />)\n\n      const element = screen.getByTestId('card3d')\n      await user.click(element)\n\n      expect(handler).toHaveBeenCalledTimes(1)\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('has no accessibility violations', async () => {\n      const { container } = render(<Card3D {...defaultProps} />)\n      const results = await axe(container)\n      expect(results).toHaveNoViolations()\n    })\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup()\n      render(<Card3D {...defaultProps} />)\n      await user.tab()\n      const focusedElement = screen.getByTestId('card3d')\n      expect(document.activeElement).toBe(focusedElement)\n    })\n\n    it('has correct ARIA attributes', () => {\n      render(<Card3D {...defaultProps} />)\n      const element = screen.getByTestId('card3d')\n      expect(element).toHaveAttribute('role')\n    })\n  })\n\n  describe('Visual Regression', () => {\n    it('matches snapshot', () => {\n      const { container } = render(<Card3D {...defaultProps} />)\n      expect(container.firstChild).toMatchSnapshot()\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card3D\\Card3D.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card3D\\Card3D.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card3D\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardBento\\CardBento.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardBento\\CardBento.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardBento\\CardBento.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardBento\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardFlip\\CardFlip.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardFlip\\CardFlip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardFlip\\CardFlip.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardFlip\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardGlow\\CardGlow.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":23,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[596,656],"text":"\n          Passa il mouse per vedere l&apos;effetto glow\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[596,656],"text":"\n          Passa il mouse per vedere l&lsquo;effetto glow\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[596,656],"text":"\n          Passa il mouse per vedere l&#39;effetto glow\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[596,656],"text":"\n          Passa il mouse per vedere l&rsquo;effetto glow\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":95,"column":14,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3285,3361],"text":"\n            L&apos;effetto glow è ancora più evidente su sfondo scuro\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3285,3361],"text":"\n            L&lsquo;effetto glow è ancora più evidente su sfondo scuro\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3285,3361],"text":"\n            L&#39;effetto glow è ancora più evidente su sfondo scuro\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3285,3361],"text":"\n            L&rsquo;effetto glow è ancora più evidente su sfondo scuro\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { CardGlow } from './CardGlow';\nimport { Star, Zap, Crown } from 'lucide-react';\n\nconst meta: Meta<typeof CardGlow> = {\n  title: 'UI/CardGlow',\n  component: CardGlow,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof CardGlow>;\n\nexport const Default: Story = {\n  render: () => (\n    <CardGlow>\n      <div className=\"p-8 w-80\">\n        <h3 className=\"text-2xl font-bold mb-2 dark:text-white\">Card Glow</h3>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Passa il mouse per vedere l'effetto glow\n        </p>\n      </div>\n    </CardGlow>\n  ),\n};\n\nexport const PurpleGlow: Story = {\n  render: () => (\n    <CardGlow glowColor=\"rgba(168, 85, 247, 0.5)\">\n      <div className=\"p-8 w-80\">\n        <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center mb-4\">\n          <Crown className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n        </div>\n        <h3 className=\"text-2xl font-bold mb-2 dark:text-white\">Purple Glow</h3>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Glow viola personalizzato\n        </p>\n      </div>\n    </CardGlow>\n  ),\n};\n\nexport const ColoredCards: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-8\">\n      <CardGlow glowColor=\"rgba(59, 130, 246, 0.5)\">\n        <div className=\"p-6\">\n          <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4\">\n            <Zap className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2 dark:text-white\">Blue</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n            Glow blu elettrico\n          </p>\n        </div>\n      </CardGlow>\n\n      <CardGlow glowColor=\"rgba(168, 85, 247, 0.5)\">\n        <div className=\"p-6\">\n          <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center mb-4\">\n            <Crown className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2 dark:text-white\">Purple</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n            Glow viola reale\n          </p>\n        </div>\n      </CardGlow>\n\n      <CardGlow glowColor=\"rgba(236, 72, 153, 0.5)\">\n        <div className=\"p-6\">\n          <div className=\"w-12 h-12 bg-pink-100 dark:bg-pink-900/30 rounded-lg flex items-center justify-center mb-4\">\n            <Star className=\"w-6 h-6 text-pink-600 dark:text-pink-400\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2 dark:text-white\">Pink</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n            Glow rosa vibrante\n          </p>\n        </div>\n      </CardGlow>\n    </div>\n  ),\n};\n\nexport const DarkBackground: Story = {\n  render: () => (\n    <div className=\"bg-slate-950 p-12 rounded-xl\">\n      <CardGlow glowColor=\"rgba(59, 130, 246, 0.7)\">\n        <div className=\"p-8 w-96\">\n          <h3 className=\"text-2xl font-bold mb-2 text-white\">Premium Card</h3>\n          <p className=\"text-slate-300 mb-4\">\n            L'effetto glow è ancora più evidente su sfondo scuro\n          </p>\n          <button className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors\">\n            Scopri di più\n          </button>\n        </div>\n      </CardGlow>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardGlow\\CardGlow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardGlow\\CardGlow.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardGlow\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardHover\\CardHover.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":23,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[609,680],"text":"\n          Passa il mouse sopra per vedere l&apos;effetto spotlight\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[609,680],"text":"\n          Passa il mouse sopra per vedere l&lsquo;effetto spotlight\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[609,680],"text":"\n          Passa il mouse sopra per vedere l&#39;effetto spotlight\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[609,680],"text":"\n          Passa il mouse sopra per vedere l&rsquo;effetto spotlight\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":39,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1161,1235],"text":"\n          Performance ottimizzate per un&apos;esperienza ultra-rapida\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1161,1235],"text":"\n          Performance ottimizzate per un&lsquo;esperienza ultra-rapida\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1161,1235],"text":"\n          Performance ottimizzate per un&#39;esperienza ultra-rapida\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1161,1235],"text":"\n          Performance ottimizzate per un&rsquo;esperienza ultra-rapida\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { CardHover } from './CardHover';\nimport { Zap, Shield, Sparkles } from 'lucide-react';\n\nconst meta: Meta<typeof CardHover> = {\n  title: 'UI/CardHover',\n  component: CardHover,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof CardHover>;\n\nexport const Default: Story = {\n  render: () => (\n    <CardHover>\n      <div className=\"p-8 w-80\">\n        <h3 className=\"text-2xl font-bold mb-2 dark:text-white\">Card Hover</h3>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Passa il mouse sopra per vedere l'effetto spotlight\n        </p>\n      </div>\n    </CardHover>\n  ),\n};\n\nexport const WithIcon: Story = {\n  render: () => (\n    <CardHover>\n      <div className=\"p-8 w-80\">\n        <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4\">\n          <Zap className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n        </div>\n        <h3 className=\"text-2xl font-bold mb-2 dark:text-white\">Velocità</h3>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Performance ottimizzate per un'esperienza ultra-rapida\n        </p>\n      </div>\n    </CardHover>\n  ),\n};\n\nexport const FeatureCards: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-8\">\n      <CardHover>\n        <div className=\"p-6\">\n          <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4\">\n            <Zap className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2 dark:text-white\">Velocità</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n            Performance ottimizzate\n          </p>\n        </div>\n      </CardHover>\n\n      <CardHover>\n        <div className=\"p-6\">\n          <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center mb-4\">\n            <Sparkles className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2 dark:text-white\">Design</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n            Interfaccia moderna\n          </p>\n        </div>\n      </CardHover>\n\n      <CardHover>\n        <div className=\"p-6\">\n          <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center mb-4\">\n            <Shield className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2 dark:text-white\">Sicurezza</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n            Protezione avanzata\n          </p>\n        </div>\n      </CardHover>\n    </div>\n  ),\n};\n\nexport const ProductCard: Story = {\n  render: () => (\n    <CardHover>\n      <div className=\"w-80\">\n        <div className=\"h-48 bg-gradient-to-br from-blue-400 to-purple-600\" />\n        <div className=\"p-6\">\n          <h3 className=\"text-xl font-bold mb-2 dark:text-white\">\n            Premium Product\n          </h3>\n          <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4\">\n            €99.99\n          </p>\n          <button className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors\">\n            Aggiungi al Carrello\n          </button>\n        </div>\n      </div>\n    </CardHover>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardHover\\CardHover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardHover\\CardHover.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\CardHover\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card\\Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card\\Card.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Padding della card\n */\nexport type CardPadding = 'none' | 'sm' | 'md' | 'lg';\n\n/**\n * Varianti visuali della card\n */\nexport type CardVariant = 'default' | 'bordered' | 'elevated' | 'ghost';\n\n/**\n * Props per il componente Card principale\n * @interface CardProps\n */\nexport interface CardProps {\n  /** Contenuto della card */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n  /** Se true, aggiunge hover effect */\n  hoverable?: boolean;\n  /** Padding della card */\n  padding?: CardPadding;\n  /** Variante visuale della card */\n  variant?: CardVariant;\n  /** Callback eseguita al click */\n  onClick?: () => void;\n}\n\n/**\n * Props per CardHeader\n * @interface CardHeaderProps\n */\nexport interface CardHeaderProps {\n  /** Contenuto dell'header */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n\n/**\n * Props per CardTitle\n * @interface CardTitleProps\n */\nexport interface CardTitleProps {\n  /** Contenuto del titolo */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n\n/**\n * Props per CardDescription\n * @interface CardDescriptionProps\n */\nexport interface CardDescriptionProps {\n  /** Contenuto della descrizione */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n\n/**\n * Props per CardContent\n * @interface CardContentProps\n */\nexport interface CardContentProps {\n  /** Contenuto del body */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n\n/**\n * Props per CardFooter\n * @interface CardFooterProps\n */\nexport interface CardFooterProps {\n  /** Contenuto del footer */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Card\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Checkbox\\Checkbox.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":30,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[604,606],"text":"(id != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[604,606],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[604,606],"text":"(Boolean(id))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":32,"column":26,"nodeType":"TSAsExpression","messageId":"conditionErrorObject","endLine":32,"endColumn":66},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":36,"column":45,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":36,"endColumn":58,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[904,917],"text":"(indeterminate ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[904,917],"text":"(indeterminate === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":58,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":58,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1412,1417],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1412,1417],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1412,1417],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":59,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":59,"endColumn":21,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1445,1459],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1445,1459],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":23,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":63,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1542,1547],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1542,1547],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1542,1547],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":32,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":63,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1551,1562],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1551,1562],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1551,1562],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":64,"column":28,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":64,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1616,1621],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1616,1621],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1616,1621],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":64,"column":37,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":64,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1625,1636],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1625,1636],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1625,1636],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":79,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":79,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2018,2023],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2018,2023],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2018,2023],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":79,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":79,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2027,2038],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2027,2038],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2027,2038],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":81,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2095,2100],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2095,2100],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2095,2100],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":87,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":87,"endColumn":35,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2329,2343],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2329,2343],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":93,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":93,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2501,2512],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2501,2512],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2501,2512],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":100,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":100,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2669,2674],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2669,2674],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2669,2674],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { CheckboxProps } from './Checkbox.types';\n\n/**\n * Checkbox - Componente checkbox accessibile\n *\n * @example\n * ```tsx\n * <Checkbox\n *   label=\"Accept terms and conditions\"\n *   description=\"You agree to our Terms of Service\"\n * />\n * ```\n */\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      size = 'md',\n      label,\n      description,\n      error,\n      indeterminate,\n      className,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const checkboxId = id || `checkbox-${Math.random().toString(36).substr(2, 9)}`;\n    const internalRef = useRef<HTMLInputElement>(null);\n    const checkboxRef = (ref as React.RefObject<HTMLInputElement>) || internalRef;\n\n    useEffect(() => {\n      if (checkboxRef.current) {\n        checkboxRef.current.indeterminate = indeterminate || false;\n      }\n    }, [indeterminate, checkboxRef]);\n\n    const sizeClasses = {\n      sm: 'h-4 w-4',\n      md: 'h-5 w-5',\n      lg: 'h-6 w-6',\n    };\n\n    const labelSizeClasses = {\n      sm: 'text-sm',\n      md: 'text-base',\n      lg: 'text-lg',\n    };\n\n    const checkboxClasses = cn(\n      'rounded border-gray-300 text-blue-600',\n      'focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n      'transition-colors duration-200',\n      'cursor-pointer',\n      sizeClasses[size],\n      error && 'border-red-500',\n      props.disabled && 'opacity-50 cursor-not-allowed',\n      className\n    );\n\n    const Container = label || description ? 'div' : React.Fragment;\n    const containerProps = label || description ? { className: 'flex items-start' } : {};\n\n    return (\n      <div>\n        <Container {...containerProps}>\n          <div className=\"flex items-center h-5\">\n            <input\n              ref={checkboxRef}\n              type=\"checkbox\"\n              id={checkboxId}\n              className={checkboxClasses}\n              {...props}\n            />\n          </div>\n\n          {(label || description) && (\n            <div className=\"ml-3\">\n              {label && (\n                <label\n                  htmlFor={checkboxId}\n                  className={cn(\n                    'font-medium text-gray-700 cursor-pointer',\n                    labelSizeClasses[size],\n                    props.disabled && 'opacity-50 cursor-not-allowed'\n                  )}\n                >\n                  {label}\n                </label>\n              )}\n              {description && (\n                <p className=\"text-sm text-gray-600\">{description}</p>\n              )}\n            </div>\n          )}\n        </Container>\n\n        {error && <p className=\"mt-1.5 text-sm text-red-600\">{error}</p>}\n      </div>\n    );\n  }\n);\n\nCheckbox.displayName = 'Checkbox';\n\nexport default Checkbox;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Checkbox\\Checkbox.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Dimensioni del checkbox\n */\nexport type CheckboxSize = 'sm' | 'md' | 'lg';\n\n/**\n * Props per il componente Checkbox\n * @interface CheckboxProps\n */\nexport interface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /** Dimensione del checkbox */\n  size?: CheckboxSize;\n  /** Label del checkbox */\n  label?: string;\n  /** Descrizione secondaria */\n  description?: string;\n  /** Messaggio di errore */\n  error?: string;\n  /** Se true, mostra stato indeterminato */\n  indeterminate?: boolean;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Checkbox\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\FloatingNav\\FloatingNav.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":44,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1377,1518],"text":"\n            Scrolla verso il basso per vedere la navigazione scomparire.\n            Scrolla verso l&apos;alto per vederla riapparire.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1377,1518],"text":"\n            Scrolla verso il basso per vedere la navigazione scomparire.\n            Scrolla verso l&lsquo;alto per vederla riapparire.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1377,1518],"text":"\n            Scrolla verso il basso per vedere la navigazione scomparire.\n            Scrolla verso l&#39;alto per vederla riapparire.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1377,1518],"text":"\n            Scrolla verso il basso per vedere la navigazione scomparire.\n            Scrolla verso l&rsquo;alto per vederla riapparire.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { FloatingNav } from './FloatingNav';\nimport { Home, Zap, DollarSign, User, Mail } from 'lucide-react';\n\nconst meta: Meta<typeof FloatingNav> = {\n  title: 'UI/FloatingNav',\n  component: FloatingNav,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'fullscreen',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof FloatingNav>;\n\nconst basicItems = [\n  { name: 'Home', link: '#home' },\n  { name: 'Features', link: '#features' },\n  { name: 'Pricing', link: '#pricing' },\n  { name: 'Contact', link: '#contact' },\n];\n\nconst itemsWithIcons = [\n  { name: 'Home', link: '#home', icon: <Home className=\"w-4 h-4\" /> },\n  { name: 'Features', link: '#features', icon: <Zap className=\"w-4 h-4\" /> },\n  { name: 'Pricing', link: '#pricing', icon: <DollarSign className=\"w-4 h-4\" /> },\n  { name: 'About', link: '#about', icon: <User className=\"w-4 h-4\" /> },\n  { name: 'Contact', link: '#contact', icon: <Mail className=\"w-4 h-4\" /> },\n];\n\nexport const Default: Story = {\n  args: {\n    navItems: basicItems,\n  },\n  render: (args) => (\n    <div>\n      <FloatingNav {...args} />\n      <div className=\"min-h-[200vh] bg-slate-950 p-20\">\n        <div className=\"max-w-4xl mx-auto text-white space-y-8\">\n          <h1 className=\"text-5xl font-bold mb-4\">Floating Navigation</h1>\n          <p className=\"text-xl text-slate-300\">\n            Scrolla verso il basso per vedere la navigazione scomparire.\n            Scrolla verso l'alto per vederla riapparire.\n          </p>\n          <div className=\"space-y-4 text-slate-400\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n            <p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const WithIcons: Story = {\n  args: {\n    navItems: itemsWithIcons,\n  },\n  render: (args) => (\n    <div>\n      <FloatingNav {...args} />\n      <div className=\"min-h-[200vh] bg-gradient-to-b from-slate-900 to-slate-950 p-20\">\n        <div className=\"max-w-4xl mx-auto text-white space-y-8\">\n          <h1 className=\"text-5xl font-bold mb-4\">Navigation With Icons</h1>\n          <p className=\"text-xl text-slate-300\">\n            Navigazione completa con icone Lucide\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-12\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"bg-slate-800/50 p-6 rounded-xl\">\n                <h3 className=\"text-xl font-bold mb-2\">Sezione {i}</h3>\n                <p className=\"text-slate-400\">Contenuto della sezione</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const MinimalNav: Story = {\n  args: {\n    navItems: [\n      { name: 'Home', link: '#home' },\n      { name: 'Work', link: '#work' },\n      { name: 'Contact', link: '#contact' },\n    ],\n  },\n  render: (args) => (\n    <div>\n      <FloatingNav {...args} />\n      <div className=\"min-h-[200vh] bg-black p-20\">\n        <div className=\"max-w-4xl mx-auto text-white text-center space-y-12\">\n          <h1 className=\"text-6xl font-bold\">Minimal Design</h1>\n          <p className=\"text-2xl text-slate-400\">\n            Navigazione essenziale e pulita\n          </p>\n        </div>\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\FloatingNav\\FloatingNav.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":73,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":73,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn } from '@/shared/utils/cn';\nimport type { FloatingNavProps } from './FloatingNav.types';\n\n/**\n * FloatingNav Component\n *\n * Floating navigation bar that appears/disappears on scroll.\n * Modern, clean design perfect for single-page applications.\n *\n * @example\n * ```tsx\n * <FloatingNav\n *   navItems={[\n *     { name: 'Home', link: '#home' },\n *     { name: 'About', link: '#about' },\n *   ]}\n * />\n * ```\n */\nexport const FloatingNav: React.FC<FloatingNavProps> = ({\n  navItems,\n  className,\n}) => {\n  const [visible, setVisible] = useState(true);\n  const [prevScrollPos, setPrevScrollPos] = useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollPos = window.scrollY;\n\n      // Show nav when scrolling up, hide when scrolling down\n      setVisible(\n        (prevScrollPos > currentScrollPos && currentScrollPos > 10) ||\n          currentScrollPos < 10\n      );\n\n      setPrevScrollPos(currentScrollPos);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [prevScrollPos]);\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        initial={{\n          opacity: 1,\n          y: -100,\n        }}\n        animate={{\n          y: visible ? 0 : -100,\n          opacity: visible ? 1 : 0,\n        }}\n        transition={{\n          duration: 0.2,\n        }}\n        className={cn(\n          'flex max-w-fit fixed top-10 inset-x-0 mx-auto border border-slate-700 rounded-full bg-slate-950/80 backdrop-blur-md shadow-xl z-[5000] px-8 py-4 items-center justify-center space-x-4',\n          className\n        )}\n      >\n        {navItems.map((navItem, idx) => (\n          <a\n            key={`link=${idx}`}\n            href={navItem.link}\n            className={cn(\n              'relative text-slate-300 items-center flex space-x-1 hover:text-white transition-colors'\n            )}\n          >\n            {navItem.icon && <span className=\"block\">{navItem.icon}</span>}\n            <span className=\"block text-sm\">{navItem.name}</span>\n          </a>\n        ))}\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\FloatingNav\\FloatingNav.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\FloatingNav\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InfiniteMovingCards\\InfiniteMovingCards.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InfiniteMovingCards\\InfiniteMovingCards.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InfiniteMovingCardsItem' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'addAnimation'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [addAnimation]","fix":{"range":[879,881],"text":"[addAnimation]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type {\n  InfiniteMovingCardsProps,\n  InfiniteMovingCardsItem,\n} from './InfiniteMovingCards.types';\n\n/**\n * InfiniteMovingCards Component\n *\n * Infinite scrolling cards/testimonials with smooth animation.\n * Perfect for testimonials, logos, or any repeating content.\n *\n * @example\n * ```tsx\n * <InfiniteMovingCards\n *   items={testimonials}\n *   direction=\"left\"\n *   speed=\"normal\"\n * />\n * ```\n */\nexport const InfiniteMovingCards: React.FC<InfiniteMovingCardsProps> = ({\n  items,\n  direction = 'left',\n  speed = 'normal',\n  pauseOnHover = true,\n  className,\n}) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const scrollerRef = React.useRef<HTMLUListElement>(null);\n  const [start, setStart] = useState(false);\n\n  useEffect(() => {\n    addAnimation();\n  }, []);\n\n  function addAnimation() {\n    if (containerRef.current && scrollerRef.current) {\n      const scrollerContent = Array.from(scrollerRef.current.children);\n\n      scrollerContent.forEach((item) => {\n        const duplicatedItem = item.cloneNode(true);\n        if (scrollerRef.current) {\n          scrollerRef.current.appendChild(duplicatedItem);\n        }\n      });\n\n      getDirection();\n      getSpeed();\n      setStart(true);\n    }\n  }\n\n  const getDirection = () => {\n    if (containerRef.current) {\n      if (direction === 'left') {\n        containerRef.current.style.setProperty(\n          '--animation-direction',\n          'forwards'\n        );\n      } else {\n        containerRef.current.style.setProperty(\n          '--animation-direction',\n          'reverse'\n        );\n      }\n    }\n  };\n\n  const getSpeed = () => {\n    if (containerRef.current) {\n      if (speed === 'fast') {\n        containerRef.current.style.setProperty('--animation-duration', '20s');\n      } else if (speed === 'normal') {\n        containerRef.current.style.setProperty('--animation-duration', '40s');\n      } else {\n        containerRef.current.style.setProperty('--animation-duration', '80s');\n      }\n    }\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        'scroller relative z-20 max-w-7xl overflow-hidden [mask-image:linear-gradient(to_right,transparent,white_20%,white_80%,transparent)]',\n        className\n      )}\n    >\n      <ul\n        ref={scrollerRef}\n        className={cn(\n          'flex min-w-full shrink-0 gap-4 py-4 w-max flex-nowrap',\n          start && 'animate-scroll',\n          pauseOnHover && 'hover:[animation-play-state:paused]'\n        )}\n      >\n        {items.map((item, idx) => (\n          <li\n            className=\"w-[350px] max-w-full relative rounded-2xl border border-slate-700 px-8 py-6 md:w-[450px]\"\n            style={{\n              background:\n                'linear-gradient(180deg, var(--slate-800), var(--slate-900)',\n            }}\n            key={idx}\n          >\n            <blockquote>\n              <div\n                aria-hidden=\"true\"\n                className=\"user-select-none -z-1 pointer-events-none absolute -left-0.5 -top-0.5 h-[calc(100%_+_4px)] w-[calc(100%_+_4px)]\"\n              ></div>\n              <span className=\"relative z-20 text-sm leading-[1.6] text-slate-100 font-normal\">\n                {item.quote}\n              </span>\n              <div className=\"relative z-20 mt-6 flex flex-row items-center\">\n                <span className=\"flex flex-col gap-1\">\n                  <span className=\"text-sm leading-[1.6] text-slate-400 font-normal\">\n                    {item.name}\n                  </span>\n                  <span className=\"text-sm leading-[1.6] text-slate-400 font-normal\">\n                    {item.title}\n                  </span>\n                </span>\n              </div>\n            </blockquote>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InfiniteMovingCards\\InfiniteMovingCards.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InfiniteMovingCards\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InputOTP\\InputOTP.stories.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":73,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":84}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { InputOTP } from './InputOTP';\n\nconst meta: Meta<typeof InputOTP> = { title: 'UI/InputOTP', component: InputOTP, tags: ['autodocs'], parameters: { layout: 'centered' } };\nexport default meta;\ntype Story = StoryObj<typeof InputOTP>;\n\nexport const Default: Story = { args: { length: 6, onComplete: (otp) => console.log('OTP:', otp) } };\nexport const FourDigits: Story = { args: { length: 4 } };\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InputOTP\\InputOTP.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Import \"KeyboardEvent\" is only used as types.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":1,"endColumn":64,"fix":{"range":[0,47],"text":"import type { KeyboardEvent } from 'react';\nimport React, { useState, useRef"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useRef, KeyboardEvent } from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { InputOTPProps } from './InputOTP.types';\n\nexport const InputOTP: React.FC<InputOTPProps> = ({ length = 6, onComplete, className }) => {\n  const [otp, setOtp] = useState<string[]>(Array(length).fill(''));\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n\n  const handleChange = (idx: number, value: string) => {\n    if (value.length > 1) value = value[0];\n    const newOtp = [...otp];\n    newOtp[idx] = value;\n    setOtp(newOtp);\n    if (value && idx < length - 1) inputRefs.current[idx + 1]?.focus();\n    if (newOtp.every(v => v) && onComplete) onComplete(newOtp.join(''));\n  };\n\n  const handleKeyDown = (idx: number, e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Backspace' && !otp[idx] && idx > 0) inputRefs.current[idx - 1]?.focus();\n  };\n\n  return (\n    <div className={cn('flex gap-2', className)}>\n      {otp.map((digit, idx) => (\n        <input\n          key={idx}\n          ref={el => inputRefs.current[idx] = el}\n          type=\"text\"\n          maxLength={1}\n          value={digit}\n          onChange={e => handleChange(idx, e.target.value)}\n          onKeyDown={e => handleKeyDown(idx, e)}\n          className=\"w-12 h-14 text-center text-2xl font-bold border-2 border-slate-300 dark:border-slate-600 rounded-lg focus:border-blue-600 focus:outline-none bg-white dark:bg-slate-800 dark:text-white\"\n        />\n      ))}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InputOTP\\InputOTP.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\InputOTP\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Input\\Input.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":25,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[478,480],"text":"(id != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[478,480],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[478,480],"text":"(Boolean(id))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1096,1101],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1096,1101],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1096,1101],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":45,"endColumn":21,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1152,1166],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1152,1166],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":46,"column":7,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":46,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":47,"column":7,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":47,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":55,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":55,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1418,1423],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1418,1423],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1418,1423],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":61,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":61,"endColumn":22,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1592,1600],"text":"(required ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1592,1600],"text":"(required === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":66,"column":12,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":66,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":74,"column":12,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":74,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":81,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2159,2164],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2159,2164],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2159,2164],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":85,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":85,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2256,2266],"text":"(helperText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2256,2266],"text":"(helperText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2256,2266],"text":"(Boolean(helperText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":85,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":85,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2270,2276],"text":"(error == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2271,2276],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2270,2276],"text":"(!Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { InputProps } from './Input.types';\n\n/**\n * Input - Componente input accessibile e personalizzabile\n */\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      variant = 'default',\n      size = 'md',\n      label,\n      error,\n      helperText,\n      leftIcon,\n      rightIcon,\n      required,\n      fullWidth = false,\n      className = '',\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\n\n    const sizeClasses = {\n      sm: 'px-3 py-1.5 text-sm',\n      md: 'px-4 py-2.5 text-base',\n      lg: 'px-5 py-3 text-lg',\n    };\n\n    const variantClasses = {\n      default: 'border border-gray-300 rounded-lg bg-white',\n      filled: 'border-0 rounded-lg bg-gray-100',\n      flushed: 'border-0 border-b-2 border-gray-300 rounded-none bg-transparent',\n    };\n\n    const inputClasses = [\n      'w-full transition-colors duration-200',\n      'focus:outline-none focus:ring-2 focus:ring-blue-500',\n      sizeClasses[size],\n      variantClasses[variant],\n      error ? 'border-red-500 focus:ring-red-500' : '',\n      props.disabled ? 'opacity-50 cursor-not-allowed bg-gray-50' : '',\n      leftIcon ? 'pl-10' : '',\n      rightIcon ? 'pr-10' : '',\n      className,\n    ]\n      .filter(Boolean)\n      .join(' ');\n\n    return (\n      <div className={fullWidth ? 'w-full' : ''}>\n        {label && (\n          <label\n            htmlFor={inputId}\n            className=\"block text-sm font-medium text-gray-700 mb-1.5\"\n          >\n            {label}\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\n          </label>\n        )}\n\n        <div className=\"relative\">\n          {leftIcon && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\">\n              {leftIcon}\n            </div>\n          )}\n\n          <input ref={ref} id={inputId} className={inputClasses} {...props} />\n\n          {rightIcon && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400\">\n              {rightIcon}\n            </div>\n          )}\n        </div>\n\n        {error && (\n          <p className=\"mt-1.5 text-sm text-red-600\">{error}</p>\n        )}\n\n        {helperText && !error && (\n          <p className=\"mt-1.5 text-sm text-gray-600\">{helperText}</p>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport default Input;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Input\\Input.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Varianti del componente Input\n */\nexport type InputVariant = 'default' | 'filled' | 'flushed';\n\n/**\n * Dimensioni del componente Input\n */\nexport type InputSize = 'sm' | 'md' | 'lg';\n\n/**\n * Props per il componente Input\n */\nexport interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /** Variante visuale */\n  variant?: InputVariant;\n  /** Dimensione */\n  size?: InputSize;\n  /** Label da mostrare sopra l'input */\n  label?: string;\n  /** Messaggio di errore da mostrare sotto l'input */\n  error?: string;\n  /** Messaggio di aiuto da mostrare sotto l'input */\n  helperText?: string;\n  /** Icona da mostrare a sinistra */\n  leftIcon?: React.ReactNode;\n  /** Icona da mostrare a destra */\n  rightIcon?: React.ReactNode;\n  /** Se true, mostra l'input come required */\n  required?: boolean;\n  /** Larghezza piena */\n  fullWidth?: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Input\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Label\\Label.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":20,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":20,"endColumn":18,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[526,534],"text":"(required ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[526,534],"text":"(required === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":21,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[593,600],"text":"(tooltip != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[593,600],"text":"(tooltip ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[593,600],"text":"(Boolean(tooltip))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { LabelProps } from './Label.types';\n\n/**\n * Label - Componente label riutilizzabile per form\n */\nexport const Label = React.forwardRef<HTMLLabelElement, LabelProps>(\n  ({ children, required, tooltip, className, ...props }, ref) => {\n    return (\n      <label\n        ref={ref}\n        className={cn(\n          'block text-sm font-medium text-gray-700 mb-1.5',\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\n        {tooltip && (\n          <span className=\"ml-1 text-gray-400 cursor-help\" title={tooltip}>\n            <svg\n              className=\"inline h-4 w-4\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n              />\n            </svg>\n          </span>\n        )}\n      </label>\n    );\n  }\n);\n\nLabel.displayName = 'Label';\n\nexport default Label;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Label\\Label.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Props per il componente Label\n * @interface LabelProps\n */\nexport interface LabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {\n  /** Se true, mostra asterisco per campo obbligatorio */\n  required?: boolean;\n  /** Se true, mostra tooltip informativo */\n  tooltip?: string;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Label\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MobileMenu\\MobileMenu.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MobileMenu\\MobileMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MobileMenu\\MobileMenu.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MobileMenu\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Modal\\Modal.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":67,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":67,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1579,1584],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1579,1584],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1579,1584],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":78,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":78,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1872,1877],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1872,1877],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1872,1877],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":80,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":80,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2013,2018],"text":"(title != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2013,2018],"text":"(title ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2013,2018],"text":"(Boolean(title))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":116,"column":10,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":116,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useCallback } from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { ModalProps } from './Modal.types';\n\n/**\n * Modal - Componente modal/dialog accessibile\n */\nexport const Modal: React.FC<ModalProps> = ({\n  open,\n  onClose,\n  title,\n  children,\n  footer,\n  size = 'md',\n  showCloseButton = true,\n  closeOnOverlayClick = true,\n  closeOnEsc = true,\n  className,\n}) => {\n  const sizeClasses = {\n    sm: 'max-w-md',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl',\n    full: 'max-w-full mx-4',\n  };\n\n  const handleEscapeKey = useCallback(\n    (event: KeyboardEvent) => {\n      if (closeOnEsc && event.key === 'Escape') {\n        onClose();\n      }\n    },\n    [closeOnEsc, onClose]\n  );\n\n  const handleOverlayClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (closeOnOverlayClick && event.target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    if (open) {\n      document.body.style.overflow = 'hidden';\n      if (closeOnEsc) {\n        document.addEventListener('keydown', handleEscapeKey);\n      }\n    }\n\n    return () => {\n      document.body.style.overflow = 'unset';\n      if (closeOnEsc) {\n        document.removeEventListener('keydown', handleEscapeKey);\n      }\n    };\n  }, [open, closeOnEsc, handleEscapeKey]);\n\n  if (!open) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50 animate-in fade-in-0\"\n      onClick={handleOverlayClick}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby={title ? 'modal-title' : undefined}\n    >\n      <div\n        className={cn(\n          'relative w-full bg-white rounded-lg shadow-xl',\n          'animate-in zoom-in-95 slide-in-from-bottom-4',\n          sizeClasses[size],\n          className\n        )}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <div className=\"flex items-center justify-between px-6 py-4 border-b border-gray-200\">\n            {title && (\n              <h2 id=\"modal-title\" className=\"text-xl font-semibold text-gray-900\">\n                {title}\n              </h2>\n            )}\n            {showCloseButton && (\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors rounded-lg hover:bg-gray-100\"\n                aria-label=\"Close modal\"\n              >\n                <svg\n                  className=\"h-6 w-6\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Content */}\n        <div className=\"px-6 py-4 overflow-y-auto max-h-[calc(100vh-16rem)]\">\n          {children}\n        </div>\n\n        {/* Footer */}\n        {footer && (\n          <div className=\"flex items-center justify-end gap-3 px-6 py-4 border-t border-gray-200 bg-gray-50 rounded-b-lg\">\n            {footer}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nModal.displayName = 'Modal';\n\nexport default Modal;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Modal\\Modal.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Dimensioni del modal\n */\nexport type ModalSize = 'sm' | 'md' | 'lg' | 'xl' | 'full';\n\n/**\n * Props per il componente Modal\n * @interface ModalProps\n */\nexport interface ModalProps {\n  /** Se true, il modal è visibile */\n  open: boolean;\n  /** Callback chiamata quando il modal viene chiuso */\n  onClose: () => void;\n  /** Titolo del modal */\n  title?: string;\n  /** Contenuto del modal */\n  children: React.ReactNode;\n  /** Footer del modal (tipicamente bottoni di azione) */\n  footer?: React.ReactNode;\n  /** Dimensione del modal */\n  size?: ModalSize;\n  /** Se true, mostra bottone di chiusura */\n  showCloseButton?: boolean;\n  /** Se true, chiude il modal al click sull'overlay */\n  closeOnOverlayClick?: boolean;\n  /** Se true, chiude il modal premendo ESC */\n  closeOnEsc?: boolean;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Modal\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MultiStepForm\\MultiStepForm.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MultiStepForm\\MultiStepForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MultiStepForm\\MultiStepForm.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[192,195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[192,195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ReactNode } from 'react';\n\nexport interface FormStep {\n  title: string;\n  content: ReactNode;\n}\n\nexport interface MultiStepFormProps {\n  steps: FormStep[];\n  onComplete?: (data: any) => void;\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\MultiStepForm\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ParallaxScroll\\ParallaxScroll.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ParallaxScroll\\ParallaxScroll.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ParallaxScroll\\ParallaxScroll.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\ParallaxScroll\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Radio\\Radio.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":21,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[418,420],"text":"(id != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[418,420],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[418,420],"text":"(Boolean(id))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[903,908],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[903,908],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[903,908],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":42,"endColumn":21,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[936,950],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[936,950],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":59,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":59,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1335,1340],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1335,1340],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1335,1340],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":59,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":59,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1344,1355],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1344,1355],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1344,1355],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":61,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":61,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1412,1417],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1412,1417],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1412,1417],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":67,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":67,"endColumn":35,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1643,1657],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1643,1657],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":73,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":73,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1815,1826],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1815,1826],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1815,1826],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":80,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":80,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1977,1982],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1977,1982],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1977,1982],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":115,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":115,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2648,2653],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2648,2653],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2648,2653],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":135,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":135,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3229,3234],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3229,3234],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3229,3234],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { RadioProps, RadioGroupProps } from './Radio.types';\n\n/**\n * Radio - Componente radio button accessibile\n */\nexport const Radio = React.forwardRef<HTMLInputElement, RadioProps>(\n  (\n    {\n      size = 'md',\n      label,\n      description,\n      error,\n      className,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const radioId = id || `radio-${Math.random().toString(36).substr(2, 9)}`;\n\n    const sizeClasses = {\n      sm: 'h-4 w-4',\n      md: 'h-5 w-5',\n      lg: 'h-6 w-6',\n    };\n\n    const labelSizeClasses = {\n      sm: 'text-sm',\n      md: 'text-base',\n      lg: 'text-lg',\n    };\n\n    const radioClasses = cn(\n      'border-gray-300 text-blue-600',\n      'focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n      'transition-colors duration-200',\n      'cursor-pointer',\n      sizeClasses[size],\n      error && 'border-red-500',\n      props.disabled && 'opacity-50 cursor-not-allowed',\n      className\n    );\n\n    return (\n      <div>\n        <div className=\"flex items-start\">\n          <div className=\"flex items-center h-5\">\n            <input\n              ref={ref}\n              type=\"radio\"\n              id={radioId}\n              className={radioClasses}\n              {...props}\n            />\n          </div>\n\n          {(label || description) && (\n            <div className=\"ml-3\">\n              {label && (\n                <label\n                  htmlFor={radioId}\n                  className={cn(\n                    'font-medium text-gray-700 cursor-pointer',\n                    labelSizeClasses[size],\n                    props.disabled && 'opacity-50 cursor-not-allowed'\n                  )}\n                >\n                  {label}\n                </label>\n              )}\n              {description && (\n                <p className=\"text-sm text-gray-600\">{description}</p>\n              )}\n            </div>\n          )}\n        </div>\n\n        {error && <p className=\"mt-1.5 text-sm text-red-600\">{error}</p>}\n      </div>\n    );\n  }\n);\n\nRadio.displayName = 'Radio';\n\n/**\n * RadioGroup - Componente per raggruppare radio buttons\n */\nexport const RadioGroup: React.FC<RadioGroupProps> = ({\n  name,\n  value,\n  onChange,\n  label,\n  error,\n  orientation = 'vertical',\n  size = 'md',\n  children,\n  className,\n}) => {\n  const orientationClasses = {\n    vertical: 'flex flex-col space-y-3',\n    horizontal: 'flex flex-row space-x-4',\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e.target.value);\n    }\n  };\n\n  return (\n    <div className={className}>\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          {label}\n        </label>\n      )}\n\n      <div className={orientationClasses[orientation]}>\n        {React.Children.map(children, (child) => {\n          if (React.isValidElement<RadioProps>(child)) {\n            return React.cloneElement(child, {\n              name,\n              checked: child.props.value === value,\n              onChange: handleChange,\n              size: child.props.size || size,\n            });\n          }\n          return child;\n        })}\n      </div>\n\n      {error && <p className=\"mt-2 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n};\n\nRadioGroup.displayName = 'RadioGroup';\n\nexport default Radio;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Radio\\Radio.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Dimensioni del radio button\n */\nexport type RadioSize = 'sm' | 'md' | 'lg';\n\n/**\n * Props per il componente Radio\n * @interface RadioProps\n */\nexport interface RadioProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /** Dimensione del radio */\n  size?: RadioSize;\n  /** Label del radio */\n  label?: string;\n  /** Descrizione secondaria */\n  description?: string;\n  /** Messaggio di errore */\n  error?: string;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n\n/**\n * Props per RadioGroup\n * @interface RadioGroupProps\n */\nexport interface RadioGroupProps {\n  /** Nome del gruppo (usato per raggruppare radio buttons) */\n  name: string;\n  /** Valore selezionato */\n  value?: string;\n  /** Callback quando cambia la selezione */\n  onChange?: (value: string) => void;\n  /** Label del gruppo */\n  label?: string;\n  /** Messaggio di errore */\n  error?: string;\n  /** Orientamento del gruppo */\n  orientation?: 'horizontal' | 'vertical';\n  /** Dimensione dei radio buttons nel gruppo */\n  size?: RadioSize;\n  /** Children (Radio components) */\n  children: React.ReactNode;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Radio\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Select\\Select.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":39,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":39,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[749,751],"text":"(id != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[749,751],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[749,751],"text":"(Boolean(id))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":59,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":59,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1396,1401],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1396,1401],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1396,1401],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":60,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":60,"endColumn":21,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1448,1462],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1448,1462],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":61,"column":7,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":61,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":67,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":67,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1633,1638],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1633,1638],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1633,1638],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":73,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":73,"endColumn":22,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1808,1816],"text":"(required ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1808,1816],"text":"(required === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":78,"column":12,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":78,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":85,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":85,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2213,2224],"text":"(placeholder != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2213,2224],"text":"(placeholder ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2213,2224],"text":"(Boolean(placeholder))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":119,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":119,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3167,3172],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3167,3172],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3167,3172],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":121,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":121,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3242,3252],"text":"(helperText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3242,3252],"text":"(helperText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3242,3252],"text":"(Boolean(helperText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":121,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":121,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3256,3262],"text":"(error == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3257,3262],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3256,3262],"text":"(!Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { SelectProps } from './Select.types';\n\n/**\n * Select - Componente dropdown select accessibile\n *\n * @example\n * ```tsx\n * <Select\n *   label=\"Choose an option\"\n *   options={[\n *     { value: '1', label: 'Option 1' },\n *     { value: '2', label: 'Option 2' },\n *   ]}\n *   placeholder=\"Select...\"\n * />\n * ```\n */\nexport const Select = React.forwardRef<HTMLSelectElement, SelectProps>(\n  (\n    {\n      variant = 'default',\n      size = 'md',\n      label,\n      error,\n      helperText,\n      leftIcon,\n      required,\n      fullWidth = false,\n      options = [],\n      placeholder,\n      className,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;\n\n    const sizeClasses = {\n      sm: 'px-3 py-1.5 text-sm',\n      md: 'px-4 py-2.5 text-base',\n      lg: 'px-5 py-3 text-lg',\n    };\n\n    const variantClasses = {\n      default: 'border border-gray-300 rounded-lg bg-white',\n      filled: 'border-0 rounded-lg bg-gray-100',\n      flushed: 'border-0 border-b-2 border-gray-300 rounded-none bg-transparent',\n    };\n\n    const selectClasses = cn(\n      'w-full transition-colors duration-200',\n      'focus:outline-none focus:ring-2 focus:ring-blue-500',\n      'appearance-none',\n      sizeClasses[size],\n      variantClasses[variant],\n      error && 'border-red-500 focus:ring-red-500',\n      props.disabled && 'opacity-50 cursor-not-allowed bg-gray-50',\n      leftIcon && 'pl-10',\n      className\n    );\n\n    return (\n      <div className={fullWidth ? 'w-full' : ''}>\n        {label && (\n          <label\n            htmlFor={selectId}\n            className=\"block text-sm font-medium text-gray-700 mb-1.5\"\n          >\n            {label}\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\n          </label>\n        )}\n\n        <div className=\"relative\">\n          {leftIcon && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none\">\n              {leftIcon}\n            </div>\n          )}\n\n          <select ref={ref} id={selectId} className={selectClasses} {...props}>\n            {placeholder && (\n              <option value=\"\" disabled>\n                {placeholder}\n              </option>\n            )}\n            {options.map((option) => (\n              <option\n                key={option.value}\n                value={option.value}\n                disabled={option.disabled}\n              >\n                {option.label}\n              </option>\n            ))}\n          </select>\n\n          {/* Chevron down icon */}\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none\">\n            <svg\n              className=\"w-5 h-5\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M19 9l-7 7-7-7\"\n              />\n            </svg>\n          </div>\n        </div>\n\n        {error && <p className=\"mt-1.5 text-sm text-red-600\">{error}</p>}\n\n        {helperText && !error && (\n          <p className=\"mt-1.5 text-sm text-gray-600\">{helperText}</p>\n        )}\n      </div>\n    );\n  }\n);\n\nSelect.displayName = 'Select';\n\nexport default Select;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Select\\Select.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Dimensioni del select\n */\nexport type SelectSize = 'sm' | 'md' | 'lg';\n\n/**\n * Variante del select\n */\nexport type SelectVariant = 'default' | 'filled' | 'flushed';\n\n/**\n * Opzione per il select\n */\nexport interface SelectOption {\n  /** Valore dell'opzione */\n  value: string | number;\n  /** Label visualizzata */\n  label: string;\n  /** Se true, l'opzione è disabilitata */\n  disabled?: boolean;\n}\n\n/**\n * Props per il componente Select\n * @interface SelectProps\n */\nexport interface SelectProps extends Omit<React.SelectHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /** Variante visuale del select */\n  variant?: SelectVariant;\n  /** Dimensione del select */\n  size?: SelectSize;\n  /** Label del select */\n  label?: string;\n  /** Messaggio di errore */\n  error?: string;\n  /** Testo di aiuto */\n  helperText?: string;\n  /** Icona a sinistra */\n  leftIcon?: React.ReactNode;\n  /** Se true, il campo è obbligatorio */\n  required?: boolean;\n  /** Se true, occupa tutta la larghezza */\n  fullWidth?: boolean;\n  /** Opzioni del select */\n  options?: SelectOption[];\n  /** Placeholder quando nessuna opzione è selezionata */\n  placeholder?: string;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Select\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Switch\\Switch.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":24,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[462,464],"text":"(id != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[462,464],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[462,464],"text":"(Boolean(id))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":61,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":61,"endColumn":31,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1412,1426],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1412,1426],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":92,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":92,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2486,2491],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2486,2491],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2486,2491],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":92,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":92,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2495,2506],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2495,2506],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2495,2506],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":94,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":94,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2563,2568],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2563,2568],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2563,2568],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":100,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":100,"endColumn":35,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2784,2798],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2784,2798],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":106,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2956,2967],"text":"(description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2956,2967],"text":"(description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2956,2967],"text":"(Boolean(description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":113,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":113,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3118,3123],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3118,3123],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3118,3123],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/utils/cn';\nimport type { SwitchProps } from './Switch.types';\n\n/**\n * Switch - Componente toggle switch accessibile\n */\nexport const Switch = React.forwardRef<HTMLInputElement, SwitchProps>(\n  (\n    {\n      size = 'md',\n      label,\n      description,\n      error,\n      checked,\n      onCheckedChange,\n      className,\n      id,\n      onChange,\n      ...props\n    },\n    ref\n  ) => {\n    const switchId = id || `switch-${Math.random().toString(36).substr(2, 9)}`;\n\n    const sizeClasses = {\n      sm: {\n        container: 'h-5 w-9',\n        thumb: 'h-4 w-4',\n        translate: 'translate-x-4',\n      },\n      md: {\n        container: 'h-6 w-11',\n        thumb: 'h-5 w-5',\n        translate: 'translate-x-5',\n      },\n      lg: {\n        container: 'h-7 w-14',\n        thumb: 'h-6 w-6',\n        translate: 'translate-x-7',\n      },\n    };\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (onCheckedChange) {\n        onCheckedChange(e.target.checked);\n      }\n      if (onChange) {\n        onChange(e);\n      }\n    };\n\n    return (\n      <div className={className}>\n        <div className=\"flex items-start\">\n          <div className=\"flex items-center h-6\">\n            <label\n              htmlFor={switchId}\n              className={cn(\n                'relative inline-flex cursor-pointer items-center',\n                props.disabled && 'opacity-50 cursor-not-allowed'\n              )}\n            >\n              <input\n                ref={ref}\n                type=\"checkbox\"\n                id={switchId}\n                className=\"sr-only peer\"\n                checked={checked}\n                onChange={handleChange}\n                {...props}\n              />\n              <div\n                className={cn(\n                  'rounded-full transition-colors duration-200',\n                  'peer-focus:ring-2 peer-focus:ring-blue-500 peer-focus:ring-offset-2',\n                  'peer-checked:bg-blue-600 bg-gray-300',\n                  sizeClasses[size].container\n                )}\n              >\n                <div\n                  className={cn(\n                    'absolute left-0.5 top-0.5 rounded-full bg-white transition-transform duration-200',\n                    'peer-checked:' + sizeClasses[size].translate,\n                    sizeClasses[size].thumb\n                  )}\n                />\n              </div>\n            </label>\n          </div>\n\n          {(label || description) && (\n            <div className=\"ml-3\">\n              {label && (\n                <label\n                  htmlFor={switchId}\n                  className={cn(\n                    'font-medium text-gray-700 cursor-pointer',\n                    'text-base',\n                    props.disabled && 'opacity-50 cursor-not-allowed'\n                  )}\n                >\n                  {label}\n                </label>\n              )}\n              {description && (\n                <p className=\"text-sm text-gray-600\">{description}</p>\n              )}\n            </div>\n          )}\n        </div>\n\n        {error && <p className=\"mt-1.5 text-sm text-red-600\">{error}</p>}\n      </div>\n    );\n  }\n);\n\nSwitch.displayName = 'Switch';\n\nexport default Switch;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Switch\\Switch.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Dimensioni dello switch\n */\nexport type SwitchSize = 'sm' | 'md' | 'lg';\n\n/**\n * Props per il componente Switch\n * @interface SwitchProps\n */\nexport interface SwitchProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /** Dimensione dello switch */\n  size?: SwitchSize;\n  /** Label dello switch */\n  label?: string;\n  /** Descrizione secondaria */\n  description?: string;\n  /** Messaggio di errore */\n  error?: string;\n  /** Se true, checked */\n  checked?: boolean;\n  /** Callback quando cambia lo stato */\n  onCheckedChange?: (checked: boolean) => void;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Switch\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Textarea\\Textarea.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":29,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[625,627],"text":"(id != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[625,627],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[625,627],"text":"(Boolean(id))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":59,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":59,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1600,1605],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1600,1605],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1600,1605],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":60,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":60,"endColumn":21,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1653,1667],"text":"(props.disabled ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1653,1667],"text":"(props.disabled === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":73,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":73,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2000,2005],"text":"(label != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2000,2005],"text":"(label ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2000,2005],"text":"(Boolean(label))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":79,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":79,"endColumn":22,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2183,2191],"text":"(required ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2183,2191],"text":"(required === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":95,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":95,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2627,2632],"text":"(error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2627,2632],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2627,2632],"text":"(Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":96,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":96,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2699,2709],"text":"(helperText != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2699,2709],"text":"(helperText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2699,2709],"text":"(Boolean(helperText))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":96,"column":29,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":96,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2713,2719],"text":"(error == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2714,2719],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2713,2719],"text":"(!Boolean(error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":101,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":101,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2855,2864],"text":"(maxLength != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2855,2864],"text":"(maxLength ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2855,2864],"text":"(Boolean(maxLength))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { cn } from '@/shared/utils/cn';\r\nimport type { TextareaProps } from './Textarea.types';\r\n\r\n/**\r\n * Textarea - Componente textarea accessibile\r\n */\r\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  (\r\n    {\r\n      variant = 'default',\r\n      size = 'md',\r\n      label,\r\n      error,\r\n      helperText,\r\n      required,\r\n      fullWidth = false,\r\n      resize = 'vertical',\r\n      showCount = false,\r\n      maxLength,\r\n      className,\r\n      id,\r\n      value,\r\n      onChange,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const textareaId = id || `textarea-${Math.random().toString(36).substr(2, 9)}`;\r\n    const [charCount, setCharCount] = useState(\r\n      typeof value === 'string' ? value.length : 0\r\n    );\r\n\r\n    const sizeClasses = {\r\n      sm: 'px-3 py-1.5 text-sm min-h-[80px]',\r\n      md: 'px-4 py-2.5 text-base min-h-[120px]',\r\n      lg: 'px-5 py-3 text-lg min-h-[160px]',\r\n    };\r\n\r\n    const variantClasses = {\r\n      default: 'border border-gray-300 rounded-lg bg-white',\r\n      filled: 'border-0 rounded-lg bg-gray-100',\r\n      flushed: 'border-0 border-b-2 border-gray-300 rounded-none bg-transparent',\r\n    };\r\n\r\n    const resizeClasses = {\r\n      none: 'resize-none',\r\n      vertical: 'resize-y',\r\n      horizontal: 'resize-x',\r\n      both: 'resize',\r\n    };\r\n\r\n    const textareaClasses = cn(\r\n      'w-full transition-colors duration-200',\r\n      'focus:outline-none focus:ring-2 focus:ring-blue-500',\r\n      sizeClasses[size],\r\n      variantClasses[variant],\r\n      resizeClasses[resize],\r\n      error && 'border-red-500 focus:ring-red-500',\r\n      props.disabled && 'opacity-50 cursor-not-allowed bg-gray-50',\r\n      className\r\n    );\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n      setCharCount(e.target.value.length);\r\n      if (onChange) {\r\n        onChange(e);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className={fullWidth ? 'w-full' : ''}>\r\n        {label && (\r\n          <label\r\n            htmlFor={textareaId}\r\n            className=\"block text-sm font-medium text-gray-700 mb-1.5\"\r\n          >\r\n            {label}\r\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n          </label>\r\n        )}\r\n\r\n        <textarea\r\n          ref={ref}\r\n          id={textareaId}\r\n          className={textareaClasses}\r\n          maxLength={maxLength}\r\n          value={value}\r\n          onChange={handleChange}\r\n          {...props}\r\n        />\r\n\r\n        <div className=\"flex justify-between items-start mt-1.5\">\r\n          <div className=\"flex-1\">\r\n            {error && <p className=\"text-sm text-red-600\">{error}</p>}\r\n            {helperText && !error && (\r\n              <p className=\"text-sm text-gray-600\">{helperText}</p>\r\n            )}\r\n          </div>\r\n\r\n          {showCount && maxLength && (\r\n            <p className=\"text-sm text-gray-500 ml-2\">\r\n              {charCount}/{maxLength}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nTextarea.displayName = 'Textarea';\r\n\r\nexport default Textarea;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Textarea\\Textarea.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Dimensioni del textarea\n */\nexport type TextareaSize = 'sm' | 'md' | 'lg';\n\n/**\n * Variante del textarea\n */\nexport type TextareaVariant = 'default' | 'filled' | 'flushed';\n\n/**\n * Resize behavior del textarea\n */\nexport type TextareaResize = 'none' | 'vertical' | 'horizontal' | 'both';\n\n/**\n * Props per il componente Textarea\n * @interface TextareaProps\n */\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /** Variante visuale del textarea */\n  variant?: TextareaVariant;\n  /** Dimensione del textarea */\n  size?: TextareaSize;\n  /** Label del textarea */\n  label?: string;\n  /** Messaggio di errore */\n  error?: string;\n  /** Testo di aiuto */\n  helperText?: string;\n  /** Se true, il campo è obbligatorio */\n  required?: boolean;\n  /** Se true, occupa tutta la larghezza */\n  fullWidth?: boolean;\n  /** Comportamento resize */\n  resize?: TextareaResize;\n  /** Mostra contatore caratteri */\n  showCount?: boolean;\n  /** Massimo numero di caratteri */\n  maxLength?: number;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Textarea\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Tooltip\\Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Tooltip\\Tooltip.types.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":27,"fix":{"range":[6,6],"text":" type"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Posizionamento del tooltip\n */\nexport type TooltipPlacement = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * Props per il componente Tooltip\n * @interface TooltipProps\n */\nexport interface TooltipProps {\n  /** Contenuto del tooltip */\n  content: React.ReactNode;\n  /** Elemento trigger (al quale applicare il tooltip) */\n  children: React.ReactElement;\n  /** Posizionamento del tooltip */\n  placement?: TooltipPlacement;\n  /** Delay in ms prima di mostrare il tooltip */\n  delay?: number;\n  /** Se true, tooltip disabilitato */\n  disabled?: boolean;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\Tooltip\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\components\\ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\design-system\\tokens\\animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\design-system\\tokens\\colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\design-system\\tokens\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\design-system\\tokens\\radius.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\design-system\\tokens\\shadows.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\design-system\\tokens\\spacing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\design-system\\tokens\\typography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/index.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @deve1993/ui-library\n *\n * A comprehensive UI component library with 50+ premium components\n * Built with React, TypeScript, Tailwind CSS, and Framer Motion\n *\n * @packageDocumentation\n */\n\n// Re-export all components and types\nexport * from './components';\n\n// Re-export design tokens\nexport * from './design-system/tokens';\n\n// Re-export utilities\nexport { cn } from './shared/utils/cn';\n\n// Package metadata\nexport const VERSION = '1.0.0';\nexport const LIBRARY_NAME = '@deve1993/ui-library';\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\analyze-performance.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\analyze-performance.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport { readFileSync, existsSync, statSync } from 'fs'\nimport { glob } from 'glob'\n\ninterface PerformanceIssue {\n  file: string\n  line: number\n  type: 'inline-function' | 'missing-memo' | 'missing-callback' | 'large-component' | 'missing-key'\n  severity: 'high' | 'medium' | 'low'\n  issue: string\n  fix: string\n}\n\ninterface BundleInfo {\n  name: string\n  size: number\n  percentage: number\n}\n\ninterface ComponentMetrics {\n  file: string\n  lines: number\n  complexity: number\n  hooks: number\n  props: number\n  reRenderRisk: 'high' | 'medium' | 'low'\n}\n\n/**\n * Analyze bundle size\n */\nasync function analyzeBundleSize(): Promise<BundleInfo[]> {\n  console.log('📦 Analyzing bundle size...\\n')\n\n  // Check if dist exists\n  if (!existsSync('dist')) {\n    console.log('⚠️  No dist folder found. Run npm run build first.\\n')\n    return []\n  }\n\n  const bundles: BundleInfo[] = []\n  const files = glob.sync('dist/**/*.{js,mjs}')\n\n  let totalSize = 0\n  for (const file of files) {\n    const stats = statSync(file)\n    totalSize += stats.size\n  }\n\n  for (const file of files) {\n    const stats = statSync(file)\n    const name = file.replace('dist/', '')\n    bundles.push({\n      name,\n      size: stats.size,\n      percentage: (stats.size / totalSize) * 100\n    })\n  }\n\n  // Sort by size descending\n  bundles.sort((a, b) => b.size - a.size)\n\n  return bundles\n}\n\n/**\n * Format bytes to human readable\n */\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B'\n  const k = 1024\n  const sizes = ['B', 'KB', 'MB', 'GB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + ' ' + sizes[i]\n}\n\n/**\n * Detect re-render issues in component files\n */\nfunction detectReRenderIssues(): PerformanceIssue[] {\n  console.log('🔍 Detecting re-render issues...\\n')\n\n  const issues: PerformanceIssue[] = []\n  const componentFiles = glob.sync('components/**/*.{tsx,jsx}', {\n    ignore: ['**/*.test.*', '**/*.stories.*']\n  })\n\n  for (const file of componentFiles) {\n    const content = readFileSync(file, 'utf-8')\n    const lines = content.split('\\n')\n\n    lines.forEach((line, idx) => {\n      const lineNumber = idx + 1\n\n      // Detect inline functions in JSX\n      if (/={.*=>/.test(line) && !line.includes('useCallback') && !line.includes('useMemo')) {\n        issues.push({\n          file,\n          line: lineNumber,\n          type: 'inline-function',\n          severity: 'high',\n          issue: 'Inline function in JSX causes re-renders',\n          fix: 'Use useCallback to memoize the function'\n        })\n      }\n\n      // Detect inline object creation in JSX\n      if (/=\\{\\{/.test(line)) {\n        issues.push({\n          file,\n          line: lineNumber,\n          type: 'inline-function',\n          severity: 'medium',\n          issue: 'Inline object creation causes re-renders',\n          fix: 'Move object outside component or use useMemo'\n        })\n      }\n\n      // Detect missing key in lists\n      if (/\\.map\\(/.test(line)) {\n        const nextLines = lines.slice(idx, idx + 5).join('\\n')\n        if (!nextLines.includes('key=')) {\n          issues.push({\n            file,\n            line: lineNumber,\n            type: 'missing-key',\n            severity: 'high',\n            issue: 'Missing key prop in list',\n            fix: 'Add unique key prop to list items'\n          })\n        }\n      }\n    })\n\n    // Check for missing React.memo\n    const hasProps = content.includes('Props')\n    const hasMemo = content.includes('React.memo') || content.includes('memo(')\n    const isLarge = lines.length > 100\n\n    if (hasProps && !hasMemo && isLarge) {\n      issues.push({\n        file,\n        line: 1,\n        type: 'missing-memo',\n        severity: 'medium',\n        issue: 'Large component without React.memo',\n        fix: 'Wrap component export with React.memo()'\n      })\n    }\n\n    // Check for missing useCallback on event handlers\n    const hasOnClick = content.includes('onClick')\n    const hasUseCallback = content.includes('useCallback')\n\n    if (hasOnClick && !hasUseCallback && hasProps) {\n      issues.push({\n        file,\n        line: 1,\n        type: 'missing-callback',\n        severity: 'medium',\n        issue: 'Event handlers without useCallback',\n        fix: 'Wrap event handlers with useCallback'\n      })\n    }\n  }\n\n  return issues\n}\n\n/**\n * Analyze component complexity\n */\nfunction analyzeComplexity(): ComponentMetrics[] {\n  console.log('📊 Analyzing component complexity...\\n')\n\n  const metrics: ComponentMetrics[] = []\n  const componentFiles = glob.sync('components/**/*.{tsx,jsx}', {\n    ignore: ['**/*.test.*', '**/*.stories.*']\n  })\n\n  for (const file of componentFiles) {\n    const content = readFileSync(file, 'utf-8')\n    const lines = content.split('\\n')\n\n    // Count lines of code\n    const loc = lines.filter(l => l.trim() && !l.trim().startsWith('//')).length\n\n    // Count hooks\n    const hookMatches = content.match(/use[A-Z]\\w+/g) || []\n    const hooks = new Set(hookMatches).size\n\n    // Estimate complexity (simplified)\n    const complexity = (content.match(/if|else|switch|case|for|while|&&|\\|\\|/g) || []).length\n\n    // Count props\n    const propsMatch = content.match(/interface \\w+Props \\{([^}]+)\\}/)\n    const props = propsMatch\n      ? propsMatch[1].split('\\n').filter(l => l.trim() && !l.trim().startsWith('//')).length\n      : 0\n\n    // Determine re-render risk\n    let reRenderRisk: 'high' | 'medium' | 'low' = 'low'\n    if (loc > 200 || complexity > 20 || hooks > 5) {\n      reRenderRisk = 'high'\n    } else if (loc > 100 || complexity > 10 || hooks > 3) {\n      reRenderRisk = 'medium'\n    }\n\n    if (loc > 50) {\n      metrics.push({\n        file,\n        lines: loc,\n        complexity,\n        hooks,\n        props,\n        reRenderRisk\n      })\n    }\n  }\n\n  // Sort by lines descending\n  metrics.sort((a, b) => b.lines - a.lines)\n\n  return metrics\n}\n\n/**\n * Generate optimization suggestions\n */\nfunction generateSuggestions(issues: PerformanceIssue[], metrics: ComponentMetrics[]): void {\n  console.log('\\n💡 Optimization Suggestions:\\n')\n\n  // High severity issues\n  const highSeverity = issues.filter(i => i.severity === 'high')\n  if (highSeverity.length > 0) {\n    console.log(`🔴 HIGH Priority (${highSeverity.length} issues):`)\n    highSeverity.slice(0, 5).forEach(issue => {\n      console.log(`   - ${issue.file}:${issue.line}`)\n      console.log(`     ${issue.issue}`)\n      console.log(`     Fix: ${issue.fix}\\n`)\n    })\n  }\n\n  // Components that need optimization\n  const highRiskComponents = metrics.filter(m => m.reRenderRisk === 'high')\n  if (highRiskComponents.length > 0) {\n    console.log(`🟡 Components Needing Optimization (${highRiskComponents.length}):`)\n    highRiskComponents.slice(0, 5).forEach(metric => {\n      console.log(`   - ${metric.file} (${metric.lines} lines, complexity: ${metric.complexity})`)\n      console.log(`     Consider: React.memo, code splitting, or refactoring\\n`)\n    })\n  }\n\n  // General recommendations\n  console.log('📝 General Recommendations:')\n  console.log('   1. Use React.memo() for components that receive same props often')\n  console.log('   2. Wrap callbacks with useCallback to prevent re-renders')\n  console.log('   3. Use useMemo for expensive computations')\n  console.log('   4. Implement code splitting for large components')\n  console.log('   5. Always add key props to list items')\n  console.log('   6. Avoid inline functions and object creation in JSX\\n')\n}\n\n/**\n * Command: analyze (full analysis)\n */\nasync function commandAnalyze(): Promise<void> {\n  console.log('🚀 Performance Analysis\\n')\n  console.log('=' .repeat(50) + '\\n')\n\n  // Bundle size analysis\n  const bundles = await analyzeBundleSize()\n  if (bundles.length > 0) {\n    console.log('📦 Bundle Size:')\n    const totalSize = bundles.reduce((sum, b) => sum + b.size, 0)\n    console.log(`   Total: ${formatBytes(totalSize)}\\n`)\n\n    console.log('   Top 5 largest files:')\n    bundles.slice(0, 5).forEach(bundle => {\n      console.log(`   - ${bundle.name}: ${formatBytes(bundle.size)} (${bundle.percentage.toFixed(1)}%)`)\n    })\n    console.log()\n  }\n\n  // Re-render issues\n  const issues = detectReRenderIssues()\n  console.log(`🔍 Re-Render Issues: ${issues.length} found`)\n  const byType = issues.reduce((acc, issue) => {\n    acc[issue.type] = (acc[issue.type] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  for (const [type, count] of Object.entries(byType)) {\n    console.log(`   - ${type}: ${count}`)\n  }\n  console.log()\n\n  // Component complexity\n  const metrics = analyzeComplexity()\n  console.log(`📊 Component Complexity:`)\n  console.log(`   Total components analyzed: ${metrics.length}`)\n  console.log(`   Large components (>200 lines): ${metrics.filter(m => m.lines > 200).length}`)\n  console.log(`   High complexity (>20): ${metrics.filter(m => m.complexity > 20).length}`)\n  console.log(`   High re-render risk: ${metrics.filter(m => m.reRenderRisk === 'high').length}`)\n\n  // Suggestions\n  generateSuggestions(issues, metrics)\n\n  // Summary\n  console.log('\\n' + '='.repeat(50))\n  console.log('📊 Summary:\\n')\n  console.log(`   Bundle Size: ${bundles.length > 0 ? formatBytes(bundles.reduce((s, b) => s + b.size, 0)) : 'N/A'}`)\n  console.log(`   Performance Issues: ${issues.length}`)\n  console.log(`   Components Needing Attention: ${metrics.filter(m => m.reRenderRisk === 'high').length}`)\n  console.log()\n}\n\n/**\n * Command: bundle\n */\nasync function commandBundle(): Promise<void> {\n  const bundles = await analyzeBundleSize()\n\n  if (bundles.length === 0) {\n    return\n  }\n\n  const totalSize = bundles.reduce((sum, b) => sum + b.size, 0)\n\n  console.log(`📦 Bundle Size Analysis\\n`)\n  console.log(`Total Size: ${formatBytes(totalSize)}\\n`)\n\n  console.log('Files:')\n  bundles.forEach((bundle, idx) => {\n    console.log(`${idx + 1}. ${bundle.name}`)\n    console.log(`   Size: ${formatBytes(bundle.size)} (${bundle.percentage.toFixed(1)}%)\\n`)\n  })\n\n  // Recommendations\n  if (totalSize > 500000) {\n    console.log('⚠️  Bundle size is large (>500KB)')\n    console.log('💡 Consider:')\n    console.log('   - Code splitting')\n    console.log('   - Tree shaking unused imports')\n    console.log('   - Lazy loading heavy components')\n    console.log('   - Using lighter alternatives for dependencies\\n')\n  } else {\n    console.log('✅ Bundle size is acceptable (<500KB)\\n')\n  }\n}\n\n/**\n * Command: renders\n */\nfunction commandRenders(): void {\n  const issues = detectReRenderIssues()\n\n  console.log(`🔍 Re-Render Analysis\\n`)\n  console.log(`Total Issues Found: ${issues.length}\\n`)\n\n  if (issues.length === 0) {\n    console.log('✅ No re-render issues detected!\\n')\n    return\n  }\n\n  // Group by severity\n  const high = issues.filter(i => i.severity === 'high')\n  const medium = issues.filter(i => i.severity === 'medium')\n  const low = issues.filter(i => i.severity === 'low')\n\n  if (high.length > 0) {\n    console.log(`🔴 HIGH Severity (${high.length}):`)\n    high.forEach(issue => {\n      console.log(`   ${issue.file}:${issue.line}`)\n      console.log(`   → ${issue.issue}`)\n      console.log(`   ✓ ${issue.fix}\\n`)\n    })\n  }\n\n  if (medium.length > 0) {\n    console.log(`🟡 MEDIUM Severity (${medium.length}):`)\n    medium.slice(0, 10).forEach(issue => {\n      console.log(`   ${issue.file}:${issue.line}`)\n      console.log(`   → ${issue.issue}`)\n      console.log(`   ✓ ${issue.fix}\\n`)\n    })\n    if (medium.length > 10) {\n      console.log(`   ... and ${medium.length - 10} more\\n`)\n    }\n  }\n\n  console.log('💡 Quick Fixes:')\n  console.log('   1. Wrap inline functions with useCallback')\n  console.log('   2. Wrap inline objects with useMemo')\n  console.log('   3. Add React.memo() to large components')\n  console.log('   4. Always use key props in lists\\n')\n}\n\n/**\n * Main\n */\nasync function main() {\n  const args = process.argv.slice(2)\n  const command = args[0]\n\n  console.log('\\n⚡ Performance Auditor\\n')\n\n  if (command === 'bundle') {\n    await commandBundle()\n  } else if (command === 'renders') {\n    commandRenders()\n  } else if (command === 'analyze' || !command) {\n    await commandAnalyze()\n  } else {\n    console.log('Usage:')\n    console.log('  npm run performance:audit        - Full performance analysis')\n    console.log('  npm run performance:bundle       - Bundle size analysis')\n    console.log('  npm run performance:renders      - Re-render issues detection\\n')\n  }\n}\n\nmain().catch(console.error)\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\audit-accessibility.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\audit-accessibility.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport { readFileSync } from 'fs'\nimport { glob } from 'glob'\n\ninterface A11yIssue {\n  file: string\n  line: number\n  rule: string\n  severity: 'critical' | 'serious' | 'moderate' | 'minor'\n  issue: string\n  fix: string\n  wcagLevel: 'A' | 'AA' | 'AAA'\n}\n\ninterface A11yStats {\n  totalFiles: number\n  filesWithIssues: number\n  totalIssues: number\n  critical: number\n  serious: number\n  moderate: number\n  minor: number\n  passRate: number\n}\n\n/**\n * Check for missing alt text on images\n */\nfunction checkAltText(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  lines.forEach((line, idx) => {\n    // Check for img tags without alt\n    if (/<img[^>]*>/.test(line) && !line.includes('alt=')) {\n      issues.push({\n        file,\n        line: idx + 1,\n        rule: 'image-alt',\n        severity: 'critical',\n        issue: 'Image missing alt attribute',\n        fix: 'Add alt=\"\" for decorative images or alt=\"description\" for meaningful images',\n        wcagLevel: 'A'\n      })\n    }\n\n    // Check for empty alt on meaningful images\n    if (/<img[^>]*alt=\"\"[^>]*>/.test(line) && !line.includes('role=\"presentation\"')) {\n      // This might be intentional for decorative images, so lower severity\n      issues.push({\n        file,\n        line: idx + 1,\n        rule: 'image-alt-empty',\n        severity: 'moderate',\n        issue: 'Image has empty alt text - ensure this is decorative',\n        fix: 'If decorative, add role=\"presentation\" or aria-hidden=\"true\"',\n        wcagLevel: 'A'\n      })\n    }\n  })\n\n  return issues\n}\n\n/**\n * Check for proper heading hierarchy\n */\nfunction checkHeadingHierarchy(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  const headings = lines\n    .map((line, idx) => ({\n      level: line.match(/<h([1-6])/)?.[1],\n      line: idx + 1\n    }))\n    .filter(h => h.level)\n\n  for (let i = 1; i < headings.length; i++) {\n    const prev = parseInt(headings[i - 1].level!)\n    const curr = parseInt(headings[i].level!)\n\n    // Heading levels should not skip\n    if (curr > prev + 1) {\n      issues.push({\n        file,\n        line: headings[i].line,\n        rule: 'heading-order',\n        severity: 'serious',\n        issue: `Heading hierarchy skip from h${prev} to h${curr}`,\n        fix: `Use h${prev + 1} instead of h${curr} to maintain proper hierarchy`,\n        wcagLevel: 'A'\n      })\n    }\n  }\n\n  return issues\n}\n\n/**\n * Check for proper form labels\n */\nfunction checkFormLabels(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  lines.forEach((line, idx) => {\n    // Check for inputs without labels\n    if (/<input[^>]*>/.test(line)) {\n      const hasId = /id=\"[^\"]*\"/.test(line)\n      const hasAriaLabel = /aria-label=\"[^\"]*\"/.test(line)\n      const hasAriaLabelledby = /aria-labelledby=\"[^\"]*\"/.test(line)\n      const hasPlaceholder = /placeholder=\"[^\"]*\"/.test(line)\n\n      // Check if there's a label in previous or next lines\n      const surroundingLines = lines.slice(Math.max(0, idx - 2), idx + 3).join('\\n')\n      const hasLabel = /<label[^>]*>/.test(surroundingLines) && hasId\n\n      if (!hasLabel && !hasAriaLabel && !hasAriaLabelledby) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'form-label',\n          severity: 'critical',\n          issue: 'Input missing associated label',\n          fix: 'Add <label htmlFor=\"inputId\"> or aria-label attribute',\n          wcagLevel: 'A'\n        })\n      } else if (!hasLabel && !hasAriaLabel && !hasAriaLabelledby && hasPlaceholder) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'placeholder-label',\n          severity: 'serious',\n          issue: 'Placeholder used as label (not accessible)',\n          fix: 'Add proper label in addition to placeholder',\n          wcagLevel: 'AA'\n        })\n      }\n    }\n  })\n\n  return issues\n}\n\n/**\n * Check for proper button accessibility\n */\nfunction checkButtons(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  lines.forEach((line, idx) => {\n    // Check for div/span used as buttons\n    if ((/onClick=/.test(line) || /onPress=/.test(line)) &&\n        !/<button/.test(line) &&\n        !/role=\"button\"/.test(line) &&\n        !/<a[^>]*href/.test(line)) {\n\n      issues.push({\n        file,\n        line: idx + 1,\n        rule: 'button-role',\n        severity: 'critical',\n        issue: 'Clickable element without proper role or semantics',\n        fix: 'Use <button> element or add role=\"button\" with keyboard support',\n        wcagLevel: 'A'\n      })\n    }\n\n    // Check for buttons with only icon (no text)\n    if (/<button[^>]*>/.test(line)) {\n      const buttonContent = line.match(/<button[^>]*>(.*?)<\\/button>/)?.[1] || ''\n      const hasText = /\\w/.test(buttonContent.replace(/<[^>]*>/g, ''))\n      const hasAriaLabel = /aria-label=\"[^\"]*\"/.test(line)\n      const hasAriaLabelledby = /aria-labelledby=\"[^\"]*\"/.test(line)\n      const hasTitle = /title=\"[^\"]*\"/.test(line)\n\n      if (!hasText && !hasAriaLabel && !hasAriaLabelledby && !hasTitle) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'button-name',\n          severity: 'serious',\n          issue: 'Button without accessible name',\n          fix: 'Add aria-label=\"description\" or text content',\n          wcagLevel: 'A'\n        })\n      }\n    }\n  })\n\n  return issues\n}\n\n/**\n * Check for color contrast (basic pattern detection)\n */\nfunction checkColorContrast(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  lines.forEach((line, idx) => {\n    // Look for potential low contrast patterns\n    if (/text-gray-[34]00/.test(line) && /bg-white/.test(line)) {\n      issues.push({\n        file,\n        line: idx + 1,\n        rule: 'color-contrast',\n        severity: 'moderate',\n        issue: 'Potential low color contrast (light gray on white)',\n        fix: 'Use text-gray-700 or darker for sufficient contrast',\n        wcagLevel: 'AA'\n      })\n    }\n\n    if (/text-white/.test(line) && /bg-yellow/.test(line)) {\n      issues.push({\n        file,\n        line: idx + 1,\n        rule: 'color-contrast',\n        severity: 'moderate',\n        issue: 'Potential low color contrast (white on yellow)',\n        fix: 'Test contrast ratio - should be ≥ 4.5:1 for normal text',\n        wcagLevel: 'AA'\n      })\n    }\n  })\n\n  return issues\n}\n\n/**\n * Check for keyboard navigation support\n */\nfunction checkKeyboardNav(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  lines.forEach((line, idx) => {\n    // Check for mouse-only interactions\n    if (/onClick=/.test(line) && !/<button/.test(line) && !/<a/.test(line)) {\n      const hasOnKeyDown = lines.slice(Math.max(0, idx - 2), idx + 3)\n        .join('\\n')\n        .includes('onKeyDown')\n\n      const hasTabIndex = /tabIndex=/.test(line)\n      const hasRole = /role=\"button\"/.test(line)\n\n      if (!hasOnKeyDown && (!hasTabIndex || !hasRole)) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'keyboard-nav',\n          severity: 'serious',\n          issue: 'Interactive element not keyboard accessible',\n          fix: 'Add onKeyDown handler to support Enter/Space keys',\n          wcagLevel: 'A'\n        })\n      }\n    }\n\n    // Check for missing tabIndex on custom interactive elements\n    if (/role=\"(button|link|menuitem)\"/.test(line) && !/tabIndex/.test(line)) {\n      issues.push({\n        file,\n        line: idx + 1,\n        rule: 'focusable',\n        severity: 'serious',\n        issue: 'Interactive element not focusable',\n        fix: 'Add tabIndex={0} to make element keyboard focusable',\n        wcagLevel: 'A'\n      })\n    }\n  })\n\n  return issues\n}\n\n/**\n * Check for ARIA attributes\n */\nfunction checkAria(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  lines.forEach((line, idx) => {\n    // Check for invalid ARIA attributes\n    if (/aria-\\w+/.test(line)) {\n      // Check for aria-label on non-interactive elements without role\n      if (/aria-label=/.test(line) &&\n          !/<button/.test(line) &&\n          !/<a/.test(line) &&\n          !/<input/.test(line) &&\n          !/role=/.test(line)) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'aria-allowed',\n          severity: 'moderate',\n          issue: 'aria-label on non-interactive element may be ignored',\n          fix: 'Add appropriate role or use native semantic element',\n          wcagLevel: 'A'\n        })\n      }\n    }\n\n    // Check for missing aria-live for dynamic content\n    if (/(loading|error|success)/i.test(line) && !(/aria-live/.test(line))) {\n      const isDynamic = /\\{.*\\?/.test(line) || /state/.test(line)\n      if (isDynamic) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'aria-live',\n          severity: 'moderate',\n          issue: 'Dynamic content without aria-live announcement',\n          fix: 'Add aria-live=\"polite\" for status updates',\n          wcagLevel: 'AA'\n        })\n      }\n    }\n  })\n\n  return issues\n}\n\n/**\n * Check for semantic HTML\n */\nfunction checkSemanticHTML(content: string, file: string): A11yIssue[] {\n  const issues: A11yIssue[] = []\n  const lines = content.split('\\n')\n\n  lines.forEach((line, idx) => {\n    // Check for div soup instead of semantic elements\n    if (/<div[^>]*>/.test(line)) {\n      const hasRole = /role=\"(navigation|main|complementary|banner|contentinfo)\"/.test(line)\n      const className = line.match(/className=\"([^\"]*)\"/)?.[1] || ''\n\n      if (className.includes('nav') && !hasRole) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'semantic-html',\n          severity: 'minor',\n          issue: 'Use <nav> instead of div with navigation class',\n          fix: 'Replace <div className=\"nav\"> with <nav>',\n          wcagLevel: 'AA'\n        })\n      }\n\n      if (className.includes('header') && !hasRole) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'semantic-html',\n          severity: 'minor',\n          issue: 'Use <header> instead of div with header class',\n          fix: 'Replace <div className=\"header\"> with <header>',\n          wcagLevel: 'AA'\n        })\n      }\n\n      if (className.includes('footer') && !hasRole) {\n        issues.push({\n          file,\n          line: idx + 1,\n          rule: 'semantic-html',\n          severity: 'minor',\n          issue: 'Use <footer> instead of div with footer class',\n          fix: 'Replace <div className=\"footer\"> with <footer>',\n          wcagLevel: 'AA'\n        })\n      }\n    }\n  })\n\n  return issues\n}\n\n/**\n * Audit single file\n */\nfunction auditFile(file: string): A11yIssue[] {\n  const content = readFileSync(file, 'utf-8')\n\n  return [\n    ...checkAltText(content, file),\n    ...checkHeadingHierarchy(content, file),\n    ...checkFormLabels(content, file),\n    ...checkButtons(content, file),\n    ...checkColorContrast(content, file),\n    ...checkKeyboardNav(content, file),\n    ...checkAria(content, file),\n    ...checkSemanticHTML(content, file)\n  ]\n}\n\n/**\n * Calculate statistics\n */\nfunction calculateStats(allIssues: A11yIssue[], totalFiles: number): A11yStats {\n  const filesWithIssues = new Set(allIssues.map(i => i.file)).size\n\n  return {\n    totalFiles,\n    filesWithIssues,\n    totalIssues: allIssues.length,\n    critical: allIssues.filter(i => i.severity === 'critical').length,\n    serious: allIssues.filter(i => i.severity === 'serious').length,\n    moderate: allIssues.filter(i => i.severity === 'moderate').length,\n    minor: allIssues.filter(i => i.severity === 'minor').length,\n    passRate: ((totalFiles - filesWithIssues) / totalFiles) * 100\n  }\n}\n\n/**\n * Command: audit\n */\nfunction commandAudit(): void {\n  console.log('♿ Accessibility Audit (WCAG 2.1 AA)\\n')\n  console.log('=' .repeat(50) + '\\n')\n\n  const componentFiles = glob.sync('components/**/*.{tsx,jsx}', {\n    ignore: ['**/*.test.*', '**/*.stories.*']\n  })\n\n  console.log(`Analyzing ${componentFiles.length} components...\\n`)\n\n  const allIssues: A11yIssue[] = []\n\n  for (const file of componentFiles) {\n    const issues = auditFile(file)\n    allIssues.push(...issues)\n  }\n\n  const stats = calculateStats(allIssues, componentFiles.length)\n\n  // Display statistics\n  console.log('📊 Results:\\n')\n  console.log(`Files Analyzed: ${stats.totalFiles}`)\n  console.log(`Files with Issues: ${stats.filesWithIssues}`)\n  console.log(`Pass Rate: ${stats.passRate.toFixed(1)}%\\n`)\n\n  console.log(`Total Issues: ${stats.totalIssues}`)\n  console.log(`  🔴 Critical: ${stats.critical}`)\n  console.log(`  🟠 Serious: ${stats.serious}`)\n  console.log(`  🟡 Moderate: ${stats.moderate}`)\n  console.log(`  🟢 Minor: ${stats.minor}\\n`)\n\n  // Group by severity\n  const critical = allIssues.filter(i => i.severity === 'critical')\n  const serious = allIssues.filter(i => i.severity === 'serious')\n\n  // Display critical issues\n  if (critical.length > 0) {\n    console.log('🔴 CRITICAL Issues (Must Fix):\\n')\n    critical.slice(0, 10).forEach(issue => {\n      console.log(`${issue.file}:${issue.line}`)\n      console.log(`  Rule: ${issue.rule} (WCAG ${issue.wcagLevel})`)\n      console.log(`  Issue: ${issue.issue}`)\n      console.log(`  Fix: ${issue.fix}\\n`)\n    })\n    if (critical.length > 10) {\n      console.log(`... and ${critical.length - 10} more critical issues\\n`)\n    }\n  }\n\n  // Display serious issues\n  if (serious.length > 0) {\n    console.log('🟠 SERIOUS Issues (Should Fix):\\n')\n    serious.slice(0, 5).forEach(issue => {\n      console.log(`${issue.file}:${issue.line}`)\n      console.log(`  Rule: ${issue.rule} (WCAG ${issue.wcagLevel})`)\n      console.log(`  Issue: ${issue.issue}`)\n      console.log(`  Fix: ${issue.fix}\\n`)\n    })\n    if (serious.length > 5) {\n      console.log(`... and ${serious.length - 5} more serious issues\\n`)\n    }\n  }\n\n  // Summary\n  console.log('=' .repeat(50))\n  console.log('\\n📝 Summary:\\n')\n\n  if (stats.totalIssues === 0) {\n    console.log('✅ No accessibility issues found!')\n    console.log('   All components pass WCAG 2.1 AA criteria.\\n')\n  } else if (stats.critical === 0 && stats.serious === 0) {\n    console.log('✅ No critical or serious issues!')\n    console.log('   Components meet WCAG 2.1 AA requirements.')\n    console.log(`   ${stats.moderate + stats.minor} minor improvements recommended.\\n`)\n  } else {\n    console.log(`⚠️  ${stats.critical + stats.serious} issues requiring attention`)\n    console.log(`   Fix critical and serious issues for WCAG 2.1 AA compliance.\\n`)\n  }\n\n  console.log('💡 Next Steps:')\n  console.log('   1. Fix critical issues first')\n  console.log('   2. Address serious issues')\n  console.log('   3. Run automated tests: npm run test:a11y')\n  console.log('   4. Test with screen readers (NVDA, JAWS, VoiceOver)')\n  console.log('   5. Verify keyboard navigation manually\\n')\n}\n\n/**\n * Command: fix (show fixes for specific file)\n */\nfunction commandFix(targetFile?: string): void {\n  if (!targetFile) {\n    console.log('Usage: npm run a11y:fix -- <ComponentName>')\n    console.log('Example: npm run a11y:fix -- Button\\n')\n    return\n  }\n\n  const files = glob.sync(`components/**/${targetFile}/${targetFile}.{tsx,jsx}`)\n\n  if (files.length === 0) {\n    console.log(`❌ Component \"${targetFile}\" not found\\n`)\n    return\n  }\n\n  const file = files[0]\n  const issues = auditFile(file)\n\n  if (issues.length === 0) {\n    console.log(`✅ No accessibility issues in ${targetFile}!\\n`)\n    return\n  }\n\n  console.log(`♿ Accessibility Issues in ${targetFile}:\\n`)\n  console.log(`Found ${issues.length} issues\\n`)\n\n  issues.forEach((issue, idx) => {\n    console.log(`${idx + 1}. Line ${issue.line} - ${issue.severity.toUpperCase()}`)\n    console.log(`   Rule: ${issue.rule} (WCAG ${issue.wcagLevel})`)\n    console.log(`   Issue: ${issue.issue}`)\n    console.log(`   Fix: ${issue.fix}\\n`)\n  })\n}\n\n/**\n * Command: test (run automated tests)\n */\nfunction commandTest(): void {\n  console.log('🧪 Running Automated Accessibility Tests\\n')\n  console.log('This requires jest-axe integration in test files.\\n')\n  console.log('Example test:')\n  console.log(`\nimport { axe, toHaveNoViolations } from 'jest-axe'\nexpect.extend(toHaveNoViolations)\n\nit('has no accessibility violations', async () => {\n  const { container } = render(<Component />)\n  const results = await axe(container)\n  expect(results).toHaveNoViolations()\n})\n\\n`)\n  console.log('Run: npm test -- --grep \"accessibility\"\\n')\n}\n\n/**\n * Main\n */\nfunction main() {\n  const args = process.argv.slice(2)\n  const command = args[0]\n  const param = args[1]\n\n  console.log('\\n♿ Accessibility Auditor\\n')\n\n  if (command === 'fix') {\n    commandFix(param)\n  } else if (command === 'test') {\n    commandTest()\n  } else if (command === 'audit' || !command) {\n    commandAudit()\n  } else {\n    console.log('Usage:')\n    console.log('  npm run a11y:audit          - Full accessibility audit')\n    console.log('  npm run a11y:fix <Component> - Show fixes for component')\n    console.log('  npm run a11y:test           - Guide for automated tests\\n')\n  }\n}\n\nmain()\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\check-dependencies.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\check-dependencies.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { glob } from 'glob';\n\n/**\n * Dependency Analyzer\n *\n * Analizza tutti gli import nei file e verifica che le dipendenze\n * siano presenti in package.json\n */\n\ninterface DependencyIssue {\n  file: string;\n  import: string;\n  type: 'missing' | 'dev-only' | 'version-mismatch';\n  suggestion?: string;\n}\n\ninterface AnalysisResult {\n  totalFiles: number;\n  totalImports: number;\n  issues: DependencyIssue[];\n  unusedDependencies: string[];\n  suggestions: string[];\n}\n\nclass DependencyAnalyzer {\n  private packageJson: any;\n  private rootDir: string;\n  private importRegex = /import\\s+(?:(?:\\{[^}]*\\}|\\*\\s+as\\s+\\w+|\\w+)\\s+from\\s+)?['\"]([^'\"]+)['\"]/g;\n\n  constructor(rootDir: string) {\n    this.rootDir = rootDir;\n    const packageJsonPath = path.join(rootDir, 'package.json');\n\n    if (!fs.existsSync(packageJsonPath)) {\n      throw new Error('package.json not found');\n    }\n\n    this.packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));\n  }\n\n  async analyze(): Promise<AnalysisResult> {\n    console.log('🔍 Analyzing dependencies...\\n');\n\n    const files = await glob('**/*.{ts,tsx,js,jsx}', {\n      cwd: this.rootDir,\n      ignore: ['node_modules/**', 'dist/**', 'build/**', '.storybook/**'],\n    });\n\n    const issues: DependencyIssue[] = [];\n    const usedDependencies = new Set<string>();\n    let totalImports = 0;\n\n    for (const file of files) {\n      const filePath = path.join(this.rootDir, file);\n      const content = fs.readFileSync(filePath, 'utf-8');\n\n      let match;\n      this.importRegex.lastIndex = 0;\n\n      while ((match = this.importRegex.exec(content)) !== null) {\n        const importPath = match[1];\n        totalImports++;\n\n        // Skip relative imports\n        if (importPath.startsWith('.') || importPath.startsWith('/')) {\n          continue;\n        }\n\n        // Extract package name\n        const packageName = this.extractPackageName(importPath);\n\n        // Track usage\n        usedDependencies.add(packageName);\n\n        // Check if dependency exists\n        const issue = this.checkDependency(packageName, file);\n        if (issue) {\n          issues.push(issue);\n        }\n      }\n    }\n\n    // Check for unused dependencies\n    const unusedDependencies = this.findUnusedDependencies(usedDependencies);\n\n    // Generate suggestions\n    const suggestions = this.generateSuggestions(issues);\n\n    return {\n      totalFiles: files.length,\n      totalImports,\n      issues,\n      unusedDependencies,\n      suggestions,\n    };\n  }\n\n  private extractPackageName(importPath: string): string {\n    // Handle scoped packages (@org/package)\n    if (importPath.startsWith('@')) {\n      const parts = importPath.split('/');\n      return `${parts[0]}/${parts[1]}`;\n    }\n\n    // Regular packages (package/subpath)\n    return importPath.split('/')[0];\n  }\n\n  private checkDependency(packageName: string, file: string): DependencyIssue | null {\n    const deps = this.packageJson.dependencies || {};\n    const devDeps = this.packageJson.devDependencies || {};\n\n    // Check if it's missing entirely\n    if (!deps[packageName] && !devDeps[packageName]) {\n      // Check if it's a common known package\n      const suggestion = this.suggestPackage(packageName);\n\n      return {\n        file,\n        import: packageName,\n        type: 'missing',\n        suggestion,\n      };\n    }\n\n    // Check if it's in devDependencies but used in production code\n    if (devDeps[packageName] && !file.includes('test') && !file.includes('stories')) {\n      return {\n        file,\n        import: packageName,\n        type: 'dev-only',\n        suggestion: `Move ${packageName} to dependencies`,\n      };\n    }\n\n    return null;\n  }\n\n  private suggestPackage(packageName: string): string {\n    const suggestions: Record<string, string> = {\n      'lucide-react': 'npm install lucide-react',\n      'clsx': 'npm install clsx',\n      'tailwind-merge': 'npm install tailwind-merge',\n      'framer-motion': 'npm install framer-motion',\n      'react-hook-form': 'npm install react-hook-form',\n      'zod': 'npm install zod',\n      '@radix-ui/react-dialog': 'npm install @radix-ui/react-dialog',\n      '@radix-ui/react-dropdown-menu': 'npm install @radix-ui/react-dropdown-menu',\n    };\n\n    return suggestions[packageName] || `npm install ${packageName}`;\n  }\n\n  private findUnusedDependencies(usedDependencies: Set<string>): string[] {\n    const deps = this.packageJson.dependencies || {};\n    const unused: string[] = [];\n\n    // Essential deps that should never be marked as unused\n    const essentialDeps = ['react', 'react-dom', 'typescript'];\n\n    for (const dep of Object.keys(deps)) {\n      if (!usedDependencies.has(dep) && !essentialDeps.includes(dep)) {\n        unused.push(dep);\n      }\n    }\n\n    return unused;\n  }\n\n  private generateSuggestions(issues: DependencyIssue[]): string[] {\n    const suggestions: string[] = [];\n\n    // Group by type\n    const missing = issues.filter(i => i.type === 'missing');\n    const devOnly = issues.filter(i => i.type === 'dev-only');\n\n    if (missing.length > 0) {\n      // Get unique packages\n      const packages = [...new Set(missing.map(i => i.import))];\n\n      suggestions.push('💡 Install missing dependencies:');\n      for (const pkg of packages) {\n        const issue = missing.find(i => i.import === pkg);\n        suggestions.push(`   ${issue?.suggestion || `npm install ${pkg}`}`);\n      }\n    }\n\n    if (devOnly.length > 0) {\n      suggestions.push('');\n      suggestions.push('💡 Move to dependencies (not devDependencies):');\n      for (const issue of devOnly) {\n        suggestions.push(`   ${issue.import} (used in ${path.basename(issue.file)})`);\n      }\n    }\n\n    return suggestions;\n  }\n\n  printReport(result: AnalysisResult): void {\n    console.log('📊 Dependency Analysis Report\\n');\n    console.log(`📁 Files analyzed: ${result.totalFiles}`);\n    console.log(`📦 Imports found: ${result.totalImports}`);\n    console.log();\n\n    if (result.issues.length === 0) {\n      console.log('✅ No dependency issues found!\\n');\n    } else {\n      console.log(`⚠️  Found ${result.issues.length} issue(s):\\n`);\n\n      // Group by import\n      const grouped = result.issues.reduce((acc, issue) => {\n        if (!acc[issue.import]) {\n          acc[issue.import] = [];\n        }\n        acc[issue.import].push(issue);\n        return acc;\n      }, {} as Record<string, DependencyIssue[]>);\n\n      for (const [pkg, issues] of Object.entries(grouped)) {\n        const type = issues[0].type;\n        const emoji = type === 'missing' ? '❌' : '⚠️';\n\n        console.log(`${emoji} ${pkg} (${issues.length} occurrence${issues.length > 1 ? 's' : ''})`);\n\n        // Show first 3 files\n        issues.slice(0, 3).forEach(issue => {\n          const relPath = path.relative(this.rootDir, issue.file);\n          console.log(`   📄 ${relPath}`);\n        });\n\n        if (issues.length > 3) {\n          console.log(`   ... and ${issues.length - 3} more file(s)`);\n        }\n\n        console.log();\n      }\n    }\n\n    if (result.unusedDependencies.length > 0) {\n      console.log(`🗑️  Potentially unused dependencies (${result.unusedDependencies.length}):\\n`);\n      result.unusedDependencies.forEach(dep => {\n        console.log(`   • ${dep}`);\n      });\n      console.log('\\n💡 Consider removing if truly unused: npm uninstall <package>\\n');\n    }\n\n    if (result.suggestions.length > 0) {\n      console.log('════════════════════════════════════════\\n');\n      result.suggestions.forEach(s => console.log(s));\n      console.log();\n    }\n\n    // Exit code\n    if (result.issues.length > 0) {\n      console.log('❌ Dependency check failed\\n');\n      process.exit(1);\n    } else {\n      console.log('✅ All dependencies are correctly configured\\n');\n    }\n  }\n\n  async fix(): Promise<void> {\n    console.log('🔧 Auto-fixing dependency issues...\\n');\n\n    const result = await this.analyze();\n\n    if (result.issues.length === 0) {\n      console.log('✅ No issues to fix!\\n');\n      return;\n    }\n\n    const missing = result.issues.filter(i => i.type === 'missing');\n\n    if (missing.length > 0) {\n      const packages = [...new Set(missing.map(i => i.import))];\n\n      console.log(`📦 Installing ${packages.length} missing package(s)...\\n`);\n\n      for (const pkg of packages) {\n        console.log(`   Installing ${pkg}...`);\n        try {\n          const { execSync } = require('child_process');\n          execSync(`npm install ${pkg}`, {\n            cwd: this.rootDir,\n            stdio: 'inherit',\n          });\n          console.log(`   ✅ ${pkg} installed\\n`);\n        } catch (error) {\n          console.log(`   ❌ Failed to install ${pkg}\\n`);\n        }\n      }\n    }\n\n    console.log('✅ Auto-fix completed!\\n');\n  }\n}\n\n// CLI\nasync function main() {\n  const args = process.argv.slice(2);\n  const rootDir = path.join(__dirname, '..');\n\n  const analyzer = new DependencyAnalyzer(rootDir);\n\n  if (args.includes('--fix')) {\n    await analyzer.fix();\n  } else {\n    const result = await analyzer.analyze();\n    analyzer.printReport(result);\n  }\n}\n\nmain().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\generate-component.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\generate-component.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n/**\r\n * Generator per nuovi componenti\r\n *\r\n * Crea automaticamente la struttura completa di un componente con:\r\n * - File .tsx con implementazione base\r\n * - File .types.ts con interfacce\r\n * - File .stories.tsx con story di default\r\n * - File index.ts con exports\r\n * - Cartella examples/ con basic.tsx e advanced.tsx\r\n * - README.md con documentazione template\r\n */\r\n\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { execSync } from 'child_process';\r\n\r\ninterface ComponentConfig {\r\n  name: string;\r\n  category: 'sections' | 'ui' | 'layout';\r\n  description: string;\r\n}\r\n\r\nfunction toPascalCase(str: string): string {\r\n  return str\r\n    .split('-')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join('');\r\n}\r\n\r\nfunction generateTypes(config: ComponentConfig): string {\r\n  const { name } = config;\r\n  const pascalName = toPascalCase(name);\r\n\r\n  return `import React from 'react';\r\n\r\n/**\r\n * ${pascalName} Props\r\n */\r\nexport interface ${pascalName}Props {\r\n  /** Custom className */\r\n  className?: string;\r\n  /** Children elements */\r\n  children?: React.ReactNode;\r\n}\r\n`;\r\n}\r\n\r\nfunction generateComponentTemplate(config: ComponentConfig): string {\r\n  const { name, description } = config;\r\n  const pascalName = toPascalCase(name);\r\n\r\n  return `import React from 'react';\r\nimport type { ${pascalName}Props } from './${pascalName}.types';\r\n\r\n/**\r\n * ${pascalName} - ${description}\r\n */\r\nexport const ${pascalName}: React.FC<${pascalName}Props> = ({\r\n  className = '',\r\n  children,\r\n}) => {\r\n  return (\r\n    <div className={\\`${name} \\${className}\\`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ${pascalName};\r\n`;\r\n}\r\n\r\nfunction generateStories(config: ComponentConfig): string {\r\n  const { name } = config;\r\n  const pascalName = toPascalCase(name);\r\n\r\n  return `import type { Meta, StoryObj } from '@storybook/react';\r\nimport { ${pascalName} } from './${pascalName}';\r\n\r\nconst meta = {\r\n  title: '${config.category.charAt(0).toUpperCase() + config.category.slice(1)}/${pascalName}',\r\n  component: ${pascalName},\r\n  parameters: {\r\n    layout: 'fullscreen',\r\n    docs: {\r\n      description: {\r\n        component: '${config.description}',\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n} satisfies Meta<typeof ${pascalName}>;\r\n\r\nexport default meta;\r\ntype Story = StoryObj<typeof meta>;\r\n\r\nexport const Default: Story = {\r\n  args: {\r\n    children: 'Default ${pascalName}',\r\n  },\r\n};\r\n`;\r\n}\r\n\r\nfunction generateIndex(config: ComponentConfig): string {\r\n  const pascalName = toPascalCase(config.name);\r\n\r\n  return `export { ${pascalName}, default } from './${pascalName}';\r\nexport type { ${pascalName}Props } from './${pascalName}.types';\r\n`;\r\n}\r\n\r\nfunction generateReadme(config: ComponentConfig): string {\r\n  const pascalName = toPascalCase(config.name);\r\n\r\n  return `# ${pascalName}\r\n\r\n## Descrizione\r\n\r\n${config.description}\r\n\r\n## Screenshot\r\n\r\n<!-- TODO: Aggiungere screenshot del componente -->\r\n![${pascalName}](./screenshot.png)\r\n\r\n## Installazione\r\n\r\n\\`\\`\\`bash\r\nimport { ${pascalName} } from '@/components/${config.category}/${pascalName}';\r\n\\`\\`\\`\r\n\r\n## Utilizzo Base\r\n\r\n\\`\\`\\`tsx\r\nimport { ${pascalName} } from '@/components/${config.category}/${pascalName}';\r\n\r\nfunction App() {\r\n  return (\r\n    <${pascalName}>\r\n      Content here\r\n    </${pascalName}>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n## Props\r\n\r\n| Prop | Tipo | Richiesto | Default | Descrizione |\r\n|------|------|-----------|---------|-------------|\r\n| \\`className\\` | \\`string\\` | No | \\`''\\` | Classi CSS aggiuntive |\r\n| \\`children\\` | \\`React.ReactNode\\` | No | - | Contenuto del componente |\r\n\r\n## Accessibilità\r\n\r\n- TODO: Aggiungere note di accessibilità\r\n\r\n## Best Practices\r\n\r\n1. TODO: Aggiungere best practices\r\n\r\n## Dipendenze\r\n\r\n- React 18+\r\n- Tailwind CSS 3+\r\n`;\r\n}\r\n\r\nfunction generateBasicExample(config: ComponentConfig): string {\r\n  const pascalName = toPascalCase(config.name);\r\n\r\n  return `import { ${pascalName} } from '../${pascalName}';\r\n\r\n/**\r\n * Esempio base di ${pascalName}\r\n */\r\nexport default function BasicExample() {\r\n  return (\r\n    <${pascalName}>\r\n      Basic example content\r\n    </${pascalName}>\r\n  );\r\n}\r\n`;\r\n}\r\n\r\nfunction generateAdvancedExample(config: ComponentConfig): string {\r\n  const pascalName = toPascalCase(config.name);\r\n\r\n  return `import { ${pascalName} } from '../${pascalName}';\r\n\r\n/**\r\n * Esempio avanzato di ${pascalName}\r\n */\r\nexport default function AdvancedExample() {\r\n  return (\r\n    <${pascalName} className=\"custom-class\">\r\n      Advanced example with custom styling\r\n    </${pascalName}>\r\n  );\r\n}\r\n`;\r\n}\r\n\r\nasync function generateComponent(config: ComponentConfig) {\r\n  const pascalName = toPascalCase(config.name);\r\n  const componentDir = path.join(\r\n    __dirname,\r\n    '..',\r\n    'components',\r\n    config.category,\r\n    pascalName\r\n  );\r\n\r\n  // Create directory\r\n  if (fs.existsSync(componentDir)) {\r\n    console.error(`❌ Component ${pascalName} already exists!`);\r\n    process.exit(1);\r\n  }\r\n\r\n  fs.mkdirSync(componentDir, { recursive: true });\r\n  fs.mkdirSync(path.join(componentDir, 'examples'), { recursive: true });\r\n\r\n  // Generate files\r\n  const files = {\r\n    [`${pascalName}.types.ts`]: generateTypes(config),\r\n    [`${pascalName}.tsx`]: generateComponentTemplate(config),\r\n    [`${pascalName}.stories.tsx`]: generateStories(config),\r\n    'index.ts': generateIndex(config),\r\n    'README.md': generateReadme(config),\r\n    'examples/basic.tsx': generateBasicExample(config),\r\n    'examples/advanced.tsx': generateAdvancedExample(config),\r\n  };\r\n\r\n  for (const [filename, content] of Object.entries(files)) {\r\n    const filePath = path.join(componentDir, filename);\r\n    fs.writeFileSync(filePath, content, 'utf-8');\r\n    console.log(`✅ Created: ${filename}`);\r\n  }\r\n\r\n  console.log(`\\n🎉 Component ${pascalName} created successfully!`);\r\n  console.log(`📁 Location: ${componentDir}`);\r\n  console.log('\\n📝 Next steps:');\r\n  console.log('1. Implement component logic in .tsx file');\r\n  console.log('2. Add proper types in .types.ts file');\r\n  console.log('3. Create meaningful stories in .stories.tsx');\r\n  console.log('4. Add examples in examples/ folder');\r\n  console.log('5. Update README.md with documentation');\r\n}\r\n\r\n// CLI\r\nconst args = process.argv.slice(2);\r\nif (args.length < 3) {\r\n  console.log('Usage: npm run generate-component <name> <category> <description>');\r\n  console.log('Example: npm run generate-component hero-banner sections \"Hero banner with CTA\"');\r\n  process.exit(1);\r\n}\r\n\r\nconst config: ComponentConfig = {\r\n  name: args[0],\r\n  category: args[1] as any,\r\n  description: args.slice(2).join(' '),\r\n};\r\n\r\ngenerateComponent(config);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\generate-story.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\generate-story.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { Project, SyntaxKind } from 'ts-morph';\n\n/**\n * Story Auto-Generator con Mock Data Intelligente\n *\n * Legge i file .types.ts e genera automaticamente stories complete\n * con dati mock realistici basati sul contesto italiano.\n */\n\ninterface MockDataGenerator {\n  generateForType(typeName: string, propName: string, typeText: string): any;\n}\n\nclass IntelligentMockGenerator implements MockDataGenerator {\n  private italianNames = [\n    'Marco Rossi', 'Laura Bianchi', 'Giuseppe Verdi', 'Anna Ferrari',\n    'Luca Marino', 'Sofia Romano', 'Alessandro Conti', 'Giulia Ricci',\n    'Francesco Esposito', 'Chiara Fontana'\n  ];\n\n  private italianCities = [\n    'Milano', 'Roma', 'Napoli', 'Torino', 'Firenze',\n    'Bologna', 'Venezia', 'Genova', 'Palermo', 'Verona'\n  ];\n\n  private companies = [\n    'TechStart SRL', 'Innovation Hub', 'Digital Solutions', 'Creative Agency',\n    'Code Factory', 'Growth Lab', 'Smart Systems', 'Future Labs'\n  ];\n\n  private roles = [\n    'CEO', 'CTO', 'Product Manager', 'Lead Developer',\n    'Marketing Director', 'Founder', 'Designer', 'Engineer'\n  ];\n\n  private usedIndices = new Set<number>();\n\n  generateForType(typeName: string, propName: string, typeText: string): any {\n    const lowerProp = propName.toLowerCase();\n    const lowerType = typeName.toLowerCase();\n\n    // Handle arrays\n    if (typeText.includes('[]') || typeText.includes('Array<')) {\n      return this.generateArray(typeName, propName, typeText);\n    }\n\n    // Handle specific types based on prop name\n    if (lowerProp.includes('name') && !lowerProp.includes('company')) {\n      return this.generateName();\n    }\n\n    if (lowerProp.includes('email')) {\n      return this.generateEmail();\n    }\n\n    if (lowerProp.includes('phone')) {\n      return this.generatePhone();\n    }\n\n    if (lowerProp.includes('url') || lowerProp.includes('href')) {\n      return this.generateUrl(lowerProp);\n    }\n\n    if (lowerProp.includes('image') || lowerProp.includes('avatar') || lowerProp.includes('src')) {\n      return this.generateImage();\n    }\n\n    if (lowerProp.includes('icon')) {\n      return 'Icon'; // Will be replaced with actual icon import\n    }\n\n    if (lowerProp.includes('title')) {\n      return this.generateTitle(lowerType);\n    }\n\n    if (lowerProp.includes('description')) {\n      return this.generateDescription(lowerType);\n    }\n\n    if (lowerProp.includes('company')) {\n      return this.getRandomItem(this.companies);\n    }\n\n    if (lowerProp.includes('role') || lowerProp.includes('position')) {\n      return this.getRandomItem(this.roles);\n    }\n\n    if (lowerProp.includes('city') || lowerProp.includes('location')) {\n      return this.getRandomItem(this.italianCities);\n    }\n\n    if (lowerProp.includes('address')) {\n      return `Via ${this.getRandomItem(['Roma', 'Milano', 'Venezia'])} ${Math.floor(Math.random() * 200) + 1}, ${this.getRandomItem(this.italianCities)}, Italia`;\n    }\n\n    if (lowerProp.includes('rating')) {\n      return Math.floor(Math.random() * 2) + 4; // 4 or 5\n    }\n\n    if (lowerProp.includes('price') || lowerProp.includes('amount')) {\n      return Math.floor(Math.random() * 100) * 10 + 29;\n    }\n\n    if (lowerProp.includes('date')) {\n      return new Date().toISOString().split('T')[0];\n    }\n\n    // Handle primitive types\n    if (typeText === 'string') {\n      return `Esempio ${propName}`;\n    }\n\n    if (typeText === 'number') {\n      return Math.floor(Math.random() * 100);\n    }\n\n    if (typeText === 'boolean') {\n      return Math.random() > 0.5;\n    }\n\n    // Default\n    return `Mock ${propName}`;\n  }\n\n  private generateArray(typeName: string, propName: string, typeText: string): any[] {\n    const count = Math.floor(Math.random() * 3) + 3; // 3-5 items\n    return Array.from({ length: count }, (_, i) => {\n      if (typeText.includes('string')) {\n        return `${propName} ${i + 1}`;\n      }\n      return { id: i, name: `Item ${i + 1}` };\n    });\n  }\n\n  private generateName(): string {\n    return this.getRandomItem(this.italianNames);\n  }\n\n  private generateEmail(): string {\n    const name = this.generateName().toLowerCase().replace(' ', '.');\n    return `${name}@example.com`;\n  }\n\n  private generatePhone(): string {\n    return `+39 0${Math.floor(Math.random() * 9) + 1} ${this.randomDigits(4)} ${this.randomDigits(4)}`;\n  }\n\n  private generateUrl(context: string): string {\n    if (context.includes('github')) return 'https://github.com';\n    if (context.includes('linkedin')) return 'https://linkedin.com';\n    if (context.includes('twitter')) return 'https://twitter.com';\n    return 'https://example.com';\n  }\n\n  private generateImage(): string {\n    let index: number;\n    do {\n      index = Math.floor(Math.random() * 70) + 1;\n    } while (this.usedIndices.has(index));\n\n    this.usedIndices.add(index);\n    return `https://i.pravatar.cc/150?img=${index}`;\n  }\n\n  private generateTitle(context: string): string {\n    const titles = {\n      hero: 'Trasforma il tuo Business con la Nostra Soluzione',\n      feature: 'Funzionalità Potente',\n      benefit: 'Vantaggio Competitivo',\n      pricing: 'Piano Professionale',\n      testimonial: 'Esperienza Eccezionale',\n      cta: 'Inizia Oggi',\n      default: 'Titolo Coinvolgente'\n    };\n\n    for (const [key, value] of Object.entries(titles)) {\n      if (context.includes(key)) return value;\n    }\n\n    return titles.default;\n  }\n\n  private generateDescription(context: string): string {\n    const descriptions = {\n      hero: 'Soluzione innovativa per accelerare la crescita del tuo business e raggiungere risultati straordinari.',\n      feature: 'Funzionalità progettata per semplificare il tuo workflow e aumentare la produttività del team.',\n      benefit: 'Ottieni risultati concreti e misurabili in tempi rapidi con il nostro approccio comprovato.',\n      pricing: 'Include tutto il necessario per far crescere il tuo business senza compromessi.',\n      testimonial: 'Questa piattaforma ha trasformato il modo in cui lavoriamo, con risultati oltre le aspettative.',\n      cta: 'Unisciti a migliaia di clienti soddisfatti e inizia oggi stesso la tua trasformazione digitale.',\n      default: 'Descrizione dettagliata che spiega i vantaggi e le caratteristiche principali.'\n    };\n\n    for (const [key, value] of Object.entries(descriptions)) {\n      if (context.includes(key)) return value;\n    }\n\n    return descriptions.default;\n  }\n\n  private getRandomItem<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  private randomDigits(count: number): string {\n    return Array.from({ length: count }, () => Math.floor(Math.random() * 10)).join('');\n  }\n\n  reset() {\n    this.usedIndices.clear();\n  }\n}\n\nclass StoryGenerator {\n  private project: Project;\n  private mockGenerator: IntelligentMockGenerator;\n\n  constructor() {\n    this.project = new Project({\n      tsConfigFilePath: path.join(__dirname, '..', 'tsconfig.json'),\n    });\n    this.mockGenerator = new IntelligentMockGenerator();\n  }\n\n  async generateStory(componentPath: string): Promise<void> {\n    const componentName = path.basename(componentPath);\n    const typesFile = path.join(componentPath, `${componentName}.types.ts`);\n    const storiesFile = path.join(componentPath, `${componentName}.stories.tsx`);\n\n    if (!fs.existsSync(typesFile)) {\n      console.error(`❌ Types file not found: ${typesFile}`);\n      return;\n    }\n\n    console.log(`🔍 Analyzing ${componentName}...`);\n\n    // Parse types file\n    const sourceFile = this.project.addSourceFileAtPath(typesFile);\n    const interfaces = sourceFile.getInterfaces();\n\n    // Find the main Props interface\n    const propsInterface = interfaces.find(i =>\n      i.getName().endsWith('Props') || i.getName().includes(componentName)\n    );\n\n    if (!propsInterface) {\n      console.error(`❌ No Props interface found in ${typesFile}`);\n      return;\n    }\n\n    console.log(`📝 Found interface: ${propsInterface.getName()}`);\n\n    // Generate mock data\n    const mockData = this.generateMockData(propsInterface, componentName);\n\n    // Detect required icons\n    const icons = this.detectIcons(mockData);\n\n    // Generate story file\n    const storyContent = this.generateStoryContent(\n      componentName,\n      propsInterface.getName(),\n      mockData,\n      icons\n    );\n\n    // Write story file\n    fs.writeFileSync(storiesFile, storyContent, 'utf-8');\n    console.log(`✅ Generated story: ${storiesFile}`);\n  }\n\n  private generateMockData(propsInterface: any, componentName: string): any {\n    this.mockGenerator.reset();\n    const mockData: any = {};\n\n    const properties = propsInterface.getProperties();\n\n    for (const prop of properties) {\n      const propName = prop.getName();\n      const propType = prop.getType();\n      const typeText = propType.getText();\n\n      // Skip optional className and similar props\n      if (propName === 'className' || propName === 'style') {\n        continue;\n      }\n\n      // Generate mock value\n      mockData[propName] = this.generateMockValue(\n        propName,\n        typeText,\n        componentName,\n        prop\n      );\n    }\n\n    return mockData;\n  }\n\n  private generateMockValue(\n    propName: string,\n    typeText: string,\n    componentName: string,\n    prop: any\n  ): any {\n    const isOptional = prop.hasQuestionToken();\n\n    // Handle arrays\n    if (typeText.includes('[]')) {\n      const itemType = typeText.replace('[]', '').trim();\n      return this.generateArrayData(propName, itemType, componentName);\n    }\n\n    // Handle specific object types\n    if (typeText.includes('{')) {\n      return this.generateObjectData(propName, typeText, componentName);\n    }\n\n    // Handle primitive types with intelligent mocking\n    return this.mockGenerator.generateForType(componentName, propName, typeText);\n  }\n\n  private generateArrayData(propName: string, itemType: string, componentName: string): any[] {\n    const count = ['features', 'benefits', 'items'].some(k => propName.toLowerCase().includes(k)) ? 4 : 3;\n\n    return Array.from({ length: count }, (_, i) => {\n      if (itemType === 'string') {\n        return `${propName} ${i + 1}`;\n      }\n\n      // Generate object based on prop name context\n      return this.generateContextualObject(propName, i, componentName);\n    });\n  }\n\n  private generateContextualObject(propName: string, index: number, componentName: string): any {\n    const lower = propName.toLowerCase();\n\n    if (lower.includes('feature')) {\n      return {\n        icon: '<IconPlaceholder />',\n        title: `Funzionalità ${index + 1}`,\n        description: 'Descrizione della funzionalità che aiuta gli utenti a raggiungere i loro obiettivi.',\n      };\n    }\n\n    if (lower.includes('benefit')) {\n      return {\n        icon: '<IconPlaceholder />',\n        title: `Vantaggio ${index + 1}`,\n        description: 'Vantaggio concreto che porta valore misurabile al business.',\n        value: (index + 1) * 1000,\n      };\n    }\n\n    if (lower.includes('testimonial')) {\n      return {\n        name: this.mockGenerator['generateName'](),\n        role: this.mockGenerator['getRandomItem'](this.mockGenerator['roles']),\n        company: this.mockGenerator['getRandomItem'](this.mockGenerator['companies']),\n        quote: 'Questa soluzione ha trasformato il nostro modo di lavorare, con risultati oltre le aspettative.',\n        rating: 5,\n        image: this.mockGenerator['generateImage'](),\n      };\n    }\n\n    if (lower.includes('pricing') || lower.includes('plan')) {\n      const prices = [29, 79, 149];\n      return {\n        name: ['Starter', 'Professional', 'Enterprise'][index] || `Piano ${index + 1}`,\n        price: prices[index] || 99,\n        features: [\n          'Funzionalità 1',\n          'Funzionalità 2',\n          'Funzionalità 3',\n        ],\n      };\n    }\n\n    return {\n      id: index,\n      name: `Item ${index + 1}`,\n    };\n  }\n\n  private generateObjectData(propName: string, typeText: string, componentName: string): any {\n    // Simplified object generation\n    return {\n      placeholder: `Object for ${propName}`,\n    };\n  }\n\n  private detectIcons(mockData: any): string[] {\n    const icons = new Set<string>();\n    const jsonStr = JSON.stringify(mockData);\n\n    // Common icons to use\n    const commonIcons = ['Check', 'X', 'Star', 'Zap', 'Shield', 'Users', 'TrendingUp', 'Award'];\n\n    if (jsonStr.includes('Icon') || jsonStr.includes('icon')) {\n      commonIcons.forEach(icon => icons.add(icon));\n    }\n\n    return Array.from(icons);\n  }\n\n  private generateStoryContent(\n    componentName: string,\n    propsInterfaceName: string,\n    mockData: any,\n    icons: string[]\n  ): string {\n    const iconImports = icons.length > 0\n      ? `import { ${icons.join(', ')} } from 'lucide-react';\\n`\n      : '';\n\n    const mockDataStr = JSON.stringify(mockData, null, 6)\n      .replace(/\"<IconPlaceholder \\/>\"/g, '<Check className=\"w-5 h-5\" />')\n      .replace(/\\\\\"/g, '\"');\n\n    return `import type { Meta, StoryObj } from '@storybook/react';\nimport { ${componentName} } from './${componentName}';\n${iconImports}\nconst meta: Meta<typeof ${componentName}> = {\n  title: 'Sections/${componentName}',\n  component: ${componentName},\n  parameters: {\n    layout: 'fullscreen',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ${componentName}>;\n\nexport const Default: Story = {\n  args: ${mockDataStr},\n};\n`;\n  }\n}\n\n// CLI\nasync function main() {\n  const args = process.argv.slice(2);\n\n  if (args.length === 0) {\n    console.log(`\n📖 Story Auto-Generator\n\nUsage:\n  npm run generate:story <component-name>\n  npm run generate:story --all\n\nExamples:\n  npm run generate:story HeroSection\n  npm run generate:story --all\n\nFeatures:\n  ✨ Intelligent mock data generation\n  🇮🇹 Italian-first content\n  🎨 Automatic icon detection\n  📊 Realistic data based on context\n    `);\n    process.exit(0);\n  }\n\n  const generator = new StoryGenerator();\n\n  if (args[0] === '--all') {\n    console.log('🚀 Generating stories for all components...\\n');\n\n    const componentsDir = path.join(__dirname, '..', 'components');\n    const categories = fs.readdirSync(componentsDir);\n\n    for (const category of categories) {\n      const categoryPath = path.join(componentsDir, category);\n      if (!fs.statSync(categoryPath).isDirectory()) continue;\n\n      const components = fs.readdirSync(categoryPath);\n      for (const component of components) {\n        const componentPath = path.join(categoryPath, component);\n        if (!fs.statSync(componentPath).isDirectory()) continue;\n\n        await generator.generateStory(componentPath);\n      }\n    }\n\n    console.log('\\n✅ All stories generated successfully!');\n  } else {\n    const componentName = args[0];\n\n    // Find component\n    const componentsDir = path.join(__dirname, '..', 'components');\n    const categories = fs.readdirSync(componentsDir);\n\n    let found = false;\n    for (const category of categories) {\n      const categoryPath = path.join(componentsDir, category);\n      const componentPath = path.join(categoryPath, componentName);\n\n      if (fs.existsSync(componentPath)) {\n        await generator.generateStory(componentPath);\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      console.error(`❌ Component not found: ${componentName}`);\n      process.exit(1);\n    }\n  }\n}\n\nmain().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\generate-test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\generate-test.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport { readFileSync, writeFileSync, existsSync } from 'fs'\nimport { Project } from 'ts-morph'\nimport { glob } from 'glob'\n\ninterface ComponentInfo {\n  name: string\n  path: string\n  hasTest: boolean\n  hasStory: boolean\n  hasTypes: boolean\n  props: PropInfo[]\n  events: string[]\n  variants: Record<string, string[]>\n}\n\ninterface PropInfo {\n  name: string\n  type: string\n  required: boolean\n  defaultValue?: string\n}\n\n/**\n * Analyze all components and their test status\n */\nasync function analyzeComponents(): Promise<ComponentInfo[]> {\n  const components: ComponentInfo[] = []\n  const componentFiles = glob.sync('components/**/*.tsx', {\n    ignore: ['**/*.test.tsx', '**/*.stories.tsx', '**/examples/**'],\n  })\n\n  console.log(`\\n📁 Found ${componentFiles.length} components\\n`)\n\n  for (const file of componentFiles) {\n    // Extract component name from path (works with both / and \\ separators)\n    const name = file.split(/[/\\\\]/).pop()?.replace('.tsx', '') || ''\n    // Get directory using string manipulation to handle both path separators\n    const lastSep = Math.max(file.lastIndexOf('/'), file.lastIndexOf('\\\\'))\n    const dir = file.substring(0, lastSep)\n\n    const testFile = `${dir}/${name}.test.tsx`\n    const typesFile = `${dir}/${name}.types.ts`\n    const storyFile = `${dir}/${name}.stories.tsx`\n\n    const hasTest = existsSync(testFile) || existsSync(testFile.replace(/\\//g, '\\\\'))\n    const hasTypes = existsSync(typesFile) || existsSync(typesFile.replace(/\\//g, '\\\\'))\n    const hasStory = existsSync(storyFile) || existsSync(storyFile.replace(/\\//g, '\\\\'))\n\n    let props: PropInfo[] = []\n    if (hasTypes) {\n      props = extractPropsFromTypes(typesFile, name)\n    }\n\n    const events = extractEvents(file)\n    const variants = hasStory ? extractVariantsFromStory(storyFile) : {}\n\n    components.push({\n      name,\n      path: file,\n      hasTest,\n      hasStory,\n      hasTypes,\n      props,\n      events,\n      variants,\n    })\n  }\n\n  return components\n}\n\n/**\n * Extract props from .types.ts file using ts-morph\n */\nfunction extractPropsFromTypes(typesFile: string, componentName: string): PropInfo[] {\n  const props: PropInfo[] = []\n\n  try {\n    const project = new Project()\n    const sourceFile = project.addSourceFileAtPath(typesFile)\n    const propsInterfaceName = `${componentName}Props`\n\n    const propsInterface = sourceFile.getInterface(propsInterfaceName)\n    if (!propsInterface) {\n      return []\n    }\n\n    for (const prop of propsInterface.getProperties()) {\n      const name = prop.getName()\n      const type = prop.getType().getText()\n      const required = !prop.hasQuestionToken()\n      const initializer = prop.getInitializer()\n      const defaultValue = initializer?.getText()\n\n      props.push({\n        name,\n        type: simplifyType(type),\n        required,\n        defaultValue,\n      })\n    }\n  } catch (error) {\n    console.warn(`⚠️  Could not parse types for ${componentName}:`, error)\n  }\n\n  return props\n}\n\n/**\n * Simplify complex TypeScript types for easier mock generation\n */\nfunction simplifyType(type: string): string {\n  // Remove import references\n  type = type.replace(/import\\(\".*?\"\\)\\./g, '')\n\n  // Simplify React types\n  if (type.includes('ReactNode')) return 'ReactNode'\n  if (type.includes('ReactElement')) return 'ReactElement'\n  if (type.includes('MouseEvent')) return 'MouseEventHandler'\n  if (type.includes('ChangeEvent')) return 'ChangeEventHandler'\n  if (type.includes('FormEvent')) return 'FormEventHandler'\n  if (type.includes('KeyboardEvent')) return 'KeyboardEventHandler'\n\n  // Keep basic types\n  if (['string', 'number', 'boolean'].includes(type)) return type\n\n  // Union types\n  if (type.includes('|')) {\n    const options = type.split('|').map(t => t.trim().replace(/['\"]/g, ''))\n    return options[0] // Use first option as default\n  }\n\n  return type\n}\n\n/**\n * Extract event handlers from component\n */\nfunction extractEvents(componentFile: string): string[] {\n  const content = readFileSync(componentFile, 'utf-8')\n  const events: string[] = []\n\n  // Find event handler props (onClick, onChange, etc.)\n  const eventRegex = /on[A-Z]\\w+/g\n  const matches = content.match(eventRegex)\n\n  if (matches) {\n    events.push(...new Set(matches))\n  }\n\n  return events\n}\n\n/**\n * Extract variants from .stories.tsx\n */\nfunction extractVariantsFromStory(storyFile: string): Record<string, string[]> {\n  const content = readFileSync(storyFile, 'utf-8')\n  const variants: Record<string, string[]> = {}\n\n  // Look for argTypes with options\n  const argTypesMatch = content.match(/argTypes:\\s*{([^}]+)}/s)\n  if (argTypesMatch) {\n    const argTypesContent = argTypesMatch[1]\n    const optionsRegex = /(\\w+):\\s*{[^}]*options:\\s*\\[([^\\]]+)\\]/g\n    let match\n\n    while ((match = optionsRegex.exec(argTypesContent)) !== null) {\n      const [, propName, optionsStr] = match\n      const options = optionsStr\n        .split(',')\n        .map(o => o.trim().replace(/['\"]/g, ''))\n      variants[propName] = options\n    }\n  }\n\n  return variants\n}\n\n/**\n * Generate mock value for a prop based on its type\n */\nfunction generateMockValue(prop: PropInfo): string {\n  const { type, required } = prop\n\n  if (type === 'string') return \"'Test'\"\n  if (type === 'number') return '42'\n  if (type === 'boolean') return 'true'\n  if (type === 'ReactNode' || type === 'ReactElement') return \"'Test Content'\"\n  if (type.includes('EventHandler')) return 'vi.fn()'\n  if (type.startsWith('\"') || type.startsWith(\"'\")) return type\n\n  // For complex types, return undefined for optional props\n  if (!required) return 'undefined'\n\n  return '{}'\n}\n\n/**\n * Generate test file content\n */\nfunction generateTestContent(component: ComponentInfo): string {\n  const { name, props, events, variants } = component\n  const hasProps = props.length > 0\n  const hasEvents = events.length > 0\n  const hasVariants = Object.keys(variants).length > 0\n\n  const defaultPropsObj = props\n    .filter(p => p.required || p.defaultValue)\n    .map(p => `    ${p.name}: ${generateMockValue(p)},`)\n    .join('\\n')\n\n  const imports = `import { describe, it, expect, vi } from 'vitest'\nimport { render, screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport { ${name} } from './${name}'\n${hasProps ? `import type { ${name}Props } from './${name}.types'` : ''}\n\nexpect.extend(toHaveNoViolations)`\n\n  const setup = hasProps\n    ? `\n  const defaultProps: ${name}Props = {\n${defaultPropsObj}\n  }`\n    : ''\n\n  const renderingTests = `\n  describe('Rendering', () => {\n    it('renders without crashing', () => {\n      render(<${name} ${hasProps ? '{...defaultProps}' : ''} />)\n      expect(screen.getByTestId('${name.toLowerCase()}')).toBeInTheDocument()\n    })\n\n    it('renders children correctly', () => {\n      const testContent = 'Test Content'\n      render(<${name} ${hasProps ? '{...defaultProps}' : ''}>{testContent}</${name}>)\n      expect(screen.getByText(testContent)).toBeInTheDocument()\n    })${hasVariants ? generateVariantTests(name, variants) : ''}\n  })`\n\n  const propsTests =\n    hasProps && props.filter(p => !p.name.startsWith('on')).length > 0\n      ? `\n\n  describe('Props', () => {${generatePropTests(name, props)}\n  })`\n      : ''\n\n  const interactionTests =\n    hasEvents\n      ? `\n\n  describe('Interactions', () => {${generateEventTests(name, events)}\n  })`\n      : ''\n\n  const accessibilityTests = `\n\n  describe('Accessibility', () => {\n    it('has no accessibility violations', async () => {\n      const { container } = render(<${name} ${hasProps ? '{...defaultProps}' : ''} />)\n      const results = await axe(container)\n      expect(results).toHaveNoViolations()\n    })\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup()\n      render(<${name} ${hasProps ? '{...defaultProps}' : ''} />)\n      await user.tab()\n      const focusedElement = screen.getByTestId('${name.toLowerCase()}')\n      expect(document.activeElement).toBe(focusedElement)\n    })\n\n    it('has correct ARIA attributes', () => {\n      render(<${name} ${hasProps ? '{...defaultProps}' : ''} />)\n      const element = screen.getByTestId('${name.toLowerCase()}')\n      expect(element).toHaveAttribute('role')\n    })\n  })`\n\n  const snapshotTests = `\n\n  describe('Visual Regression', () => {\n    it('matches snapshot', () => {\n      const { container } = render(<${name} ${hasProps ? '{...defaultProps}' : ''} />)\n      expect(container.firstChild).toMatchSnapshot()\n    })\n  })`\n\n  return `${imports}\n\ndescribe('${name}', () => {${setup}\n${renderingTests}${propsTests}${interactionTests}${accessibilityTests}${snapshotTests}\n})\n`\n}\n\n/**\n * Generate variant tests\n */\nfunction generateVariantTests(name: string, variants: Record<string, string[]>): string {\n  let tests = ''\n\n  for (const [propName, options] of Object.entries(variants)) {\n    for (const option of options.slice(0, 3)) {\n      // Test first 3 variants\n      tests += `\n\n    it('renders ${propName}=\"${option}\" correctly', () => {\n      render(<${name} {...defaultProps} ${propName}=\"${option}\" />)\n      expect(screen.getByTestId('${name.toLowerCase()}')).toHaveAttribute('data-${propName}', '${option}')\n    })`\n    }\n  }\n\n  return tests\n}\n\n/**\n * Generate prop tests\n */\nfunction generatePropTests(name: string, props: PropInfo[]): string {\n  const testableProps = props\n    .filter(p => !p.name.startsWith('on') && !p.name.includes('children'))\n    .slice(0, 5) // Test first 5 props\n\n  return testableProps\n    .map(\n      prop => `\n\n    it('applies ${prop.name} prop correctly', () => {\n      const testValue = ${generateMockValue(prop)}\n      render(<${name} {...defaultProps} ${prop.name}={testValue} />)\n      const element = screen.getByTestId('${name.toLowerCase()}')\n      expect(element).toBeInTheDocument()\n      // Add specific assertion based on prop type\n    })`\n    )\n    .join('')\n}\n\n/**\n * Generate event tests\n */\nfunction generateEventTests(name: string, events: string[]): string {\n  return events\n    .slice(0, 3) // Test first 3 events\n    .map(\n      event => `\n\n    it('handles ${event} correctly', async () => {\n      const handler = vi.fn()\n      const user = userEvent.setup()\n      render(<${name} {...defaultProps} ${event}={handler} />)\n\n      const element = screen.getByTestId('${name.toLowerCase()}')\n      await user.click(element)\n\n      expect(handler).toHaveBeenCalledTimes(1)\n    })`\n    )\n    .join('')\n}\n\n/**\n * Generate test file for a component\n */\nasync function generateTest(component: ComponentInfo): Promise<boolean> {\n  const { name, path, hasTest } = component\n\n  if (hasTest) {\n    console.log(`⏭️  ${name} - test already exists`)\n    return false\n  }\n\n  try {\n    const testContent = generateTestContent(component)\n    // Get the directory of the component file\n    const componentDir = path.substring(0, path.lastIndexOf('/') + 1) || path.substring(0, path.lastIndexOf('\\\\') + 1)\n    const testPath = `${componentDir}${name}.test.tsx`\n\n    writeFileSync(testPath, testContent, 'utf-8')\n    console.log(`✅ ${name} - test generated (${testPath})`)\n\n    return true\n  } catch (error) {\n    console.error(`❌ ${name} - failed to generate test:`, error)\n    return false\n  }\n}\n\n/**\n * Main execution\n */\nasync function main() {\n  const args = process.argv.slice(2)\n  const command = args[0]\n  const target = args[1]\n\n  console.log('\\n🧪 Test Generator\\n')\n\n  const components = await analyzeComponents()\n\n  if (command === 'analyze') {\n    // Show analysis\n    const withoutTests = components.filter(c => !c.hasTest)\n    const withTests = components.filter(c => c.hasTest)\n\n    console.log(`📊 Test Coverage Analysis\\n`)\n    console.log(`Total components: ${components.length}`)\n    console.log(`With tests: ${withTests.length} (${((withTests.length / components.length) * 100).toFixed(1)}%)`)\n    console.log(`Without tests: ${withoutTests.length}\\n`)\n\n    console.log(`🔴 HIGH Priority (UI Components):`)\n    withoutTests\n      .filter(c => c.path.includes('/ui/'))\n      .slice(0, 10)\n      .forEach(c => console.log(`  - ${c.name}`))\n\n    console.log(`\\n🟡 MEDIUM Priority (Sections):`)\n    withoutTests\n      .filter(c => c.path.includes('/sections/'))\n      .slice(0, 10)\n      .forEach(c => console.log(`  - ${c.name}`))\n\n    console.log(`\\n💡 Run: npm run generate:test -- generate --all`)\n    console.log(`   Or: npm run generate:test -- generate <ComponentName>`)\n    return\n  }\n\n  if (command === 'generate') {\n    let targetComponents: ComponentInfo[] = []\n\n    if (target === '--all') {\n      targetComponents = components.filter(c => !c.hasTest)\n    } else if (target === '--priority') {\n      const level = args[2] || 'high'\n      if (level === 'high') {\n        targetComponents = components.filter(c => !c.hasTest && c.path.includes('/ui/'))\n      } else if (level === 'medium') {\n        targetComponents = components.filter(c => !c.hasTest && c.path.includes('/sections/'))\n      } else {\n        targetComponents = components.filter(c => !c.hasTest && c.path.includes('/effects/'))\n      }\n    } else if (target) {\n      targetComponents = components.filter(c => c.name === target && !c.hasTest)\n      if (targetComponents.length === 0) {\n        console.error(`❌ Component \"${target}\" not found or already has tests`)\n        process.exit(1)\n      }\n    } else {\n      console.error('Usage: npm run generate:test -- generate <ComponentName|--all|--priority high>')\n      process.exit(1)\n    }\n\n    console.log(`\\n🎯 Generating tests for ${targetComponents.length} components...\\n`)\n\n    let generated = 0\n    for (const component of targetComponents) {\n      const success = await generateTest(component)\n      if (success) generated++\n    }\n\n    console.log(`\\n✨ Generated ${generated} test files!`)\n    console.log(`\\n🧪 Run tests: npm test`)\n    console.log(`📊 Check coverage: npm run test:coverage`)\n  } else {\n    console.log('Commands:')\n    console.log('  analyze           - Analyze test coverage')\n    console.log('  generate <name>   - Generate test for component')\n    console.log('  generate --all    - Generate tests for all components')\n    console.log('  generate --priority <high|medium|low> - Generate by priority')\n  }\n}\n\n// Execute\nmain().catch(console.error)\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\migrate-dependencies.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\migrate-dependencies.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport { execSync } from 'child_process'\nimport { readFileSync, writeFileSync, existsSync } from 'fs'\n\ninterface OutdatedPackage {\n  current: string\n  wanted: string\n  latest: string\n  type: 'dependencies' | 'devDependencies'\n}\n\ninterface MigrationPlan {\n  package: string\n  currentVersion: string\n  targetVersion: string\n  updateType: 'patch' | 'minor' | 'major'\n  breakingChanges: string[]\n  migrationSteps: string[]\n  estimatedTime: string\n  riskLevel: 'low' | 'medium' | 'high'\n}\n\n/**\n * Execute command and return output\n */\nfunction exec(command: string): string {\n  try {\n    return execSync(command, { encoding: 'utf-8', stdio: 'pipe' })\n  } catch (error: any) {\n    return error.stdout || ''\n  }\n}\n\n/**\n * Get outdated packages\n */\nfunction getOutdatedPackages(): Record<string, OutdatedPackage> {\n  console.log('📦 Analyzing dependencies...\\n')\n\n  try {\n    const output = exec('npm outdated --json')\n    if (!output) return {}\n    return JSON.parse(output)\n  } catch (error) {\n    console.log('⚠️  No outdated packages found or error parsing npm outdated')\n    return {}\n  }\n}\n\n/**\n * Get security vulnerabilities\n */\nfunction getVulnerabilities(): any {\n  try {\n    const output = exec('npm audit --json')\n    return JSON.parse(output)\n  } catch (error) {\n    return { metadata: { vulnerabilities: { total: 0 } } }\n  }\n}\n\n/**\n * Determine update type\n */\nfunction getUpdateType(current: string, latest: string): 'patch' | 'minor' | 'major' {\n  const [currentMajor, currentMinor] = current.split('.').map(Number)\n  const [latestMajor, latestMinor] = latest.split('.').map(Number)\n\n  if (latestMajor > currentMajor) return 'major'\n  if (latestMinor > currentMinor) return 'minor'\n  return 'patch'\n}\n\n/**\n * Get breaking changes info for known packages\n */\nfunction getBreakingChanges(packageName: string, fromVersion: string, toVersion: string): string[] {\n  const changes: Record<string, string[]> = {\n    'storybook': [\n      'CSF3 format required for all stories',\n      'main.ts addon configuration format changed',\n      'preview.ts decorators signature updated',\n      'Removed deprecated MDX1 support',\n      'Updated addon APIs'\n    ],\n    'tailwindcss': [\n      'New CSS engine with better performance',\n      'Config file format changed (JS → TS recommended)',\n      'Some utility classes renamed',\n      'Color palette structure updated',\n      'JIT mode is default (already was in v3)'\n    ],\n    'eslint': [\n      'Flat config format required (.eslintrc.json → eslint.config.js)',\n      'Plugin loading mechanism changed',\n      'Some rules renamed or removed',\n      'New parser configuration format'\n    ],\n    'react': [\n      'New JSX transform (already in 18)',\n      'Concurrent features enabled by default',\n      'Automatic batching for all updates',\n      'New client/server rendering APIs'\n    ]\n  }\n\n  // Check if package name contains any known package\n  for (const [key, value] of Object.entries(changes)) {\n    if (packageName.includes(key)) {\n      return value\n    }\n  }\n\n  return ['Check package changelog for breaking changes']\n}\n\n/**\n * Generate migration plan\n */\nfunction generateMigrationPlan(packageName: string, info: OutdatedPackage): MigrationPlan {\n  const updateType = getUpdateType(info.current, info.latest)\n  const breakingChanges = updateType === 'major'\n    ? getBreakingChanges(packageName, info.current, info.latest)\n    : []\n\n  const migrationSteps: string[] = []\n  const isStorybookPackage = packageName.includes('@storybook')\n\n  if (isStorybookPackage && updateType === 'major') {\n    migrationSteps.push(\n      'Backup current configuration',\n      'Run npx storybook@latest upgrade',\n      'Update all .stories.tsx files to CSF3 format',\n      'Fix any breaking changes in main.ts and preview.ts',\n      'Test all stories in Storybook',\n      'Run full test suite'\n    )\n  } else if (packageName === 'tailwindcss' && updateType === 'major') {\n    migrationSteps.push(\n      'Update tailwind.config.js to tailwind.config.ts',\n      'Run npx @tailwindcss/upgrade',\n      'Update PostCSS config if needed',\n      'Test all components visually',\n      'Check for utility class changes'\n    )\n  } else if (packageName === 'eslint' && updateType === 'major') {\n    migrationSteps.push(\n      'Convert .eslintrc.json to eslint.config.js',\n      'Run npx @eslint/migrate-config',\n      'Update plugin configurations',\n      'Fix any linting errors',\n      'Test linting on CI'\n    )\n  } else {\n    migrationSteps.push(\n      'Backup package.json',\n      `npm install ${packageName}@${info.latest}`,\n      'Run type-check',\n      'Run test suite',\n      'Run build',\n      'Fix any breaking changes'\n    )\n  }\n\n  const estimatedTime = updateType === 'major'\n    ? isStorybookPackage ? '2-3 hours' : '1-2 hours'\n    : '10-30 minutes'\n\n  const riskLevel = updateType === 'major' ? 'high' : updateType === 'minor' ? 'medium' : 'low'\n\n  return {\n    package: packageName,\n    currentVersion: info.current,\n    targetVersion: info.latest,\n    updateType,\n    breakingChanges,\n    migrationSteps,\n    estimatedTime,\n    riskLevel\n  }\n}\n\n/**\n * Backup current state\n */\nfunction backup(): void {\n  console.log('💾 Creating backup...')\n\n  try {\n    const packageJson = readFileSync('package.json', 'utf-8')\n    writeFileSync('package.json.backup', packageJson)\n\n    const packageLock = readFileSync('package-lock.json', 'utf-8')\n    writeFileSync('package-lock.json.backup', packageLock)\n\n    exec('git stash push -m \"pre-migration-backup\"')\n    console.log('✓ Backup created\\n')\n  } catch (error) {\n    console.log('⚠️  Could not create full backup, continuing...\\n')\n  }\n}\n\n/**\n * Restore from backup\n */\nfunction restore(): void {\n  console.log('🔄 Restoring from backup...')\n\n  try {\n    if (existsSync('package.json.backup')) {\n      const backup = readFileSync('package.json.backup', 'utf-8')\n      writeFileSync('package.json', backup)\n    }\n\n    if (existsSync('package-lock.json.backup')) {\n      const backup = readFileSync('package-lock.json.backup', 'utf-8')\n      writeFileSync('package-lock.json', backup)\n    }\n\n    exec('npm install')\n    exec('git stash pop')\n    console.log('✓ Restored from backup\\n')\n  } catch (error) {\n    console.log('⚠️  Could not restore fully, please check manually\\n')\n  }\n}\n\n/**\n * Run safety checks\n */\nfunction runSafetyChecks(): boolean {\n  console.log('🔍 Running safety checks...\\n')\n\n  let passed = true\n\n  // Check git status\n  const gitStatus = exec('git status --porcelain')\n  if (gitStatus.trim()) {\n    console.log('⚠️  Git working directory is not clean')\n    console.log('   Commit or stash changes before migration\\n')\n    passed = false\n  } else {\n    console.log('✓ Git working directory clean')\n  }\n\n  // Check TypeScript\n  try {\n    exec('npx tsc --noEmit')\n    console.log('✓ TypeScript compiles')\n  } catch (error) {\n    console.log('⚠️  TypeScript errors detected')\n    passed = false\n  }\n\n  // Check tests\n  try {\n    const testOutput = exec('npm test -- --run')\n    if (testOutput.includes('FAIL')) {\n      console.log('⚠️  Some tests are failing')\n      passed = false\n    } else {\n      console.log('✓ Tests passing')\n    }\n  } catch (error) {\n    console.log('⚠️  Could not run tests')\n  }\n\n  console.log()\n  return passed\n}\n\n/**\n * Migrate single package\n */\nfunction migratePackage(packageName: string, targetVersion: string): boolean {\n  console.log(`\\n🔄 Migrating ${packageName} to ${targetVersion}...\\n`)\n\n  try {\n    // Install new version\n    console.log(`📦 Installing ${packageName}@${targetVersion}...`)\n    exec(`npm install ${packageName}@${targetVersion}`)\n    console.log('✓ Installed\\n')\n\n    // Run checks\n    console.log('🧪 Running checks...')\n\n    try {\n      exec('npx tsc --noEmit')\n      console.log('✓ TypeScript OK')\n    } catch (error) {\n      console.log('❌ TypeScript errors')\n      return false\n    }\n\n    try {\n      const testOutput = exec('npm test -- --run')\n      if (!testOutput.includes('FAIL')) {\n        console.log('✓ Tests OK')\n      } else {\n        console.log('❌ Tests failed')\n        return false\n      }\n    } catch (error) {\n      console.log('⚠️  Tests check skipped')\n    }\n\n    try {\n      exec('npm run build')\n      console.log('✓ Build OK')\n    } catch (error) {\n      console.log('❌ Build failed')\n      return false\n    }\n\n    console.log('\\n✅ Migration successful!\\n')\n    return true\n\n  } catch (error) {\n    console.log('❌ Migration failed\\n')\n    return false\n  }\n}\n\n/**\n * Command: audit\n */\nfunction commandAudit(): void {\n  const outdated = getOutdatedPackages()\n  const audit = getVulnerabilities()\n\n  const outdatedCount = Object.keys(outdated).length\n  const vulnerabilities = audit.metadata?.vulnerabilities?.total || 0\n\n  console.log(`📊 Dependency Audit\\n`)\n  console.log(`Outdated Packages: ${outdatedCount}`)\n  console.log(`Security Issues: ${vulnerabilities}\\n`)\n\n  if (outdatedCount === 0) {\n    console.log('✅ All dependencies up to date!\\n')\n    return\n  }\n\n  // Group by update type\n  const major: string[] = []\n  const minor: string[] = []\n  const patch: string[] = []\n\n  for (const [pkg, info] of Object.entries(outdated)) {\n    const updateType = getUpdateType(info.current, info.latest)\n    if (updateType === 'major') major.push(pkg)\n    else if (updateType === 'minor') minor.push(pkg)\n    else patch.push(pkg)\n  }\n\n  if (major.length > 0) {\n    console.log(`🔴 MAJOR Updates (${major.length} packages):`)\n    major.slice(0, 5).forEach(pkg => {\n      console.log(`  - ${pkg} ${outdated[pkg].current} → ${outdated[pkg].latest}`)\n    })\n    if (major.length > 5) console.log(`  ... and ${major.length - 5} more`)\n    console.log()\n  }\n\n  if (minor.length > 0) {\n    console.log(`🟡 MINOR Updates (${minor.length} packages):`)\n    minor.slice(0, 5).forEach(pkg => {\n      console.log(`  - ${pkg} ${outdated[pkg].current} → ${outdated[pkg].latest}`)\n    })\n    if (minor.length > 5) console.log(`  ... and ${minor.length - 5} more`)\n    console.log()\n  }\n\n  if (patch.length > 0) {\n    console.log(`🟢 PATCH Updates (${patch.length} packages):`)\n    patch.slice(0, 5).forEach(pkg => {\n      console.log(`  - ${pkg} ${outdated[pkg].current} → ${outdated[pkg].latest}`)\n    })\n    if (patch.length > 5) console.log(`  ... and ${patch.length - 5} more`)\n    console.log()\n  }\n\n  console.log('💡 Recommended Actions:')\n  if (vulnerabilities > 0) {\n    console.log('   🔴 Fix security issues: npm audit fix')\n  }\n  if (patch.length > 0 || minor.length > 0) {\n    console.log('   🟢 Safe updates: npm run migrate:safe')\n  }\n  if (major.length > 0) {\n    console.log('   🟡 Major updates: npm run migrate:plan -- <package>')\n  }\n  console.log()\n}\n\n/**\n * Command: plan\n */\nfunction commandPlan(packageName?: string): void {\n  if (!packageName) {\n    console.log('❌ Please specify package name')\n    console.log('   Usage: npm run migrate:plan -- <package>\\n')\n    return\n  }\n\n  const outdated = getOutdatedPackages()\n  const info = outdated[packageName]\n\n  if (!info) {\n    console.log(`❌ Package \"${packageName}\" not found in outdated list\\n`)\n    return\n  }\n\n  const plan = generateMigrationPlan(packageName, info)\n\n  console.log(`\\n📋 Migration Plan: ${packageName}\\n`)\n  console.log(`Current Version: ${plan.currentVersion}`)\n  console.log(`Target Version: ${plan.targetVersion}`)\n  console.log(`Update Type: ${plan.updateType.toUpperCase()}`)\n  console.log(`Risk Level: ${plan.riskLevel.toUpperCase()}`)\n  console.log(`Estimated Time: ${plan.estimatedTime}\\n`)\n\n  if (plan.breakingChanges.length > 0) {\n    console.log('⚠️  Breaking Changes:')\n    plan.breakingChanges.forEach((change, i) => {\n      console.log(`   ${i + 1}. ${change}`)\n    })\n    console.log()\n  }\n\n  console.log('📝 Migration Steps:')\n  plan.migrationSteps.forEach((step, i) => {\n    console.log(`   ${i + 1}. ${step}`)\n  })\n  console.log()\n\n  console.log('💡 To execute this plan:')\n  console.log(`   npm run migrate:execute -- ${packageName}\\n`)\n}\n\n/**\n * Command: migrate\n */\nfunction commandMigrate(mode: string): void {\n  if (!runSafetyChecks()) {\n    console.log('❌ Safety checks failed. Fix issues before migration.\\n')\n    return\n  }\n\n  backup()\n\n  const outdated = getOutdatedPackages()\n  let packagesToUpdate: string[] = []\n\n  if (mode === '--safe') {\n    // Only patch and minor updates\n    packagesToUpdate = Object.entries(outdated)\n      .filter(([, info]) => {\n        const type = getUpdateType(info.current, info.latest)\n        return type === 'patch' || type === 'minor'\n      })\n      .map(([pkg]) => pkg)\n\n    console.log(`📦 Safe Migration Mode`)\n    console.log(`Updating ${packagesToUpdate.length} packages (patch/minor only)\\n`)\n  } else if (mode === '--all') {\n    packagesToUpdate = Object.keys(outdated)\n    console.log(`📦 Full Migration Mode`)\n    console.log(`Updating ${packagesToUpdate.length} packages (including major)\\n`)\n  }\n\n  if (packagesToUpdate.length === 0) {\n    console.log('✅ No packages to update!\\n')\n    return\n  }\n\n  let successCount = 0\n  let failCount = 0\n\n  for (const pkg of packagesToUpdate) {\n    const info = outdated[pkg]\n    const success = migratePackage(pkg, info.latest)\n\n    if (success) {\n      successCount++\n    } else {\n      failCount++\n      console.log(`\\n❌ Migration failed for ${pkg}`)\n      console.log('   Restoring backup and stopping...\\n')\n      restore()\n      return\n    }\n  }\n\n  console.log(`\\n✅ Migration Complete!`)\n  console.log(`   Success: ${successCount}`)\n  console.log(`   Failed: ${failCount}\\n`)\n\n  // Cleanup backups\n  try {\n    exec('rm package.json.backup package-lock.json.backup')\n  } catch (e) {}\n}\n\n/**\n * Main\n */\nfunction main() {\n  const args = process.argv.slice(2)\n  const command = args[0]\n  const param = args[1]\n\n  console.log('\\n📦 Dependency Migrator\\n')\n\n  if (command === 'audit') {\n    commandAudit()\n  } else if (command === 'plan') {\n    commandPlan(param)\n  } else if (command === 'migrate') {\n    commandMigrate(param || '--safe')\n  } else if (command === 'rollback') {\n    restore()\n  } else {\n    console.log('Usage:')\n    console.log('  npm run migrate:audit          - Analyze outdated packages')\n    console.log('  npm run migrate:plan <package> - Generate migration plan')\n    console.log('  npm run migrate:safe           - Update patch/minor only')\n    console.log('  npm run migrate:all            - Update all packages')\n    console.log('  rollback                       - Restore from backup\\n')\n  }\n}\n\nmain()\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\release.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\release.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport { execSync } from 'child_process'\nimport { readFileSync, writeFileSync } from 'fs'\nimport { createInterface } from 'readline'\n\ntype VersionBump = 'patch' | 'minor' | 'major'\n\ninterface PackageJson {\n  name: string\n  version: string\n  [key: string]: any\n}\n\ninterface ChangelogEntry {\n  type: 'added' | 'changed' | 'fixed' | 'removed' | 'breaking'\n  message: string\n  scope?: string\n}\n\n/**\n * Execute command and return output\n */\nfunction exec(command: string, silent = false): string {\n  try {\n    return execSync(command, {\n      encoding: 'utf-8',\n      stdio: silent ? 'pipe' : 'inherit'\n    })\n  } catch (error: any) {\n    if (!silent) throw error\n    return error.stdout || ''\n  }\n}\n\n/**\n * Ask user for confirmation\n */\nfunction askConfirmation(question: string): Promise<boolean> {\n  const rl = createInterface({\n    input: process.stdin,\n    output: process.stdout\n  })\n\n  return new Promise(resolve => {\n    rl.question(question + ' (y/n): ', answer => {\n      rl.close()\n      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes')\n    })\n  })\n}\n\n/**\n * Get current package.json\n */\nfunction getPackageJson(): PackageJson {\n  return JSON.parse(readFileSync('package.json', 'utf-8'))\n}\n\n/**\n * Update package.json version\n */\nfunction updatePackageVersion(newVersion: string): void {\n  const pkg = getPackageJson()\n  pkg.version = newVersion\n  writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n')\n}\n\n/**\n * Calculate new version\n */\nfunction calculateNewVersion(current: string, bump: VersionBump): string {\n  const [major, minor, patch] = current.split('.').map(Number)\n\n  switch (bump) {\n    case 'major':\n      return `${major + 1}.0.0`\n    case 'minor':\n      return `${major}.${minor + 1}.0`\n    case 'patch':\n      return `${major}.${minor}.${patch + 1}`\n  }\n}\n\n/**\n * Get git commits since last tag\n */\nfunction getCommitsSinceLastTag(): string[] {\n  try {\n    const lastTag = exec('git describe --tags --abbrev=0', true).trim()\n    const commits = exec(`git log ${lastTag}..HEAD --oneline`, true)\n      .trim()\n      .split('\\n')\n      .filter(Boolean)\n    return commits\n  } catch (error) {\n    // No tags yet, get all commits\n    const commits = exec('git log --oneline', true)\n      .trim()\n      .split('\\n')\n      .filter(Boolean)\n    return commits\n  }\n}\n\n/**\n * Parse conventional commit message\n */\nfunction parseCommit(commit: string): ChangelogEntry | null {\n  // Format: \"hash type(scope): message\" or \"hash type: message\"\n  const match = commit.match(/^\\w+\\s+(\\w+)(?:\\(([^)]+)\\))?:\\s*(.+)$/)\n\n  if (!match) return null\n\n  const [, rawType, scope, message] = match\n  const type = rawType.toLowerCase()\n\n  if (type === 'feat') {\n    return { type: 'added', message, scope }\n  } else if (type === 'fix') {\n    return { type: 'fixed', message, scope }\n  } else if (type === 'refactor' || type === 'perf') {\n    return { type: 'changed', message, scope }\n  } else if (type === 'breaking' || message.includes('BREAKING CHANGE')) {\n    return { type: 'breaking', message, scope }\n  }\n\n  return null\n}\n\n/**\n * Generate changelog\n */\nfunction generateChangelog(newVersion: string): string {\n  const commits = getCommitsSinceLastTag()\n  const entries = commits.map(parseCommit).filter(Boolean) as ChangelogEntry[]\n\n  const today = new Date().toISOString().split('T')[0]\n\n  let changelog = `## [${newVersion}] - ${today}\\n\\n`\n\n  // Group by type\n  const added = entries.filter(e => e.type === 'added')\n  const changed = entries.filter(e => e.type === 'changed')\n  const fixed = entries.filter(e => e.type === 'fixed')\n  const breaking = entries.filter(e => e.type === 'breaking')\n  const removed = entries.filter(e => e.type === 'removed')\n\n  if (breaking.length > 0) {\n    changelog += '### ⚠️  BREAKING CHANGES\\n\\n'\n    breaking.forEach(e => {\n      const scope = e.scope ? `**${e.scope}**: ` : ''\n      changelog += `- ${scope}${e.message}\\n`\n    })\n    changelog += '\\n'\n  }\n\n  if (added.length > 0) {\n    changelog += '### Added\\n\\n'\n    added.forEach(e => {\n      const scope = e.scope ? `**${e.scope}**: ` : ''\n      changelog += `- ${scope}${e.message}\\n`\n    })\n    changelog += '\\n'\n  }\n\n  if (changed.length > 0) {\n    changelog += '### Changed\\n\\n'\n    changed.forEach(e => {\n      const scope = e.scope ? `**${e.scope}**: ` : ''\n      changelog += `- ${scope}${e.message}\\n`\n    })\n    changelog += '\\n'\n  }\n\n  if (fixed.length > 0) {\n    changelog += '### Fixed\\n\\n'\n    fixed.forEach(e => {\n      const scope = e.scope ? `**${e.scope}**: ` : ''\n      changelog += `- ${scope}${e.message}\\n`\n    })\n    changelog += '\\n'\n  }\n\n  if (removed.length > 0) {\n    changelog += '### Removed\\n\\n'\n    removed.forEach(e => {\n      const scope = e.scope ? `**${e.scope}**: ` : ''\n      changelog += `- ${scope}${e.message}\\n`\n    })\n    changelog += '\\n'\n  }\n\n  return changelog\n}\n\n/**\n * Update CHANGELOG.md file\n */\nfunction updateChangelogFile(newContent: string): void {\n  let changelog = '# Changelog\\n\\nAll notable changes to this project will be documented in this file.\\n\\n'\n\n  try {\n    const existing = readFileSync('CHANGELOG.md', 'utf-8')\n    // Insert new content after the header\n    const lines = existing.split('\\n')\n    const headerEnd = lines.findIndex(l => l.startsWith('##'))\n    if (headerEnd !== -1) {\n      lines.splice(headerEnd, 0, newContent)\n      changelog = lines.join('\\n')\n    } else {\n      changelog = existing + '\\n' + newContent\n    }\n  } catch (error) {\n    // File doesn't exist, create new\n    changelog += newContent\n  }\n\n  writeFileSync('CHANGELOG.md', changelog)\n}\n\n/**\n * Run pre-release checks\n */\nfunction runPreReleaseChecks(): boolean {\n  console.log('🔍 Running pre-release checks...\\n')\n\n  let passed = true\n\n  // Check git status\n  console.log('1. Checking git status...')\n  const gitStatus = exec('git status --porcelain', true)\n  if (gitStatus.trim()) {\n    console.log('   ❌ Git working directory is not clean')\n    console.log('   Please commit or stash changes first\\n')\n    return false\n  }\n  console.log('   ✅ Git working directory clean\\n')\n\n  // Check on main branch\n  console.log('2. Checking git branch...')\n  const branch = exec('git branch --show-current', true).trim()\n  if (branch !== 'main' && branch !== 'master') {\n    console.log(`   ⚠️  Not on main/master branch (current: ${branch})`)\n    console.log('   Releases should be done from main/master\\n')\n  } else {\n    console.log(`   ✅ On ${branch} branch\\n`)\n  }\n\n  // TypeScript check\n  console.log('3. Running TypeScript check...')\n  try {\n    exec('npx tsc --noEmit', true)\n    console.log('   ✅ TypeScript compiles\\n')\n  } catch (error) {\n    console.log('   ❌ TypeScript errors detected\\n')\n    passed = false\n  }\n\n  // Run tests\n  console.log('4. Running tests...')\n  try {\n    exec('npm test -- --run --reporter=verbose', true)\n    console.log('   ✅ Tests passing\\n')\n  } catch (error) {\n    console.log('   ⚠️  Some tests failing\\n')\n  }\n\n  // Build\n  console.log('5. Building package...')\n  try {\n    exec('npm run build', true)\n    console.log('   ✅ Build successful\\n')\n  } catch (error) {\n    console.log('   ❌ Build failed\\n')\n    passed = false\n  }\n\n  // Lint\n  console.log('6. Running linter...')\n  try {\n    exec('npm run lint', true)\n    console.log('   ✅ Linting passed\\n')\n  } catch (error) {\n    console.log('   ⚠️  Linting issues detected\\n')\n  }\n\n  return passed\n}\n\n/**\n * Command: prepare\n */\nasync function commandPrepare(bump: VersionBump): Promise<void> {\n  console.log(`\\n🚀 Preparing ${bump.toUpperCase()} release\\n`)\n  console.log('='.repeat(50) + '\\n')\n\n  const pkg = getPackageJson()\n  const currentVersion = pkg.version\n  const newVersion = calculateNewVersion(currentVersion, bump)\n\n  console.log(`Current version: ${currentVersion}`)\n  console.log(`New version: ${newVersion}\\n`)\n\n  // Run checks\n  if (!runPreReleaseChecks()) {\n    console.log('❌ Pre-release checks failed\\n')\n    console.log('Please fix the issues and try again\\n')\n    return\n  }\n\n  // Generate changelog preview\n  const changelogContent = generateChangelog(newVersion)\n\n  console.log('='.repeat(50))\n  console.log('\\n📝 Changelog Preview:\\n')\n  console.log(changelogContent)\n  console.log('='.repeat(50) + '\\n')\n\n  // Show what will be published\n  console.log('📦 Package Info:\\n')\n  console.log(`Name: ${pkg.name}`)\n  console.log(`Version: ${newVersion}`)\n  console.log(`Description: ${pkg.description}`)\n  console.log(`License: ${pkg.license}\\n`)\n\n  // Ask for confirmation\n  const confirmed = await askConfirmation('Proceed with release?')\n\n  if (!confirmed) {\n    console.log('\\n❌ Release cancelled\\n')\n    return\n  }\n\n  console.log('\\n✅ Release preparation complete!')\n  console.log('\\n📝 Next Steps:')\n  console.log('   1. Review the changelog above')\n  console.log('   2. Run: npm run release:publish')\n  console.log('   3. Or manually:')\n  console.log(`      - Update version: npm version ${newVersion} --no-git-tag-version`)\n  console.log('      - Update CHANGELOG.md')\n  console.log(`      - Commit: git commit -am \"chore: release v${newVersion}\"`)\n  console.log(`      - Tag: git tag v${newVersion}`)\n  console.log('      - Push: git push && git push --tags')\n  console.log('      - Publish: npm publish\\n')\n\n  // Store info for publish command\n  writeFileSync('.release-info.json', JSON.stringify({\n    version: newVersion,\n    changelog: changelogContent,\n    bump\n  }, null, 2))\n}\n\n/**\n * Command: preview\n */\nfunction commandPreview(): void {\n  const pkg = getPackageJson()\n  const newVersion = calculateNewVersion(pkg.version, 'patch')\n  const changelogContent = generateChangelog(newVersion)\n\n  console.log('\\n📝 Changelog Preview (for next patch release):\\n')\n  console.log(changelogContent)\n}\n\n/**\n * Command: publish\n */\nasync function commandPublish(): Promise<void> {\n  console.log('\\n📦 Publishing to NPM\\n')\n\n  // Read release info\n  let releaseInfo\n  try {\n    releaseInfo = JSON.parse(readFileSync('.release-info.json', 'utf-8'))\n  } catch (error) {\n    console.log('❌ No release info found')\n    console.log('   Run: npm run release:prepare first\\n')\n    return\n  }\n\n  const { version, changelog } = releaseInfo\n\n  console.log(`Publishing version ${version}...\\n`)\n\n  // Update version\n  console.log('1. Updating version...')\n  updatePackageVersion(version)\n  console.log(`   ✅ Version updated to ${version}\\n`)\n\n  // Update changelog\n  console.log('2. Updating CHANGELOG.md...')\n  updateChangelogFile(changelog)\n  console.log('   ✅ CHANGELOG.md updated\\n')\n\n  // Git commit\n  console.log('3. Creating git commit...')\n  exec('git add package.json CHANGELOG.md')\n  exec(`git commit -m \"chore: release v${version}\n\n${changelog}\"`)\n  console.log('   ✅ Commit created\\n')\n\n  // Git tag\n  console.log('4. Creating git tag...')\n  exec(`git tag v${version}`)\n  console.log(`   ✅ Tag v${version} created\\n`)\n\n  // Push\n  console.log('5. Pushing to remote...')\n  exec('git push')\n  exec('git push --tags')\n  console.log('   ✅ Pushed to remote\\n')\n\n  // Publish to NPM\n  console.log('6. Publishing to NPM...')\n  const confirmed = await askConfirmation('Ready to publish to NPM?')\n\n  if (!confirmed) {\n    console.log('\\n❌ NPM publish cancelled')\n    console.log('   Code is committed and tagged')\n    console.log('   To publish later, run: npm publish\\n')\n    return\n  }\n\n  try {\n    exec('npm publish --access public')\n    console.log('   ✅ Published to NPM\\n')\n  } catch (error) {\n    console.log('   ❌ NPM publish failed\\n')\n    console.log('   You can try publishing manually: npm publish --access public\\n')\n    return\n  }\n\n  // Cleanup\n  exec('rm .release-info.json')\n\n  console.log('='.repeat(50))\n  console.log('\\n🎉 Release Complete!\\n')\n  console.log(`✅ Version ${version} published successfully\\n`)\n  console.log('📝 Next Steps:')\n  console.log(`   - View on NPM: https://npmjs.com/package/${getPackageJson().name}`)\n  console.log(`   - Create GitHub release: https://github.com/deve1993/UI-LIBRARY/releases/new`)\n  console.log(`   - Announce the release to your team\\n`)\n}\n\n/**\n * Main\n */\nasync function main() {\n  const args = process.argv.slice(2)\n  const command = args[0]\n  const bump = args[1] as VersionBump\n\n  console.log('\\n🚀 Release Manager\\n')\n\n  if (command === 'prepare') {\n    if (!bump || !['patch', 'minor', 'major'].includes(bump)) {\n      console.log('Usage: npm run release:prepare -- <patch|minor|major>')\n      console.log('\\nVersion Bump Types:')\n      console.log('  patch - Bug fixes (1.0.0 → 1.0.1)')\n      console.log('  minor - New features (1.0.0 → 1.1.0)')\n      console.log('  major - Breaking changes (1.0.0 → 2.0.0)\\n')\n      return\n    }\n    await commandPrepare(bump)\n  } else if (command === 'preview') {\n    commandPreview()\n  } else if (command === 'publish') {\n    await commandPublish()\n  } else {\n    console.log('Usage:')\n    console.log('  npm run release:prepare -- <patch|minor|major> - Prepare release')\n    console.log('  npm run release:preview                        - Preview changelog')\n    console.log('  npm run release:publish                        - Publish to NPM\\n')\n  }\n}\n\nmain().catch(console.error)\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\update-registry.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\update-registry.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Component Registry Generator\n *\n * Genera un file index.ts centralizzato che esporta tutti i componenti\n * Semplifica gli import: import { Button, HeroSection } from '@/components'\n */\n\ninterface ComponentInfo {\n  name: string;\n  category: string;\n  path: string;\n  hasTypes: boolean;\n}\n\nclass RegistryGenerator {\n  private rootDir: string;\n  private componentsDir: string;\n\n  constructor(rootDir: string) {\n    this.rootDir = rootDir;\n    this.componentsDir = path.join(rootDir, 'components');\n  }\n\n  generate(): void {\n    console.log('🔍 Scanning components...\\n');\n\n    const components = this.scanComponents();\n\n    console.log(`📦 Found ${components.length} components\\n`);\n\n    // Generate main index.ts\n    this.generateMainIndex(components);\n\n    // Generate category indexes\n    this.generateCategoryIndexes(components);\n\n    console.log('✅ Registry updated successfully!\\n');\n  }\n\n  private scanComponents(): ComponentInfo[] {\n    const components: ComponentInfo[] = [];\n\n    if (!fs.existsSync(this.componentsDir)) {\n      console.error(`❌ Components directory not found: ${this.componentsDir}`);\n      return components;\n    }\n\n    const categories = fs.readdirSync(this.componentsDir);\n\n    for (const category of categories) {\n      const categoryPath = path.join(this.componentsDir, category);\n\n      if (!fs.statSync(categoryPath).isDirectory()) continue;\n\n      const categoryComponents = fs.readdirSync(categoryPath);\n\n      for (const componentName of categoryComponents) {\n        const componentPath = path.join(categoryPath, componentName);\n\n        if (!fs.statSync(componentPath).isDirectory()) continue;\n\n        // Check if has tsx file\n        const tsxFile = path.join(componentPath, `${componentName}.tsx`);\n        if (!fs.existsSync(tsxFile)) continue;\n\n        // Check if has types\n        const typesFile = path.join(componentPath, `${componentName}.types.ts`);\n        const hasTypes = fs.existsSync(typesFile);\n\n        components.push({\n          name: componentName,\n          category,\n          path: componentPath,\n          hasTypes,\n        });\n\n        console.log(`  ✓ ${category}/${componentName}`);\n      }\n    }\n\n    return components;\n  }\n\n  private generateMainIndex(components: ComponentInfo[]): void {\n    const indexPath = path.join(this.componentsDir, 'index.ts');\n\n    let content = `/**\n * Component Registry\n *\n * Auto-generated file - DO NOT EDIT MANUALLY\n * Generated: ${new Date().toISOString()}\n *\n * Usage:\n *   import { Button, HeroSection } from '@/components';\n *   import type { ButtonProps, HeroSectionProps } from '@/components';\n */\n\n`;\n\n    // Group by category\n    const byCategory = components.reduce((acc, comp) => {\n      if (!acc[comp.category]) {\n        acc[comp.category] = [];\n      }\n      acc[comp.category].push(comp);\n      return acc;\n    }, {} as Record<string, ComponentInfo[]>);\n\n    // Generate exports by category\n    for (const [category, comps] of Object.entries(byCategory)) {\n      content += `// ═══════════════════════════════════════════════════════════\\n`;\n      content += `// ${category.charAt(0).toUpperCase() + category.slice(1)}\\n`;\n      content += `// ═══════════════════════════════════════════════════════════\\n\\n`;\n\n      for (const comp of comps) {\n        // Export component\n        content += `export { ${comp.name} } from './${category}/${comp.name}';\\n`;\n\n        // Export types if available\n        if (comp.hasTypes) {\n          content += `export type * from './${category}/${comp.name}/${comp.name}.types';\\n`;\n        }\n      }\n\n      content += '\\n';\n    }\n\n    // Generate component list for reference\n    content += `// ═══════════════════════════════════════════════════════════\\n`;\n    content += `// Component List (${components.length} total)\\n`;\n    content += `// ═══════════════════════════════════════════════════════════\\n`;\n    content += `\\n`;\n    content += `export const AVAILABLE_COMPONENTS = [\\n`;\n\n    for (const comp of components.sort((a, b) => a.name.localeCompare(b.name))) {\n      content += `  '${comp.name}',\\n`;\n    }\n\n    content += `] as const;\\n\\n`;\n\n    content += `export type AvailableComponent = typeof AVAILABLE_COMPONENTS[number];\\n`;\n\n    fs.writeFileSync(indexPath, content, 'utf-8');\n    console.log(`\\n✅ Generated: components/index.ts`);\n  }\n\n  private generateCategoryIndexes(components: ComponentInfo[]): void {\n    const byCategory = components.reduce((acc, comp) => {\n      if (!acc[comp.category]) {\n        acc[comp.category] = [];\n      }\n      acc[comp.category].push(comp);\n      return acc;\n    }, {} as Record<string, ComponentInfo[]>);\n\n    for (const [category, comps] of Object.entries(byCategory)) {\n      const indexPath = path.join(this.componentsDir, category, 'index.ts');\n\n      let content = `/**\n * ${category.charAt(0).toUpperCase() + category.slice(1)} Components\n *\n * Auto-generated file - DO NOT EDIT MANUALLY\n * Generated: ${new Date().toISOString()}\n */\n\n`;\n\n      for (const comp of comps) {\n        content += `export { ${comp.name} } from './${comp.name}';\\n`;\n\n        if (comp.hasTypes) {\n          content += `export type * from './${comp.name}/${comp.name}.types';\\n`;\n        }\n      }\n\n      fs.writeFileSync(indexPath, content, 'utf-8');\n      console.log(`✅ Generated: components/${category}/index.ts`);\n    }\n  }\n}\n\n// CLI\nasync function main() {\n  const rootDir = path.join(__dirname, '..');\n  const generator = new RegistryGenerator(rootDir);\n\n  console.log('🔄 Updating Component Registry...\\n');\n  generator.generate();\n}\n\nmain().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\scripts\\validate-components.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts\\validate-components.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n/**\n * Script di validazione componenti\n *\n * Verifica che:\n * 1. Ogni componente abbia tutti i file richiesti (.tsx, .types.ts, .stories.tsx, index.ts)\n * 2. I tipi esportati corrispondano a quelli usati nel componente\n * 3. Le stories usino i tipi corretti\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { glob } from 'glob';\n\ninterface ValidationResult {\n  component: string;\n  errors: string[];\n  warnings: string[];\n}\n\nconst REQUIRED_FILES = [\n  '{component}.tsx',\n  '{component}.types.ts',\n  '{component}.stories.tsx',\n  'index.ts',\n];\n\nconst SECTIONS_DIR = path.join(__dirname, '../components/sections');\n\nasync function validateComponent(componentDir: string): Promise<ValidationResult> {\n  const componentName = path.basename(componentDir);\n  const result: ValidationResult = {\n    component: componentName,\n    errors: [],\n    warnings: [],\n  };\n\n  // Check required files exist\n  for (const fileTemplate of REQUIRED_FILES) {\n    const fileName = fileTemplate.replace('{component}', componentName);\n    const filePath = path.join(componentDir, fileName);\n\n    if (!fs.existsSync(filePath)) {\n      result.errors.push(`Missing file: ${fileName}`);\n    }\n  }\n\n  // Read component file\n  const componentPath = path.join(componentDir, `${componentName}.tsx`);\n  if (fs.existsSync(componentPath)) {\n    const componentContent = fs.readFileSync(componentPath, 'utf-8');\n\n    // Check if component imports types from .types.ts\n    const hasTypeImport = componentContent.includes(`from './${componentName}.types'`);\n    if (!hasTypeImport) {\n      result.warnings.push('Component does not import types from .types.ts file');\n    }\n\n    // Check if component uses Props interface\n    const usesPropsInterface = componentContent.includes(`${componentName}Props`);\n    if (!usesPropsInterface) {\n      result.errors.push(`Component does not use ${componentName}Props interface`);\n    }\n  }\n\n  // Read types file\n  const typesPath = path.join(componentDir, `${componentName}.types.ts`);\n  if (fs.existsSync(typesPath)) {\n    const typesContent = fs.readFileSync(typesPath, 'utf-8');\n\n    // Check if Props interface is exported\n    const exportsPropsInterface = typesContent.includes(`export interface ${componentName}Props`);\n    if (!exportsPropsInterface) {\n      result.errors.push(`Types file does not export ${componentName}Props interface`);\n    }\n  }\n\n  // Read stories file\n  const storiesPath = path.join(componentDir, `${componentName}.stories.tsx`);\n  if (fs.existsSync(storiesPath)) {\n    const storiesContent = fs.readFileSync(storiesPath, 'utf-8');\n\n    // Check if stories import component\n    const importsComponent = storiesContent.includes(`import { ${componentName} }`);\n    if (!importsComponent) {\n      result.errors.push('Stories file does not import component');\n    }\n\n    // Check if stories use typeof for meta\n    const usesTypeof = storiesContent.includes(`typeof ${componentName}`);\n    if (!usesTypeof) {\n      result.warnings.push('Stories should use typeof for better type inference');\n    }\n  }\n\n  // Read index file\n  const indexPath = path.join(componentDir, 'index.ts');\n  if (fs.existsSync(indexPath)) {\n    const indexContent = fs.readFileSync(indexPath, 'utf-8');\n\n    // Check if index exports component\n    const exportsComponent = indexContent.includes(`export { ${componentName}`);\n    if (!exportsComponent) {\n      result.errors.push('Index file does not export component');\n    }\n\n    // Check if index exports types\n    const exportsTypes = indexContent.includes(`export type {`) &&\n                         indexContent.includes(`${componentName}Props`);\n    if (!exportsTypes) {\n      result.warnings.push('Index file should export types');\n    }\n\n    // Check if imports from .types.ts\n    const importsFromTypes = indexContent.includes('.types');\n    if (!importsFromTypes) {\n      result.warnings.push('Index file should import types from .types.ts');\n    }\n  }\n\n  return result;\n}\n\nasync function main() {\n  console.log('🔍 Validating components...\\n');\n\n  const componentDirs = fs.readdirSync(SECTIONS_DIR)\n    .filter(name => fs.statSync(path.join(SECTIONS_DIR, name)).isDirectory())\n    .map(name => path.join(SECTIONS_DIR, name));\n\n  const results: ValidationResult[] = [];\n\n  for (const dir of componentDirs) {\n    const result = await validateComponent(dir);\n    results.push(result);\n  }\n\n  // Print results\n  let hasErrors = false;\n  let hasWarnings = false;\n\n  for (const result of results) {\n    if (result.errors.length > 0 || result.warnings.length > 0) {\n      console.log(`\\n📦 ${result.component}:`);\n\n      if (result.errors.length > 0) {\n        hasErrors = true;\n        result.errors.forEach(error => {\n          console.log(`  ❌ ERROR: ${error}`);\n        });\n      }\n\n      if (result.warnings.length > 0) {\n        hasWarnings = true;\n        result.warnings.forEach(warning => {\n          console.log(`  ⚠️  WARNING: ${warning}`);\n        });\n      }\n    }\n  }\n\n  // Summary\n  console.log('\\n' + '='.repeat(60));\n  const validComponents = results.filter(r => r.errors.length === 0).length;\n  console.log(`✅ ${validComponents}/${results.length} components are valid`);\n\n  if (hasErrors) {\n    console.log('❌ Found errors that need to be fixed');\n    process.exit(1);\n  } else if (hasWarnings) {\n    console.log('⚠️  Found warnings, consider fixing them');\n  } else {\n    console.log('🎉 All components are valid!');\n  }\n}\n\nmain().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\shared\\hooks\\index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/shared\\hooks\\index.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Shared Hooks - Export centrale\n */\n\nexport { useMediaQuery, useIsMobile, useIsTablet, useIsDesktop } from './useMediaQuery';\nexport { useIntersection } from './useIntersection';\nexport { useDebounce } from './useDebounce';\n\nexport type { UseIntersectionOptions } from './useIntersection';\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\shared\\hooks\\useDebounce.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/shared\\hooks\\useDebounce.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\n\n/**\n * Hook per debounce di un valore\n * Utile per ottimizzare performance su input/search\n *\n * @example\n * const [searchTerm, setSearchTerm] = useState('');\n * const debouncedSearch = useDebounce(searchTerm, 500);\n *\n * useEffect(() => {\n *   // API call con debouncedSearch\n * }, [debouncedSearch]);\n */\nexport function useDebounce<T>(value: T, delay: number = 500): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\shared\\hooks\\useIntersection.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/shared\\hooks\\useIntersection.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useRef, RefObject } from 'react';\n\nexport interface UseIntersectionOptions extends IntersectionObserverInit {\n  /** Se true, disconnette l'observer dopo il primo trigger */\n  freezeOnceVisible?: boolean;\n}\n\n/**\n * Hook per osservare l'intersezione di un elemento con il viewport\n * Utile per animazioni scroll-triggered\n *\n * @example\n * const ref = useRef(null);\n * const inView = useIntersection(ref, { threshold: 0.5 });\n *\n * return (\n *   <div ref={ref} className={inView ? 'fade-in' : 'opacity-0'}>\n *     Content\n *   </div>\n * );\n */\nexport function useIntersection<T extends HTMLElement = HTMLElement>(\n  elementRef: RefObject<T>,\n  { threshold = 0, root = null, rootMargin = '0%', freezeOnceVisible = false }: UseIntersectionOptions = {}\n): boolean {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    // Se già visibile e freezeOnceVisible è true, non fare nulla\n    if (freezeOnceVisible && isIntersecting) return;\n\n    observerRef.current = new IntersectionObserver(\n      ([entry]) => {\n        setIsIntersecting(entry.isIntersecting);\n\n        if (entry.isIntersecting && freezeOnceVisible && observerRef.current) {\n          observerRef.current.disconnect();\n        }\n      },\n      { threshold, root, rootMargin }\n    );\n\n    observerRef.current.observe(element);\n\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [elementRef, threshold, root, rootMargin, freezeOnceVisible, isIntersecting]);\n\n  return isIntersecting;\n}\n\nexport default useIntersection;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\shared\\hooks\\useMediaQuery.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/shared\\hooks\\useMediaQuery.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\n/**\n * Hook per monitorare media queries\n *\n * @example\n * const isMobile = useMediaQuery('(max-width: 768px)');\n * const isDesktop = useMediaQuery('(min-width: 1024px)');\n */\nexport function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(query);\n    setMatches(mediaQuery.matches);\n\n    const handler = (event: MediaQueryListEvent) => {\n      setMatches(event.matches);\n    };\n\n    // Modern browsers\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handler);\n      return () => mediaQuery.removeEventListener('change', handler);\n    }\n    // Legacy support\n    else {\n      mediaQuery.addListener(handler);\n      return () => mediaQuery.removeListener(handler);\n    }\n  }, [query]);\n\n  return matches;\n}\n\n// Breakpoints helper hooks\nexport const useIsMobile = () => useMediaQuery('(max-width: 768px)');\nexport const useIsTablet = () => useMediaQuery('(min-width: 769px) and (max-width: 1024px)');\nexport const useIsDesktop = () => useMediaQuery('(min-width: 1025px)');\n\nexport default useMediaQuery;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\shared\\utils\\cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\shared\\utils\\formatters.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/shared\\utils\\formatters.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Formatta un numero in formato compatto (es: 1000 => 1K, 1500000 => 1.5M)\n */\nexport function formatCompactNumber(value: number): string {\n  if (value >= 1_000_000) {\n    return `${(value / 1_000_000).toFixed(1)}M`;\n  }\n  if (value >= 1_000) {\n    return `${(value / 1_000).toFixed(1)}K`;\n  }\n  return value.toString();\n}\n\n/**\n * Formatta una valuta in Euro\n */\nexport function formatCurrency(value: number, currency = 'EUR'): string {\n  return new Intl.NumberFormat('it-IT', {\n    style: 'currency',\n    currency,\n  }).format(value);\n}\n\n/**\n * Formatta una data in formato localizzato\n */\nexport function formatDate(date: Date | string, format: 'short' | 'long' = 'short'): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n\n  if (format === 'long') {\n    return new Intl.DateTimeFormat('it-IT', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n    }).format(d);\n  }\n\n  return new Intl.DateTimeFormat('it-IT').format(d);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\shared\\utils\\index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/shared\\utils\\index.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Shared Utils - Export centrale\n */\n\nexport { cn } from './cn';\nexport { formatCompactNumber, formatCurrency, formatDate } from './formatters';\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\effects\\Spotlight.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\effects\\Spotlight.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render } from '@testing-library/react';\nimport { Spotlight } from '@/components/effects/Spotlight';\n\ndescribe('Spotlight', () => {\n  it('renders without crashing', () => {\n    const { container } = render(<Spotlight />);\n    expect(container.querySelector('svg')).toBeInTheDocument();\n  });\n\n  it('applies custom fill color', () => {\n    const { container } = render(<Spotlight fill=\"blue\" />);\n    const ellipse = container.querySelector('ellipse');\n    expect(ellipse).toHaveAttribute('fill', 'blue');\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Spotlight className=\"custom-spotlight\" />);\n    const svg = container.querySelector('svg');\n    expect(svg).toHaveClass('custom-spotlight');\n  });\n\n  it('has animation class', () => {\n    const { container } = render(<Spotlight />);\n    const svg = container.querySelector('svg');\n    expect(svg).toHaveClass('animate-spotlight');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Avatar.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Avatar.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { Avatar } from '../../../components/ui/Avatar/Avatar';\n\ndescribe('Avatar', () => {\n  it('renders without crashing', () => {\n    const { container } = render(<Avatar />);\n    expect(container.firstChild).toBeInTheDocument();\n  });\n\n  it('renders image when src is provided', () => {\n    render(<Avatar src=\"/test.jpg\" alt=\"Test User\" />);\n    const img = screen.getByRole('img');\n    expect(img).toBeInTheDocument();\n    expect(img).toHaveAttribute('src', '/test.jpg');\n    expect(img).toHaveAttribute('alt', 'Test User');\n  });\n\n  it('renders initials when name is provided without src', () => {\n    render(<Avatar name=\"John Doe\" />);\n    expect(screen.getByText('JD')).toBeInTheDocument();\n  });\n\n  it('renders fallback icon when neither src nor name provided', () => {\n    const { container } = render(<Avatar fallbackIcon={<span>👤</span>} />);\n    expect(screen.getByText('👤')).toBeInTheDocument();\n  });\n\n  it('shows status indicator when status is provided', () => {\n    const { container } = render(<Avatar status=\"online\" />);\n    expect(container.querySelector('[data-status=\"online\"]')).toBeInTheDocument();\n  });\n\n  it('shows badge when showBadge is true', () => {\n    const { container } = render(<Avatar showBadge badgeContent={5} />);\n    expect(screen.getByText('5')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Avatar className=\"custom-class\" />);\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n\n  it('renders different sizes', () => {\n    const { container } = render(<Avatar size=\"lg\" />);\n    expect(container.firstChild).toHaveClass('lg');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Badge.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Badge.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { Badge } from '../../../components/ui/Badge/Badge';\n\ndescribe('Badge', () => {\n  it('renders without crashing', () => {\n    render(<Badge>Test Badge</Badge>);\n    expect(screen.getByText('Test Badge')).toBeInTheDocument();\n  });\n\n  it('renders children correctly', () => {\n    render(<Badge>Badge Content</Badge>);\n    expect(screen.getByText('Badge Content')).toBeInTheDocument();\n  });\n\n  it('renders different variants', () => {\n    const { container: container1 } = render(<Badge variant=\"default\">Default</Badge>);\n    expect(container1.firstChild).toHaveClass('default');\n\n    const { container: container2 } = render(<Badge variant=\"primary\">Primary</Badge>);\n    expect(container2.firstChild).toHaveClass('primary');\n\n    const { container: container3 } = render(<Badge variant=\"success\">Success</Badge>);\n    expect(container3.firstChild).toHaveClass('success');\n  });\n\n  it('renders different sizes', () => {\n    const { container: container1 } = render(<Badge size=\"sm\">Small</Badge>);\n    expect(container1.firstChild).toHaveClass('sm');\n\n    const { container: container2 } = render(<Badge size=\"lg\">Large</Badge>);\n    expect(container2.firstChild).toHaveClass('lg');\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Badge className=\"custom-class\">Test</Badge>);\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Button.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Button.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Button } from '@/components/ui/Button';\n\ndescribe('Button', () => {\n  it('renders correctly', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();\n  });\n\n  it('handles click events', async () => {\n    const handleClick = vi.fn();\n    const user = userEvent.setup();\n\n    render(<Button onClick={handleClick}>Click me</Button>);\n    await user.click(screen.getByRole('button'));\n\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('applies variant styles', () => {\n    const { rerender } = render(<Button variant=\"primary\">Primary</Button>);\n    let button = screen.getByRole('button');\n    expect(button).toHaveClass('bg-blue-600');\n\n    rerender(<Button variant=\"secondary\">Secondary</Button>);\n    button = screen.getByRole('button');\n    expect(button).toHaveClass('bg-slate-200');\n  });\n\n  it('applies size classes', () => {\n    const { rerender } = render(<Button size=\"sm\">Small</Button>);\n    let button = screen.getByRole('button');\n    expect(button).toHaveClass('px-3', 'py-1.5');\n\n    rerender(<Button size=\"lg\">Large</Button>);\n    button = screen.getByRole('button');\n    expect(button).toHaveClass('px-8', 'py-4');\n  });\n\n  it('can be disabled', () => {\n    render(<Button disabled>Disabled</Button>);\n    expect(screen.getByRole('button')).toBeDisabled();\n  });\n\n  it('shows loading state', () => {\n    render(<Button isLoading>Loading</Button>);\n    expect(screen.getByRole('button')).toBeDisabled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Card.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Card.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { Card, CardHeader, CardContent, CardFooter } from '@/components/ui/Card';\n\ndescribe('Card', () => {\n  it('renders children correctly', () => {\n    render(\n      <Card>\n        <CardContent>Card content</CardContent>\n      </Card>\n    );\n    expect(screen.getByText('Card content')).toBeInTheDocument();\n  });\n\n  it('renders all card sections', () => {\n    render(\n      <Card>\n        <CardHeader>Header</CardHeader>\n        <CardContent>Content</CardContent>\n        <CardFooter>Footer</CardFooter>\n      </Card>\n    );\n\n    expect(screen.getByText('Header')).toBeInTheDocument();\n    expect(screen.getByText('Content')).toBeInTheDocument();\n    expect(screen.getByText('Footer')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <Card className=\"custom-class\">\n        <CardContent>Content</CardContent>\n      </Card>\n    );\n\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Checkbox.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Checkbox.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Checkbox } from '../../../components/ui/Checkbox/Checkbox';\n\ndescribe('Checkbox', () => {\n  it('renders without crashing', () => {\n    render(<Checkbox id=\"test\" />);\n    const checkbox = screen.getByRole('checkbox');\n    expect(checkbox).toBeInTheDocument();\n  });\n\n  it('renders with label', () => {\n    render(<Checkbox id=\"test\" label=\"Test Label\" />);\n    expect(screen.getByText('Test Label')).toBeInTheDocument();\n  });\n\n  it('can be checked and unchecked', async () => {\n    const user = userEvent.setup();\n    render(<Checkbox id=\"test\" />);\n    const checkbox = screen.getByRole('checkbox') as HTMLInputElement;\n\n    expect(checkbox.checked).toBe(false);\n    await user.click(checkbox);\n    expect(checkbox.checked).toBe(true);\n    await user.click(checkbox);\n    expect(checkbox.checked).toBe(false);\n  });\n\n  it('respects disabled state', async () => {\n    const user = userEvent.setup();\n    render(<Checkbox id=\"test\" disabled />);\n    const checkbox = screen.getByRole('checkbox') as HTMLInputElement;\n\n    expect(checkbox).toBeDisabled();\n    await user.click(checkbox);\n    expect(checkbox.checked).toBe(false);\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Checkbox id=\"test\" className=\"custom-class\" />);\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Input.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Input.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Input } from '@/components/ui/Input';\n\ndescribe('Input', () => {\n  it('renders correctly', () => {\n    render(<Input placeholder=\"Enter text\" />);\n    expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument();\n  });\n\n  it('handles value changes', async () => {\n    const handleChange = vi.fn();\n    const user = userEvent.setup();\n\n    render(<Input onChange={handleChange} />);\n    const input = screen.getByRole('textbox');\n\n    await user.type(input, 'Hello');\n    expect(handleChange).toHaveBeenCalled();\n  });\n\n  it('can be disabled', () => {\n    render(<Input disabled />);\n    expect(screen.getByRole('textbox')).toBeDisabled();\n  });\n\n  it('supports different types', () => {\n    const { rerender } = render(<Input type=\"email\" />);\n    expect(screen.getByRole('textbox')).toHaveAttribute('type', 'email');\n\n    rerender(<Input type=\"password\" />);\n    const passwordInput = screen.getByPlaceholderText('', { selector: 'input[type=\"password\"]' });\n    expect(passwordInput).toHaveAttribute('type', 'password');\n  });\n\n  it('shows error state', () => {\n    render(<Input error=\"Invalid input\" />);\n    expect(screen.getByText('Invalid input')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Label.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Label.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { Label } from '../../../components/ui/Label/Label';\n\ndescribe('Label', () => {\n  it('renders without crashing', () => {\n    render(<Label htmlFor=\"test\">Test Label</Label>);\n    expect(screen.getByText('Test Label')).toBeInTheDocument();\n  });\n\n  it('renders children correctly', () => {\n    render(<Label htmlFor=\"test\">Label Text</Label>);\n    const label = screen.getByText('Label Text');\n    expect(label).toBeInTheDocument();\n    expect(label.tagName).toBe('LABEL');\n  });\n\n  it('applies htmlFor attribute', () => {\n    render(<Label htmlFor=\"input-id\">Test</Label>);\n    const label = screen.getByText('Test');\n    expect(label).toHaveAttribute('for', 'input-id');\n  });\n\n  it('shows required indicator when required', () => {\n    render(<Label htmlFor=\"test\" required>Test Label</Label>);\n    expect(screen.getByText('*')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    render(<Label htmlFor=\"test\" className=\"custom-class\">Test</Label>);\n    expect(screen.getByText('Test')).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Modal.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Modal.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Modal } from '../../../components/ui/Modal/Modal';\n\ndescribe('Modal', () => {\n  it('renders when open is true', () => {\n    render(<Modal isOpen={true} onClose={() => {}}>Modal Content</Modal>);\n    expect(screen.getByText('Modal Content')).toBeInTheDocument();\n  });\n\n  it('does not render when open is false', () => {\n    render(<Modal isOpen={false} onClose={() => {}}>Modal Content</Modal>);\n    expect(screen.queryByText('Modal Content')).not.toBeInTheDocument();\n  });\n\n  it('calls onClose when close button is clicked', async () => {\n    const user = userEvent.setup();\n    const onClose = vi.fn();\n    render(<Modal isOpen={true} onClose={onClose}>Content</Modal>);\n\n    const closeButton = screen.getByRole('button', { name: /close/i });\n    await user.click(closeButton);\n    expect(onClose).toHaveBeenCalledTimes(1);\n  });\n\n  it('renders title when provided', () => {\n    render(<Modal isOpen={true} onClose={() => {}} title=\"Test Title\">Content</Modal>);\n    expect(screen.getByText('Test Title')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Modal isOpen={true} onClose={() => {}} className=\"custom-class\">Content</Modal>);\n    expect(container.querySelector('.custom-class')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Radio.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Radio.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Radio } from '../../../components/ui/Radio/Radio';\n\ndescribe('Radio', () => {\n  it('renders without crashing', () => {\n    render(<Radio id=\"test\" name=\"test\" value=\"test\" />);\n    const radio = screen.getByRole('radio');\n    expect(radio).toBeInTheDocument();\n  });\n\n  it('renders with label', () => {\n    render(<Radio id=\"test\" name=\"test\" value=\"test\" label=\"Test Label\" />);\n    expect(screen.getByText('Test Label')).toBeInTheDocument();\n  });\n\n  it('can be selected', async () => {\n    const user = userEvent.setup();\n    render(<Radio id=\"test\" name=\"test\" value=\"test\" />);\n    const radio = screen.getByRole('radio') as HTMLInputElement;\n\n    expect(radio.checked).toBe(false);\n    await user.click(radio);\n    expect(radio.checked).toBe(true);\n  });\n\n  it('respects disabled state', async () => {\n    const user = userEvent.setup();\n    render(<Radio id=\"test\" name=\"test\" value=\"test\" disabled />);\n    const radio = screen.getByRole('radio') as HTMLInputElement;\n\n    expect(radio).toBeDisabled();\n    await user.click(radio);\n    expect(radio.checked).toBe(false);\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Radio id=\"test\" name=\"test\" value=\"test\" className=\"custom-class\" />);\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Select.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Select.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Select } from '../../../components/ui/Select/Select';\n\ndescribe('Select', () => {\n  const options = [\n    { value: '1', label: 'Option 1' },\n    { value: '2', label: 'Option 2' },\n    { value: '3', label: 'Option 3' },\n  ];\n\n  it('renders without crashing', () => {\n    render(<Select options={options} />);\n    const select = screen.getByRole('combobox');\n    expect(select).toBeInTheDocument();\n  });\n\n  it('renders with label', () => {\n    render(<Select options={options} label=\"Test Label\" />);\n    expect(screen.getByText('Test Label')).toBeInTheDocument();\n  });\n\n  it('renders all options', async () => {\n    const user = userEvent.setup();\n    render(<Select options={options} />);\n    const select = screen.getByRole('combobox');\n\n    await user.click(select);\n    options.forEach(option => {\n      expect(screen.getByText(option.label)).toBeInTheDocument();\n    });\n  });\n\n  it('can select an option', async () => {\n    const user = userEvent.setup();\n    render(<Select options={options} />);\n    const select = screen.getByRole('combobox') as HTMLSelectElement;\n\n    await user.selectOptions(select, '2');\n    expect(select.value).toBe('2');\n  });\n\n  it('shows error message', () => {\n    render(<Select options={options} error=\"Error message\" />);\n    expect(screen.getByText('Error message')).toBeInTheDocument();\n  });\n\n  it('respects disabled state', () => {\n    render(<Select options={options} disabled />);\n    const select = screen.getByRole('combobox');\n    expect(select).toBeDisabled();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Select options={options} className=\"custom-class\" />);\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Switch.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Switch.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Switch } from '../../../components/ui/Switch/Switch';\n\ndescribe('Switch', () => {\n  it('renders without crashing', () => {\n    render(<Switch id=\"test\" />);\n    const switchEl = screen.getByRole('switch');\n    expect(switchEl).toBeInTheDocument();\n  });\n\n  it('renders with label', () => {\n    render(<Switch id=\"test\" label=\"Test Label\" />);\n    expect(screen.getByText('Test Label')).toBeInTheDocument();\n  });\n\n  it('can be toggled on and off', async () => {\n    const user = userEvent.setup();\n    render(<Switch id=\"test\" />);\n    const switchEl = screen.getByRole('switch') as HTMLInputElement;\n\n    expect(switchEl.checked).toBe(false);\n    await user.click(switchEl);\n    expect(switchEl.checked).toBe(true);\n    await user.click(switchEl);\n    expect(switchEl.checked).toBe(false);\n  });\n\n  it('respects disabled state', async () => {\n    const user = userEvent.setup();\n    render(<Switch id=\"test\" disabled />);\n    const switchEl = screen.getByRole('switch') as HTMLInputElement;\n\n    expect(switchEl).toBeDisabled();\n    await user.click(switchEl);\n    expect(switchEl.checked).toBe(false);\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Switch id=\"test\" className=\"custom-class\" />);\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Textarea.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Textarea.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Textarea } from '../../../components/ui/Textarea/Textarea';\n\ndescribe('Textarea', () => {\n  it('renders without crashing', () => {\n    render(<Textarea />);\n    const textarea = screen.getByRole('textbox');\n    expect(textarea).toBeInTheDocument();\n  });\n\n  it('renders with label', () => {\n    render(<Textarea label=\"Test Label\" />);\n    expect(screen.getByText('Test Label')).toBeInTheDocument();\n  });\n\n  it('accepts text input', async () => {\n    const user = userEvent.setup();\n    render(<Textarea />);\n    const textarea = screen.getByRole('textbox') as HTMLTextAreaElement;\n\n    await user.type(textarea, 'Hello World');\n    expect(textarea.value).toBe('Hello World');\n  });\n\n  it('shows error message', () => {\n    render(<Textarea error=\"Error message\" />);\n    expect(screen.getByText('Error message')).toBeInTheDocument();\n  });\n\n  it('shows helper text', () => {\n    render(<Textarea helperText=\"Helper text\" />);\n    expect(screen.getByText('Helper text')).toBeInTheDocument();\n  });\n\n  it('respects disabled state', async () => {\n    const user = userEvent.setup();\n    render(<Textarea disabled />);\n    const textarea = screen.getByRole('textbox');\n\n    expect(textarea).toBeDisabled();\n    await user.type(textarea, 'Test');\n    expect(textarea).toHaveValue('');\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(<Textarea className=\"custom-class\" />);\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\components\\ui\\Tooltip.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\components\\ui\\Tooltip.test.tsx` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Tooltip } from '../../../components/ui/Tooltip/Tooltip';\n\ndescribe('Tooltip', () => {\n  it('renders trigger element', () => {\n    render(<Tooltip content=\"Tooltip text\"><button>Hover me</button></Tooltip>);\n    expect(screen.getByText('Hover me')).toBeInTheDocument();\n  });\n\n  it('shows tooltip on hover', async () => {\n    const user = userEvent.setup();\n    render(<Tooltip content=\"Tooltip text\"><button>Hover me</button></Tooltip>);\n\n    const trigger = screen.getByText('Hover me');\n    await user.hover(trigger);\n\n    expect(screen.getByText('Tooltip text')).toBeInTheDocument();\n  });\n\n  it('hides tooltip on unhover', async () => {\n    const user = userEvent.setup();\n    render(<Tooltip content=\"Tooltip text\"><button>Hover me</button></Tooltip>);\n\n    const trigger = screen.getByText('Hover me');\n    await user.hover(trigger);\n    expect(screen.getByText('Tooltip text')).toBeInTheDocument();\n\n    await user.unhover(trigger);\n    // Tooltip should be hidden or aria-hidden\n    const tooltip = screen.queryByText('Tooltip text');\n    expect(tooltip).not.toBeVisible();\n  });\n\n  it('renders different positions', () => {\n    const { container } = render(\n      <Tooltip content=\"Tooltip\" position=\"top\">\n        <button>Button</button>\n      </Tooltip>\n    );\n    expect(container.querySelector('[data-position=\"top\"]')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <Tooltip content=\"Tooltip\" className=\"custom-class\">\n        <button>Button</button>\n      </Tooltip>\n    );\n    expect(container.querySelector('.custom-class')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\test\\setup.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/test\\setup.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { expect, afterEach } from 'vitest';\nimport { cleanup } from '@testing-library/react';\nimport * as matchers from '@testing-library/jest-dom/matchers';\n\nexpect.extend(matchers);\n\n// Cleanup after each test\nafterEach(() => {\n  cleanup();\n});\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: (query: string) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: () => {},\n    removeListener: () => {},\n    addEventListener: () => {},\n    removeEventListener: () => {},\n    dispatchEvent: () => {},\n  }),\n});\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = class IntersectionObserver {\n  constructor() {}\n  disconnect() {}\n  observe() {}\n  takeRecords() {\n    return [];\n  }\n  unobserve() {}\n} as any;\n","usedDeprecatedRules":[]},{"filePath":"C:\\VSC\\UI library\\component-vault\\vitest.setup.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/vitest.setup.ts` using `parserOptions.project`: <tsconfigRootDir>/tsconfig.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { expect, afterEach } from 'vitest';\nimport { cleanup } from '@testing-library/react';\nimport * as matchers from '@testing-library/jest-dom/matchers';\n\n// Extend Vitest's expect with jest-dom matchers\nexpect.extend(matchers);\n\n// Cleanup after each test\nafterEach(() => {\n  cleanup();\n});\n","usedDeprecatedRules":[]}]
